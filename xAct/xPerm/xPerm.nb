Notebook[{

Cell[CellGroupData[{
Cell[TextData[StyleBox["xPerm",
 FontColor->RGBColor[1, 0, 0]]], "Title"],

Cell[TextData[StyleBox["Fast manipulation of permutation groups",
 FontColor->RGBColor[0, 0, 1]]], "Subtitle"],

Cell[TextData[{
 StyleBox["Jos\[EAcute] M. Mart\[IAcute]n-Garc\[IAcute]a\n",
  FontSize->18],
 "(c) 2003-2015, under GPL",
 StyleBox["\n\n",
  FontSize->18],
 "jose@xAct.es\nhttp://www.xAct.es/\nhttp://groups.google.com/group/xAct"
}], "Subsubtitle"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["0. Info and copyright",
 FontColor->RGBColor[0, 0, 1]]], "Section",
 FontSize->24],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"**", "**", "**", "**", "**", "**", "**", "**", "**", "**", "**"}],
    "*", " ", "0.", " ", "Info", " ", "and", " ", 
   RowBox[{"copyright", " ", "**", "**", "**"}]}], 
  "*****************)"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerPart", "/@", 
  RowBox[{"Date", "[", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2015", ",", "8", ",", "19", ",", "2", ",", "20", ",", "15"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xAct`xPerm`$Version", "=", 
  RowBox[{"{", 
   RowBox[{"\"\<1.2.3\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"2015", ",", "8", ",", "23"}], "}"}]}], "}"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"1.2.3\"\>", ",", 
   RowBox[{"{", 
    RowBox[{"2015", ",", "8", ",", "23"}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["$SessionID"], "Input"],

Cell[BoxData["18729131956632791808"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["0.1. GPL", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"xPerm", ",", " ", 
    RowBox[{
    "a", " ", "free", " ", "package", " ", "for", " ", "permutation", " ", 
     "groups", " ", "in", " ", "Mathematica"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Copyright", " ", 
     RowBox[{"(", "C", ")"}], " ", "2003"}], "-", 
    RowBox[{"2015", " ", "Jose", " ", 
     RowBox[{"M", ".", " ", "Martin"}]}], "-", "Garcia"}], " ", "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "This", " ", "program", " ", "is", " ", "free", " ", "software"}], ";", 
     " ", 
     RowBox[{"you", " ", "can", " ", "redistribute", " ", "it", " ", 
      RowBox[{"and", "/", "or"}], " ", "modify", "\[IndentingNewLine]", " ", 
      "it", " ", "under", " ", "the", " ", "terms", " ", "of", " ", "the", 
      " ", "GNU", " ", "General", " ", "Public", " ", "License", " ", "as", 
      " ", "published", " ", "by", "\[IndentingNewLine]", " ", "the", " ", 
      "Free", " ", "Software", " ", "Foundation"}], ";", " ", 
     RowBox[{
     "either", " ", "version", " ", "2", "of", " ", "the", " ", "License"}]}],
     ",", "\[IndentingNewLine]", "  ", 
    RowBox[{"or", " ", 
     RowBox[{"(", 
      RowBox[{"at", " ", "your", " ", "option"}], ")"}], " ", "any", " ", 
     "later", " ", 
     RowBox[{
     "version", ".", "\[IndentingNewLine]", "\[IndentingNewLine]", "This"}], 
     " ", "program", " ", "is", " ", "distributed", " ", "in", " ", "the", 
     " ", "hope", " ", "that", " ", "it", " ", "will", " ", "be", " ", 
     "useful"}], ",", " ", 
    RowBox[{
     RowBox[{
     "but", "\[IndentingNewLine]", " ", "WITHOUT", " ", "ANY", " ", 
      "WARRANTY"}], ";", " ", 
     RowBox[{
     "without", " ", "even", " ", "the", " ", "implied", " ", "warranty", " ",
       "of", " ", "MERCHANTABILITY", "\[IndentingNewLine]", " ", "or", " ", 
      "FITNESS", " ", "FOR", " ", "A", " ", "PARTICULAR", " ", 
      RowBox[{"PURPOSE", ".", " ", "See"}], " ", "the", " ", "GNU", " ", 
      "General", " ", "Public", " ", "License", "\[IndentingNewLine]", " ", 
      "for", " ", "more", " ", 
      RowBox[{
      "details", ".", "\[IndentingNewLine]", "\[IndentingNewLine]", "You"}], 
      " ", "should", " ", "have", " ", "received", " ", "a", " ", "copy", " ",
       "of", " ", "the", " ", "GNU", " ", "General", " ", "Public", " ", 
      "License", " ", "along", "\[IndentingNewLine]", " ", "with", " ", 
      "this", " ", "program"}], ";", " ", 
     RowBox[{"if", " ", "not"}]}], ",", " ", 
    RowBox[{
    "write", " ", "to", " ", "the", " ", "Free", " ", "Software", " ", 
     "Foundation"}], ",", " ", 
    RowBox[{"Inc", "."}], ",", "\[IndentingNewLine]", "  ", 
    RowBox[{
     RowBox[{"59", " ", "Temple", " ", "Place"}], "-", 
     RowBox[{"Suite", " ", "330"}]}], ",", " ", "Boston", ",", " ", 
    RowBox[{
     RowBox[{"MA", " ", "02111"}], "-", "1307"}], ",", " ", 
    RowBox[{"USA", "."}]}], "\[IndentingNewLine]", "*)"}]}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["0.2. Info package", "Subsection"],

Cell["\<\
(* :Title: xPerm *)

(* :Author: Jose M. Martin-Garcia *)

(* :Summary: Computational group theory for index canonicalization *)

(* :Brief Discussion:
    - Notations for permutations: It is not clear which one is better,
      so that four are encoded: Perm, Images, Cycles and Rules.
    - Permutations act on the right of lists or other permutations.
      This is the choice in GAP and Butler's book.
    - We follow Portugal's notation: permutations map slots to indices.
    - There are two main objectives in this package:
        a) Schreier-Sims algorithm (Butler's book)
        b) choice of coset and double-coset representatives
           (Portugal's papers).
    - This is the Mathematica code of the package. An external C code
      with a subset of capabilities can be linked via MathLink.
    - Mathematica 9 contains the Butler-Portugal algorithm, but xPerm
      does not yet link to it by default.  
*)
  
(* :Context: xAct`xPerm` *)

(* :Package Version: 1.2.3 *)

(* :Copyright: Jose M. Martin-Garcia 2003-2015 *)

(* :History: (see xPerm.History for details)
    - Version 0.1 (May 2003): Schreier-Sims coded from Butler's book.
      Portugal's routines encoded.
    - Version 0.2 (July 2003): Recoding in C, using Images notations,
      and connection through MathLink. Much faster.
    - Version 0.3 (August 2003): Recoded signed permutations. The basic
      mathematical structure is an algebra, and not the {-1,1} x Sn group.
    - Version 0.4 (March 2004): First public release.
    - Version 0.5 (July 2006) 
    - Version 0.6 (August 2007)
    - Version 0.7 (November 2007)
    - Version 1.0 (March 2008): Release for publication.
    - Version 1.1 (September 2010)
    - Version 1.2 (January 2013)
*)

(* :Keywords: permutations, index canonicalization, Butler-Portugal algorithm \
*)

(* :Source: xPerm.nb *)

(* :Mathematica Version: 5.0 and later *)

(* :Limitations: Only permutation symmetries, not multiterm symmetries *)\
\>", "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["0.3. TODO", "Subsection"],

Cell[TextData[{
 "Link to the new canonicalizer in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 9, which is generally faster."
}], "Text"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["1. Begin package",
 FontColor->RGBColor[0, 0, 1]]], "Section",
 FontSize->24],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"**", "**", "**", "**", "**", "**", "**", "**", "**", "**", "**"}],
    "*", " ", "1.", " ", "Begin", " ", "package"}], " ", 
  "***********************)"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"TimeUsed", "[", "]"}], ",", 
   RowBox[{"SessionTime", "[", "]"}], ",", 
   RowBox[{
    RowBox[{"TimeUsed", "[", "]"}], "/", 
    RowBox[{"SessionTime", "[", "]"}]}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.928026`", ",", "3.915285`7.044308374046357", ",", 
   "0.4924400602864294`"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["1.1. Begin package", "Subsection"],

Cell["Protect against multiple loading of the package:", "Text"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"xAct`xPerm`Private`xPermSymbols", "=", 
     RowBox[{"DeleteCases", "[", 
      RowBox[{
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Names", "[", "\"\<xAct`xPerm`*\>\"", "]"}], ",", 
         RowBox[{"Names", "[", "\"\<xAct`xPerm`Private`*\>\"", "]"}]}], "]"}],
        ",", 
       RowBox[{"\"\<$Version\>\"", "|", "\"\<xAct`xPerm`$Version\>\""}]}], 
      "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Unprotect", "/@", "xAct`xPerm`Private`xPermSymbols"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Clear", "/@", "xAct`xPerm`Private`xPermSymbols"}], ";"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 InitializationCell->True],

Cell["\<\
Decide whether the package is being loaded from other package:\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Unevaluated", "[", "xAct`xCore`Private`$LastPackage", "]"}], "===",
      "xAct`xCore`Private`$LastPackage"}], ",", 
    RowBox[{"xAct`xCore`Private`$LastPackage", "=", "\"\<xAct`xPerm`\>\""}]}],
    "]"}], ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData["xAct`xCore`Private`$LastPackage"], "Input"],

Cell[BoxData["\<\"xAct`xPerm`\"\>"], "Output"]
}, Open  ]],

Cell[TextData[{
 "Temporary fix for the conflicts with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 8.0:"
}], "Text"],

Cell[BoxData[{
 RowBox[{"xAct`xPerm`Cycles", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"xAct`xPerm`RightCosetRepresentative", ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"System`Cycles", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Off", "[", 
   RowBox[{"System`Cycles", "::", "shdw"}], "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[TextData[{
 "Start the ",
 StyleBox["xPerm",
  FontSlant->"Italic"],
 " package. It needs the ",
 StyleBox["xCore",
  FontSlant->"Italic"],
 " package. From version 0.6.2 of ",
 StyleBox["xCore",
  FontSlant->"Italic"],
 " the package ",
 StyleBox["ExpressionManipulation",
  FontSlant->"Italic"],
 " is not automatically read."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BeginPackage", "[", 
  RowBox[{"\"\<xAct`xPerm`\>\"", ",", 
   RowBox[{"{", "\"\<xAct`xCore`\>\"", "}"}]}], "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"xAct`xPerm`\"\>"], "Output"]
}, Open  ]],

Cell["Message:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"xAct`xCore`Private`$LastPackage", "=!=", "\"\<Tensors`\>\""}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Print", "[", "xAct`xCore`Private`bars", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<Package xAct`xPerm`  version \>\"", ",", 
       RowBox[{"$Version", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", "\"\<, \>\"", ",", 
       RowBox[{"$Version", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ";", 
     RowBox[{
     "Print", "[", 
      "\"\<CopyRight (C) 2003-2015, Jose M. Martin-Garcia, under the General \
Public License.\>\"", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData["\<\"------------------------------------------------------------\
\"\>"], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Package xAct`xPerm`  version \"\>", 
   "\[InvisibleSpace]", "\<\"1.2.3\"\>", "\[InvisibleSpace]", "\<\", \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2015", ",", "8", ",", "23"}], "}"}]}],
  SequenceForm["Package xAct`xPerm`  version ", "1.2.3", ", ", {2015, 8, 23}],
  
  Editable->False]], "Print"],

Cell[BoxData["\<\"CopyRight (C) 2003-2015, Jose M. Martin-Garcia, under the \
General Public License.\"\>"], "Print"]
}, Open  ]]
}, Open  ]],

Cell["\<\
The Disclaimer of GPL (remove temporarily the General::shdw message to avoid \
collision with the disclaimer messages of other packages):\
\>", "Text"],

Cell[BoxData[{
 RowBox[{"Off", "[", 
  RowBox[{"General", "::", "shdw"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"xAct`xPerm`Disclaimer", "[", "]"}], ":=", 
  RowBox[{
  "Print", "[", 
   "\"\<These are points 11 and 12 of the General Public \
License:\\n\\nBECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO \
WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT \
WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES \
PROVIDE THE PROGRAM `AS IS\.b4 WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED \
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO \
THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM \
PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR \
CORRECTION.\\n\\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO \
IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY \
AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR \
DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES \
ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT \
LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED \
BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER \
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE \
POSSIBILITY OF SUCH DAMAGES.\>\"", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"On", "[", 
  RowBox[{"General", "::", "shdw"}], "]"}]}], "Input",
 InitializationCell->True],

Cell[TextData[{
 "If ",
 StyleBox["xPerm",
  FontSlant->"Italic"],
 " is not being called from other package then write this GPL short \
disclaimer:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"xAct`xCore`Private`$LastPackage", "===", "\"\<xAct`xPerm`\>\""}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Unset", "[", "xAct`xCore`Private`$LastPackage", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Print", "[", "xAct`xCore`Private`bars", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
    "Print", "[", 
     "\"\<These packages come with ABSOLUTELY NO WARRANTY; for details type \
Disclaimer[]. This is free software, and you are welcome to redistribute it \
under certain conditions. See the General Public License for details.\>\"", 
     "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Print", "[", "xAct`xCore`Private`bars", "]"}]}]}], 
  "]"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData["\<\"------------------------------------------------------------\
\"\>"], "Print"],

Cell[BoxData["\<\"These packages come with ABSOLUTELY NO WARRANTY; for \
details type Disclaimer[]. This is free software, and you are welcome to \
redistribute it under certain conditions. See the General Public License for \
details.\"\>"], "Print"],

Cell[BoxData["\<\"------------------------------------------------------------\
\"\>"], "Print"]
}, Open  ]]
}, Open  ]],

Cell["This is the output of the Disclaimer[] command:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Disclaimer", "[", "]"}]], "Input"],

Cell[BoxData["\<\"These are points 11 and 12 of the General Public \
License:\\n\\nBECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO \
WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT \
WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES \
PROVIDE THE PROGRAM `AS IS\.b4 WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED \
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO \
THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM \
PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR \
CORRECTION.\\n\\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO \
IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY \
AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR \
DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES \
ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT \
LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED \
BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER \
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE \
POSSIBILITY OF SUCH DAMAGES.\"\>"], "Print"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["1.2. Usage messages", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Notations", " ", "and", " ", "translation"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Perm", "::", "usage"}], "=", 
     "\"\<Perm is the head for permutation lists of the form Perm[{n1, ..., \
nk}]. Example: Perm[{6, 3, 2, 1, 5, 4}] means that the object in the first \
place goes to the fourth place and so on. Perm[{}] represents the identity.\>\
\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Cycles", "::", "usage"}], "=", 
     "\"\<Cycles is the head for permutations expressed in disjoint cyclic \
notation. Singletons are not included. Example: Cycles[{1, 4, 6}, {2, 3}] \
represents the exchange of points 2 and 3, and the cycle 1->4->6->1. Cycles[] \
represents the identity.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Rules", "::", "usage"}], "=", 
     "\"\<Rules is the head for permutations expressed in rule notation. \
Singletons are not included. Example: Rules[1->4, 4->6, 6->1, 2->3, 3->2]. \
Rules[] represents the identity.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Images", "::", "usage"}], "=", 
     "\"\<Images is the head for permutations expressed as a list of images. \
Example: Images[{4, 3, 2, 6, 5, 1}]. Images[{}] represents the \
identity.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PermQ", "::", "usage"}], "=", 
     "\"\<PermQ[ Perm[{n1, ..., nk}] ] yields True if the list {n1, ..., nk} \
of length k is a rearrangement of the numbers {1, ..., k}. PermQ[ \
Cycles[cyc1, cyc2, ...] ] gives True if there are no repeated points among \
cycles cyci. PermQ[ Rules[i1->i2, ...] ] gives True if the rules map a set of \
integers to itself. PermQ[ Images[{n1, ..., nk}] ] yields True if the list \
{n1, ..., nk} of length k is a rearrangement of the numbers {1, ..., k}. \
PermQ[ID] gives True. PermQ gives True on a linear combination of valid \
permutations. PermQ returns False otherwise.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ID", "::", "usage"}], "=", 
     "\"\<ID represents the identity in all notations. ID[perm] gives the \
identity permutation in the notation used by perm.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NotationOfPerm", "::", "usage"}], "=", 
     "\"\<NotationOfPerm[perm] gives the notation of permutation perm. It can \
be one of {Perm, length}, {Images, length}, Cyles or Rules.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"TranslatePerm", "::", "usage"}], "=", 
     "\"\<TranslatePerm[perm, notation] translates permutation perm, in any \
format, to the given notation, which must be one of Perm, {Perm, length}, \
Cycles, Rules, Images or {Images, length}. TranslatePerm[set, notation] \
returns the set (with head GenSet, StrongGenSet, Group or Coset) with all its \
permutations translated to notation.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"RandomPerm", "::", "usage"}], "=", 
     "\"\<RandomPerm[deg] gives a random permutation in Perm notation. \
RandomPerm[deg, notation] constructs RandomPerm[deg] and then translates it \
to the given notation using TranslatePerm[perm, notation].\>\""}], 
    ";"}]}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Operations", " ", "with", " ", "permutations"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"PermLength", "::", "usage"}], "=", 
     "\"\<PermLength[perm] gives the so-called length of permutation perm. If \
expressed in Perm or Images notation, the length of perm is the length of the \
list of points. In other cases, it returns PermDeg[perm].\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PermDeg", "::", "usage"}], "=", 
     "\"\<PermDeg[perm] gives the degree of permutation perm, defined as the \
largest point moved. The degree of (any form of) the identity is 0. \
PermDeg[set] gives the largest degree among the permutations of the set (a \
group, generating set, strong generating set or linear combination).\>\""}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PermProduct", "::", "usage"}], "=", 
     "\"\<PermProduct[perm1, perm2] gives the composition of permutations \
perm1 and perm2, applied from left to right, that is, the result is \
equivalent to the application of perm2 after perm1 on a list of points. \
PermProduct[perm1, perm2, perm3, ...] composes all permutations, assuming \
that they all use the same notation. PermProduct[perm] gives perm and \
PermProduct[] gives ID.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"InversePerm", "::", "usage"}], "=", 
     "\"\<InversePerm[perm] gives the inverse permutation of perm.\>\""}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PermPower", "::", "usage"}], "=", 
     "\"\<PermPower[perm, n] for positive n gives the composition of n copies \
of perm. For negative n it gives the composition of n copies of \
InversePerm[perm]. For zero n it gives ID[perm].\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"OnPoints", "::", "usage"}], "=", 
     "\"\<OnPoints[p, perm] yields the image of point p under permutation \
perm. OnPoints[{p1, ...}, perm] yields the list of images of points pi. Signs \
of permutations are not considered.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PermSignature", "::", "usage"}], "=", 
     "\"\<PermSignature[perm] gives the signature of perm: +1 if perm can be \
written as an even number of transpositions, -1 if perm can be written as an \
odd number of transpositions.\>\""}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", "Stabilization", " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"StablePoints", "::", "usage"}], "=", 
     "\"\<StablePoints[perm, n] gives the points in {1, ..., n} that are \
fixed by permutation perm. StablePoints[GS, n] gives the points in {1, ..., \
n} that are fixed by all permutations in GS.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NonStablePoints", "::", "usage"}], "=", 
     "\"\<NonStablePoints[list, GS] enlarges list until none of the \
permutations in GS fixes all points in list. It tries to give the shortest \
result possible, not necessarily ordered.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Stabilizer", "::", "usage"}], "=", 
     "\"\<Stabilizer[{p1, ...}, GS] gives the subset of permutations in GS \
that fix all points pi. Stabilizer[{p1, ...}, SGS] returns a strong \
generating set for the stabilizer subgroup of the group SGS fixing all points \
pi. In this latter case a third argument can be given with the length of the \
internal Schreier vectors.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SetStabilizer", "::", "usage"}], "=", 
     "\"\<SetStabilizer[{p1, ...}, GS] gives the subset of permutations in GS \
that keep the points pi inside the list. SetStabilizer[{p1, ...}, SGS] \
returns a strong generating set for the setwise stabilizer of the list of \
points pi under the group generated by the strong generating set SGS.\>\""}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Permuting", " ", "lists"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PermutationFromTo", "::", "usage"}], "=", 
     "\"\<PermutationFromTo[list1, list2] gives the permutation (in Images \
notation) that converts list1 into list2. Points in list1 or list2 can be \
repeated.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PermuteList", "::", "usage"}], "=", 
     "\"\<PermuteList[list, perm] permutes the points of list according to \
the permutation perm.\>\""}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", "Sorting", " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SortB", "::", "usage"}], "=", 
     "\"\<SortB[{e1, e2, ...}, B] sorts the elements ei according to the \
canonical order defined by list B. Elements not in B are sorted last, using \
Sort.\>\""}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"MinB", "::", "usage"}], "=", 
     "\"\<MinB[list, B] gives the mininum element of list with respect to \
base B. If none of the elements of B is in list then the minimum of list with \
respect to the canonical order is returned.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PermOrderedQ", "::", "usage"}], "=", 
     "\"\<PermOrderedQ[h[perm1, perm2]] gives True if perm1 maps integers to \
smaller points than perm2. It gives False if perm1 maps integers to larger \
points than perm2. It gives Null if perm1 and perm2 maps integers to the same \
points. PermOrderedQ[h[perm1, perm2], B] gives True if perm1 maps the points \
of base B to smaller (according to B) images than perm2. It gives False if \
perm1 maps the points of B to larger (according to B) images than perm2. It \
gives Null if perm1 and perm2 map the points of B to the same images.\>\""}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PermSort", "::", "usage"}], "=", 
     "\"\<PermSort[{perm1, perm2, ...}] sorts permutations permi according to \
PermOrderedQ. PermSort[{perm1, perm2, ...}, B] sorts permutations permi \
according to PermOrderedQ using base B.\>\""}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{
     RowBox[{"PermEqual", "::", "usage"}], "=", 
     "\"\<PermEqual[perm1, perm2] gives True if both permutations map all \
points to the same images, and False otherwise.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PermLess", "::", "usage"}], "=", 
     "\"\<PermLess[perm1, perm2] gives True if perm1 maps sorted integers to \
smaller points than perm2, and False otherwise.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PermGreater", "::", "usage"}], "=", 
     "\"\<PermGreater[perm1, perm2] gives True if perm1 maps sorted integers \
to larger points than perm2, and False otherwise.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PermLessEqual", "::", "usage"}], "=", 
     "\"\<PermLessEqual[perm1, perm2] gives True if perm1 maps sorted \
integers to smaller or equal points than perm2, and False otherwise.\>\""}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PermGreaterEqual", "::", "usage"}], "=", 
     "\"\<PermGreaterEqual[perm1, perm2] gives True if perm1 maps sorted \
integers to larger of equal points than perm2, and False otherwise.\>\""}], 
    ";"}]}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Structures", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"GenSet", "::", "usage"}], "=", 
     "\"\<GenSet is the head for a generating set.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Group", "::", "usage"}], "=", 
     "\"\<Group is the head for a group of permutations.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Coset", "::", "usage"}], "=", 
     "\"\<Coset is the head for a coset of permutations.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Schreier", "::", "usage"}], "=", 
     "\"\<Schreier is the head for a Schreier vector. The format is \
Schreier[orbits, nu, w], where nu is the actual Schreier vector and w is the \
associated vector of backward pointers.\>\""}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{
     RowBox[{"StrongGenSet", "::", "usage"}], "=", 
     "\"\<StrongGenSet is the head for a strong generating set. The format is \
StrongGenSet[base, GS].\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Dimino", "::", "usage"}], "=", 
     "\"\<Dimino[GenSet[perm1, ...]] gives the group generated by \
permutations permi, using Dimino's algorithm.\>\""}], ";"}]}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Strong", " ", "generating", " ", "sets"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Orbit", "::", "usage"}], "=", 
     "\"\<Orbit[p, GS] gives the orbit of point p under the group generated \
by GS. The orbit is given as a (not necessarily ordered) list having p as \
first point.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Orbits", "::", "usage"}], "=", 
     "\"\<Orbits[GS, len] gives a list with all orbits of the group generated \
by permutations in GS, a partition of Range[len]. Orbits[GS, len, list] makes \
points in list to be the first points of the orbits. Orbits[GS] and \
Orbits[GS, list] compute len from GS using PermLength. GS can be a generating \
set (head GenSet) or a strong generating set (head StrongGenSet).\>\""}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SchreierOrbit", "::", "usage"}], "=", 
     "\"\<SchreierOrbit[p, GS, len] gives the orbit of point p under the \
group generated by GS, and its Schreier vector (of lenght len). \
SchreierOrbit[p, SGS, len] gives the same output, but the the first point of \
the orbit is now the minimum with respect to the base of the SGS. \
SchreierOrbit[p, gs] computes the length of the vectors from gs using \
PermLength. See notes for Schreier.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SchreierOrbits", "::", "usage"}], "=", 
     "\"\<SchreierOrbits[GS, len] gives a compound Schreier vector (length \
len) of the orbits of the group generated by GS. SchreierOrbits[GS, len, \
list] makes points in list to be the first points of the orbits. \
SchreierOrbits[SGS, len] gives the same output, but the orbits now start with \
the points of the base of the SGS. SchreierOrbits[gs] computes len from gs \
using PermLength. See notes for Schreier.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"TraceSchreier", "::", "usage"}], "=", 
     "\"\<TraceSchreier[p, Schreier[orbits, nu, w]] finds a permutation such \
that the image of the first point of the orbit of p is p.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"StabilizerChain", "::", "usage"}], "=", 
     "\"\<StabilizerChain[SGS] gives a list of strong generating sets \
corresponding to the chain of stabilizers of the group generated by SGS. The \
first one is SGS and the last one is the generating set of Group[ID].\>\""}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"OrderOfGroup", "::", "usage"}], "=", 
     "\"\<OrderOfGroup[SGS] gives the order of the group generated by \
SGS.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PermMemberQ", "::", "usage"}], "=", 
     "\"\<PermMemberQ[perm, SGS] gives True if permutation perm belongs to \
the group generated by SGS, and False otherwise.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PermWord", "::", "usage"}], "=", 
     "\"\<PermWord[perm, SGS] decompose the permutation perm as {pk, ..., p0} \
where each of the permutations pi belong to the stabilizer subgroup of the \
first i points of the base of SGS. If pk == ID then perm belongs to the group \
and not otherwise. There is a third argument, used internally for \
iteration.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"FromBaseImage", "::", "usage"}], "=", 
     "\"\<FromBaseImage[list, SGS] gives the permutation in the group \
described by SGS such that the images of the points in the base are the \
points in list (assumed to have the length of the base of the SGS). If no \
permutation in the group gives the list of points then an error message is \
thrown. A third argument can be given with the length of the internal \
Schreier vectors used.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"AllBaseImages", "::", "usage"}], "=", 
     "\"\<AllBaseImages[SGS] gives a complete list of rules baseimages -> \
perm, where baseimages is a list of images of the base of SGS and perm is its \
corresponding permutation, as would be given by FromBaseImage[baseimages, \
SGS]. A second argument can be given with the length of the Schreier vectors \
used.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Search", "::", "usage"}], "=", 
     "\"\<Search[SGS, P, s, SGSK] returns the s-th stabilizer in the \
stabilizer-chain of the subgroup K of permutations obeying the property P in \
the group G (described by the strong generating set SGS). It is assumed \
P[perm] returns True or False on any permutation of the group G. The fourth \
argument is a strong generating set for a subgroup of K, possibly a deeper \
stabilizer in its stabilizer-chain.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"BaseChange", "::", "usage"}], "=", 
     "\"\<BaseChange[SGS, newbase] gives a new strong generating set for the \
group described by SGS, having newbase as the first elements of its base. A \
third argument can be given specifying the length of the internal Schreier \
vectors used.\>\""}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"DeleteRedundantGenerators", "::", "usage"}], "=", 
     "\"\<DeleteRedundantGenerators[SGS] returns an equivalent strong \
generating set removing redundant generators from the generating set.\>\""}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SchreierSims", "::", "usage"}], "=", 
     "\"\<SchreierSims[initbase, GS, deg] generates a strong generating set \
for the group generated by GS (permutations of degree deg), using list \
initbase as the first points for the base. The final SGS is not reduced in \
general.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"UseRules", "::", "usage"}], "=", 
     "\"\<UseRules is an option for SchreierSims giving a set of rules \
replacing the permutations by strings. By default it is {}.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"xPermVerbose", "::", "usage"}], "=", 
     "\"\<xPermVerbose is an option for SchreierSims, \
RightCosetRepresentative, DoubleCosetRepresentative and CanonicalPerm. \
xPermVerbose->True gives lots of information about the intermediate status of \
the process.\>\""}], ";"}]}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Canonicalization", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"RightCosetRepresentative", "::", "usage"}], "=", 
     "\"\<RightCosetRepresentative[perm, n, SGS] for an unsigned permutation \
perm of degree n and a SGS for group S gives a canonical representative of \
the right coset S.perm of perm with respect to subgroup S of the symmetric \
group Sn. The criterium is the minimization of images of points of the base \
of SGS under the elements of the coset, following the order given by the \
base. A fourth argument can be used to give additional priority to some \
points (the free slots in the tensorial context)..\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"DummySet", "::", "usage"}], "=", 
     "\"\<DummySet is the head of expressions DummySet[manifold, {{d1u, d1d}, \
{d2u, d2d}, ...}, metricsym] denoting a set of pairs of (names of) dummies \
{diu, did} on manifold, whose metric has symmetry metricsym (an integer with \
value 1 if the metric is symmetric, -1 if the metric is antisymmetric, or 0 \
if there is no metric).\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"RepeatedSet", "::", "usage"}], "=", 
     "\"\<RepeatedSet[{i1, i2, ...}] represents a list of names of repeated \
indices in the canonical configuration.\>\""}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{
     RowBox[{"JoinSGS", "::", "usage"}], "=", 
     "\"\<JoinSGS[StrongGenSet[base1, GS1], StrongGenSet[base2, GS2]] gives a \
strong generating set having base Join[base1, base2] (with base1 and base2 \
assumed to be disjoint) and generating set Union[GS1, GS2] (with GS1 and GS2 \
assumed to move disjoint sets of points).\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SGSOfDummySet", "::", "usage"}], "=", 
     "\"\<SGSOfDummySet[ DummySet[...] ] gives a Strong Generating Set for \
the group of permutations associated to the given DummySet. There are always \
permutations coming from the exchange of dummies. There are permutations \
coming from the exchange of up/down indices in a pair if there is a metric \
for those indices. The GS is given in Cycles notation. See notes for \
DummySet.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"DoubleCosetRepresentative", "::", "usage"}], "=", 
     "\"\<DoubleCosetRepresentative[perm, n, SGS, dummysets] returns a \
canonical representative of the double coset S.perm.D, where S is generated \
by the strong generating set SGS and D is the group of symmetries of the \
dummysets. The criterium is the sequential sorting of slots of permutation \
perm (from first to last), choosing the least index not yet used consistent \
with the symmetries S and D. The indices are chosen assuming that indices are \
numbered according to their canonical order.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CanonicalPerm", "::", "usage"}], "=", 
     "\"\<CanonicalPerm[perm, n, GS, {f1, f2, ...}, dummysets] gives a \
canonical representative of the double coset S.perm.D, where S is generated \
by GS and D is the group of symmetries of the dummysets of dummies. The \
algorithm RightCosetRepresentative is first applied to canonicalize free \
indices f1, f2, ..., and then algorithm DoubleCosetRepresentative is applied \
on the result of the latter.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"OrderedBase", "::", "usage"}], "=", 
     "\"\<OrderedBase is an option for CanonicalPerm specifying that the base \
must be filled with the missing integers, in normal order.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"BaseChangeCheck", "::", "usage"}], "=", 
     "\"\<BaseChangeCheck is a Boolean option for RightCosetRepresentative \
that forces checking the need of a change of base to stabilize the group of \
symmetry slots. The default is False.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"TimeVerbose", "::", "usage"}], "=", 
     "\"\<TimeVerbose is an option for CanonicalPerm. TimeVerbose->True \
outputs the time spent in the computation of the SGS, in the computation of \
the free-indices representative and in the computation of the dummy-indices \
representative.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"MathLink", "::", "usage"}], "=", 
     "\"\<MathLink is a Boolean option for CanonicalPerm, SchreierSims and \
Orbit, indicating whether the external C executable xperm must be used to \
speed up computations. Its default value is given by the global variable \
$xpermQ for CanonicalPerm, and it is False for the other two \
functions.\>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"MathLink", " ", "connection"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"$xpermQ", "::", "usage"}], "=", 
     "\"\<$xpermQ is a Boolean global variable containing whether the \
connection to the external C executable xperm has been possible or \
not.\>\""}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"$xpermExecutable", "::", "usage"}], "=", 
     "\"\<$xpermExecutable is a global variable containing the name of the \
xperm executable to which we have connected. If the connection was not \
possible then it is not assigned.\>\""}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"$xpermLink", "::", "usage"}], "=", 
     "\"\<$xpermLink is a global variable containing the link identification \
of the connection to the external excutable xperm. If the connection was not \
possible then it is not assigned.\>\""}], ";"}], "\n", "\[IndentingNewLine]", 
   
   RowBox[{"(*", " ", 
    RowBox[{"Predefined", " ", "strong", " ", "generating", " ", "sets"}], 
    " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"System`$VersionNumber", "<", "8.5"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Symmetric", "::", "usage"}], "=", 
        "\"\<Symmetric[{p1, p2, ...}] represents the symmetry of a tensor \
that is symmetric in the slots pi. Symmetric[{p1, p2, ...}, notation] returns \
a strong generating set for the symmetric group on the set of points pi, \
using the indicated notation for signed permutations.\>\""}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Antisymmetric", "::", "usage"}], "=", 
        "\"\<Antisymmetric[{p1, p2, ...}] represents the symmetry of a tensor \
that is antisymmetric in the slots pi. Antisymmetric[{p1, p2, ...}, notation] \
returns a strong generating set for the antisymmetric group on the set of \
points pi, using the indicated notation for signed permutations.\>\""}], 
       ";"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Symmetric", "::", "usage"}], "=", 
        RowBox[{
         RowBox[{"Symmetric", "::", "usage"}], "<>", 
         "\"\<\\n\\nxAct extension:\\nSymmetric[{p1, p2, ...}, notation] \
returns a strong generating set for the symmetric group on the set of points \
pi, using the indicated notation for signed permutations.\>\""}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Antisymmetric", "::", "usage"}], "=", 
        RowBox[{
         RowBox[{"Antisymmetric", "::", "usage"}], "<>", 
         "\"\<\\n\\nxAct extension:\\nAntisymmetric[{p1, p2, ...}, notation] \
returns a strong generating set for the antisymmetric group on the set of \
points pi, using the indicated notation for signed permutations.\>\""}]}], 
       ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PairSymmetric", "::", "usage"}], "=", 
     "\"\<PairSymmetric[{{p1a, p1b}, {p2a, p2b}, ...}, sym1, sym2, notation] \
returns a Strong Generating Set for the symmetric (if sym1=1) or \
antisymmetric (if sym1=-1) group of permutations of the pairs {pia, pib}. The \
switch sym is an integer: 1 adds permutations Cycles[{pia, pib}]; -1 adds \
permutations -Cycles[{pia, pib}]; other values do nothing. The result is \
given in the using the indicated notation (Cycles by default).\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"RiemannSymmetric", "::", "usage"}], "=", 
     "\"\<RiemannSymmetric[{p1, p2, p3, p4}, notation] gives a strong \
generating set implementing the symmetries of the Riemann tensor \
R_{p1,p2,p3,p4}, using the indicated notation for signed permutations (Cycles \
by default).\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"RiemannSymmetry", "::", "usage"}], "=", 
     "\"\<RiemannSymmetry = RiemannSymmetric. Kept for backward \
compatibility.\>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", "Transversals", " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"RightTransversal", "::", "usage"}], "=", 
     "\"\<RightTransversal[SGS, deg] returns a sorted list of permutations \
containing the canonical representative of each right coset of SGS in the \
symmetric group of degree deg. The choice of representative is based in the \
order induced on the permutations by the base of the SGS. \
RightTransversal[GS, deg] returns the same thing by first using SchreierSims.\
\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"LeftTransversal", "::", "usage"}], "=", 
     "\"\<LeftTransversal[SGS, deg] returns a sorted list of permutations \
containing the canonical representative of each left coset of SGS in the \
symmetric group of degree deg. The choice of representative is based in the \
order induced on the **inverse** of the permutations by the base of the SGS. \
Efectively the transversal is simply the inverse of the corresponding right \
transversal. LeftTransversal[GS, deg] returns the same thing by first using \
SchreierSims.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"DoubleTransversal", "::", "usage"}], "=", 
     "\"\<DoubleTransversal[SGS, dummysets] returns a sorted list of \
permutations containing the canonical representative of each double coset of \
SGS and the D-group of the dummysets in the symmetric group of degree \
deg.\>\""}], ";"}]}]}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["1.3. Begin Private", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"xAct`xPerm`Private`\"\>"], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"$xPermNames", "=", 
   RowBox[{"Names", "[", "\"\<xAct`xPerm`*\>\"", "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "$xPermNames", "]"}]], "Input"],

Cell[BoxData["76"], "Output"]
}, Open  ]],

Cell["There are 76 public reserved words:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "xAct`xPerm`*"}]], "Input"],

Cell[BoxData[
 DynamicModuleBox[{Typeset`open$$ = True}, 
  PaneSelectorBox[{False->
   RowBox[{
    OpenerBox[Dynamic[Typeset`open$$],
     ImageSize->Small], 
    StyleBox["xAct`xPerm`", "InfoHeading"]}], True->GridBox[{
     {
      RowBox[{
       OpenerBox[Dynamic[Typeset`open$$],
        ImageSize->Small], 
       StyleBox["xAct`xPerm`", "InfoHeading"]}]},
     {GridBox[{
        {
         ButtonBox["AllBaseImages",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"AllBaseImages", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["LeftTransversal",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"LeftTransversal", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermMemberQ",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"PermMemberQ", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["SchreierOrbits",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"SchreierOrbits", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["BaseChange",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"BaseChange", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["MathLink",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"MathLink", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermOrderedQ",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"PermOrderedQ", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["SchreierSims",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"SchreierSims", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["BaseChangeCheck",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"BaseChangeCheck", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["MinB",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"MinB", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermPower",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"PermPower", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["Search",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"Search", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["CanonicalPerm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"CanonicalPerm", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["NonStablePoints",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"NonStablePoints", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermProduct",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"PermProduct", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["SetStabilizer",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"SetStabilizer", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["Coset",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"Coset", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["NotationOfPerm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"NotationOfPerm", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermQ",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"PermQ", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["SGSOfDummySet",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"SGSOfDummySet", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["Cycles",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"Cycles", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["OnPoints",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"OnPoints", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermSignature",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"PermSignature", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["SortB",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"SortB", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["DeleteRedundantGenerators",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {
            "DeleteRedundantGenerators", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["Orbit",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"Orbit", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermSort",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"PermSort", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["Stabilizer",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"Stabilizer", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["Dimino",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"Dimino", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["Orbits",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"Orbits", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermutationFromTo",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"PermutationFromTo", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["StabilizerChain",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"StabilizerChain", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["Disclaimer",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"Disclaimer", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["OrderedBase",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"OrderedBase", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermuteList",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"PermuteList", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["StablePoints",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"StablePoints", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["DoubleCosetRepresentative",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {
            "DoubleCosetRepresentative", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["OrderOfGroup",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"OrderOfGroup", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermWord",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"PermWord", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["StrongGenSet",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"StrongGenSet", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["DoubleTransversal",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"DoubleTransversal", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PairSymmetric",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"PairSymmetric", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["RandomPerm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"RandomPerm", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["TimeVerbose",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"TimeVerbose", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["DummySet",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"DummySet", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["Perm",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"Perm", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["RepeatedSet",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"RepeatedSet", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["TraceSchreier",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"TraceSchreier", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["FromBaseImage",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"FromBaseImage", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermDeg",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"PermDeg", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["RiemannSymmetric",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"RiemannSymmetric", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["TranslatePerm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"TranslatePerm", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["GenSet",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"GenSet", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermEqual",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"PermEqual", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["RiemannSymmetry",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"RiemannSymmetry", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["UseRules",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"UseRules", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["Group",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"Group", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermGreater",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"PermGreater", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["RightCosetRepresentative",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {
            "RightCosetRepresentative", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["xPermVerbose",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"xPermVerbose", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["ID",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"ID", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermGreaterEqual",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"PermGreaterEqual", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["RightTransversal",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"RightTransversal", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["$Version",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"$Version", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["Images",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"Images", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermLength",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"PermLength", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["Rules",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"Rules", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["$xpermExecutable",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"$xpermExecutable", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["InversePerm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"InversePerm", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermLess",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"PermLess", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["Schreier",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"Schreier", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["$xpermLink",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"$xpermLink", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["JoinSGS",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"JoinSGS", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermLessEqual",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"PermLessEqual", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["SchreierOrbit",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567977951-5455693", {"SchreierOrbit", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["$xpermQ",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567977951-5455693", {"$xpermQ", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]}
       },
       DefaultBaseStyle->"InfoGrid",
       GridBoxItemSize->{"Columns" -> {{
            Scaled[0.2375]}}}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}]}, 
   Dynamic[Typeset`open$$],
   ImageSize->Automatic]]], "Print", "InfoCell"]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["2. Permutation Defs. Notation dependent",
 FontColor->RGBColor[0, 0, 1]]], "Section",
 FontSize->24],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"**", "**", "**", "**", "**", "**"}], "*", " ", "2.", " ", 
   RowBox[{"Permutations", ".", " ", "Notation"}], " ", "dependent"}], " ", 
  "**************)"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"TimeUsed", "[", "]"}], ",", 
   RowBox[{"SessionTime", "[", "]"}], ",", 
   RowBox[{
    RowBox[{"TimeUsed", "[", "]"}], "/", 
    RowBox[{"SessionTime", "[", "]"}]}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2.44151`", ",", "5.902525`7.222582828694269", ",", 
   "0.41364173111621244`"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "2.0. Comments. Relation with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s GroupTheory code"
}], "Subsection"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{"$ReadingVerbose", ",", 
   RowBox[{
   "Print", "[", 
    "\"\<Reading section 2: Permutations. Notation dependent\>\"", "]"}], ",",
    "Null", ",", "Null"}], "]"}]], "Input",
 InitializationCell->True],

Cell["\<\
This section defines all those actions on permutations whose structure is \
different on different notations for the permutations.\
\>", "Text"],

Cell[CellGroupData[{

Cell[TextData[{
 "2.0.1. Fake code in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 8 for pre8 versions"
}], "Subsubsection"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"System`$VersionNumber", "<", "8."}], ",", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PermutationListQ", "[", "list_", "]"}], ":=", 
     RowBox[{"SameQ", "[", 
      RowBox[{
       RowBox[{"Sort", "[", "list", "]"}], ",", 
       RowBox[{"Range", "[", 
        RowBox[{"Length", "[", "list", "]"}], "]"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"PermutationCyclesQ", "[", 
      RowBox[{"System`Cycles", "[", 
       RowBox[{"{", "cycs___", "}"}], "]"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"Union", "[", "cycs", "]"}], "===", 
      RowBox[{"Sort", "[", 
       RowBox[{"Join", "[", "cycs", "]"}], "]"}]}]}], ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"lastFalse", "[", 
      RowBox[{"{", 
       RowBox[{"___", ",", 
        RowBox[{"{", "pos_", "}"}]}], "}"}], "]"}], ":=", "pos"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"lastFalse", "[", 
      RowBox[{"{", "}"}], "]"}], ":=", "0"}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"PermutationMax", "[", "list_List", "]"}], ":=", 
     RowBox[{"lastFalse", "[", 
      RowBox[{"Position", "[", 
       RowBox[{
        RowBox[{"Inner", "[", 
         RowBox[{"SameQ", ",", "list", ",", 
          RowBox[{"Sort", "[", "list", "]"}], ",", "List"}], "]"}], ",", 
        "False"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"InversePermutation", "[", "list_List", "]"}], ":=", 
     RowBox[{"Ordering", "[", "list", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"InversePermutation", "[", 
      RowBox[{"System`Cycles", "[", "cyclist_List", "]"}], "]"}], ":=", 
     RowBox[{"System`Cycles", "[", 
      RowBox[{"Reverse", "/@", "cyclist"}], "]"}]}], ";"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
2.0.2. Reuse code from System`. Beware of the opposite conventions in Mma8 \
and Mma9\
\>", "Subsubsection"],

Cell["\<\
Definitions are given so that they follow the conventions in Mathematica 9.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"IfMathematica789", ",", "HoldAll"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"IfMathematica789", "[", 
    RowBox[{"expr7_", ",", "expr8_", ",", "expr9_"}], "]"}], ":=", 
   RowBox[{"Which", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"System`$VersionNumber", "<", "7.5"}], ",", "expr7", ",", 
     "\[IndentingNewLine]", 
     RowBox[{"System`$VersionNumber", "<", "8.5"}], ",", "expr8", ",", 
     "\[IndentingNewLine]", "True", ",", "expr9"}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{"IfMathematica789", "[", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Mathematica", " ", "7"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"addsingletons", "[", 
      RowBox[{"cycs_", ",", "length_"}], "]"}], ":=", 
     RowBox[{"Join", "[", 
      RowBox[{"cycs", ",", 
       RowBox[{"Partition", "[", 
        RowBox[{
         RowBox[{"Complement", "[", 
          RowBox[{
           RowBox[{"Range", "@", "length"}], ",", 
           RowBox[{"Flatten", "@", "cycs"}]}], "]"}], ",", "1"}], "]"}]}], 
      "]"}]}], ";", 
    RowBox[{
     RowBox[{"PermutationFromCycles", "[", "cycs_List", "]"}], ":=", 
     RowBox[{"Last", "/@", 
      RowBox[{"Sort", "@", 
       RowBox[{"Transpose", "[", 
        RowBox[{"Flatten", "/@", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"RotateRight", "/@", "cycs"}], ",", "cycs"}], "}"}]}], 
        "]"}]}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"PermList", "[", 
      RowBox[{
       RowBox[{"System`Cycles", "[", "cycslist_List", "]"}], ",", "length_"}],
       "]"}], ":=", 
     RowBox[{"PermutationFromCycles", "[", 
      RowBox[{"addsingletons", "[", 
       RowBox[{"cycslist", ",", "length"}], "]"}], "]"}]}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Mathematica", " ", "8"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"PermList", "[", 
     RowBox[{
      RowBox[{"System`Cycles", "[", "cycslist_List", "]"}], ",", " ", 
      "length_"}], "]"}], ":=", 
    RowBox[{"PermutationList", "[", 
     RowBox[{
      RowBox[{"System`Cycles", "[", 
       RowBox[{"Reverse", "/@", "cycslist"}], "]"}], ",", "length"}], "]"}]}],
    ",", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Mathematica", " ", "9"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"PermList", "[", 
     RowBox[{"perm_System`Cycles", ",", "length_"}], "]"}], ":=", 
    RowBox[{"PermutationList", "[", 
     RowBox[{"perm", ",", "length"}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{"IfMathematica789", "[", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Mathematica", " ", "7"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"PermList", "[", 
     RowBox[{"list_List", ",", "length_"}], "]"}], ":=", 
    RowBox[{"Take", "[", 
     RowBox[{
      RowBox[{"list", "~", "Join", "~", 
       RowBox[{"Range", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "list", "]"}], "+", "1"}], ",", "length"}], 
        "]"}]}], ",", "length"}], "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Mathematica", " ", "8"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"PermList", "[", 
     RowBox[{"list_List", ",", " ", "length_"}], "]"}], ":=", 
    RowBox[{"PermutationList", "[", 
     RowBox[{"list", ",", "length"}], "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Mathematica", " ", "9"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"PermList", "[", 
     RowBox[{"list_List", ",", "length_"}], "]"}], ":=", 
    RowBox[{"PermutationList", "[", 
     RowBox[{"list", ",", "length"}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{"IfMathematica789", "[", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Mathematica", " ", "7"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"ToCycles", "[", "list_List", "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"Take", "[", 
        RowBox[{"#", ",", 
         RowBox[{
          RowBox[{"Position", "[", 
           RowBox[{
            RowBox[{"Rest", "@", "#"}], ",", 
            RowBox[{"First", "@", "#"}]}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "]"}], "&"}], "/@", 
      RowBox[{"Fold", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"Flatten", "@", "#1"}], ",", "#2"}], "]"}], ",", "#1", 
           ",", 
           RowBox[{"Append", "[", 
            RowBox[{"#1", ",", 
             RowBox[{"NestList", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"list", "[", 
                 RowBox[{"[", "#1", "]"}], "]"}], "&"}], ",", "#2", ",", 
               RowBox[{"Length", "@", "list"}]}], "]"}]}], "]"}]}], "]"}], 
         "&"}], ",", 
        RowBox[{"{", "}"}], ",", "list"}], "]"}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"PermCycles", "[", "list_List", "]"}], ":=", 
     RowBox[{"System`Cycles", "[", 
      RowBox[{"Reverse", "/@", 
       RowBox[{"ToCycles", "[", 
        RowBox[{"Ordering", "@", "list"}], "]"}]}], "]"}]}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Mathematica", " ", "8"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"PermCycles", "[", "list_List", "]"}], ":=", 
    RowBox[{"Map", "[", 
     RowBox[{"Reverse", ",", 
      RowBox[{"PermutationCycles", "[", "list", "]"}], ",", 
      RowBox[{"{", "2", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Mathematica", " ", "9"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"PermCycles", "[", "list_List", "]"}], ":=", 
    RowBox[{"PermutationCycles", "[", "list", "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 InitializationCell->True],

Cell["\<\
Note that this is only defined for System`Cycles, for which conventions agree \
in Mma8 and Mma9:\
\>", "Text"],

Cell[BoxData[
 RowBox[{"IfMathematica789", "[", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Mathematica", " ", "7"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"PermutationProduct", "[", 
     RowBox[{
      RowBox[{"System`Cycles", "[", "cycslist1_", "]"}], ",", 
      RowBox[{"System`Cycles", "[", "cycslist2_", "]"}]}], "]"}], ":=", 
    RowBox[{"System`Cycles", "[", 
     RowBox[{"List", "@@", 
      RowBox[{"TranslatePerm", "[", 
       RowBox[{
        RowBox[{"PermProduct", "[", 
         RowBox[{
          RowBox[{"TranslatePerm", "[", 
           RowBox[{
            RowBox[{"Cycles", "@@", "cycslist1"}], ",", "Rules"}], "]"}], ",", 
          RowBox[{"TranslatePerm", "[", 
           RowBox[{
            RowBox[{"Cycles", "@@", "cycslist2"}], ",", "Rules"}], "]"}]}], 
         "]"}], ",", "Cycles"}], "]"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Mathematica", " ", "8"}], " ", "*)"}], "\[IndentingNewLine]", 
   "Null", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Mathematica", " ", "9"}], " ", "*)"}], "\[IndentingNewLine]", 
   "Null"}], "\[IndentingNewLine]", "]"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["2.0.3. Tests", "Subsubsection"],

Cell["This could be moved to xCore`.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"test", ",", "testcounter", ",", "testresult"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"test", ",", "HoldAll"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testcounter", "[", "symbol_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"testcounter", "[", "symbol", "]"}], "=", "0"}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"test", "[", 
    RowBox[{"symbol_", ",", "expr_", ",", "result_", ",", 
     RowBox[{"messageQ_:", "False"}]}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"symbol", ",", 
     RowBox[{"1", "+", 
      RowBox[{
       RowBox[{"testcounter", "[", "symbol", "]"}], "++"}]}], ",", 
     RowBox[{
      RowBox[{"testresult", "[", 
       RowBox[{"symbol", ",", 
        RowBox[{"testcounter", "[", "symbol", "]"}]}], "]"}], "=", 
      RowBox[{"Check", "[", 
       RowBox[{
        RowBox[{"SameQ", "[", 
         RowBox[{"expr", ",", "result"}], "]"}], ",", "messageQ"}], "]"}]}]}],
     "}"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"alltests", "[", "]"}], ":=", 
   RowBox[{"Last", "/@", 
    RowBox[{"DownValues", "[", "testresult", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"alltests", "[", "symbol_", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Cases", "[", 
   RowBox[{
    RowBox[{"DownValues", "[", "testresult", "]"}], ",", 
    RowBox[{
     RowBox[{"_", "[", 
      RowBox[{
       RowBox[{"_", "[", 
        RowBox[{"testresult", "[", 
         RowBox[{"symbol", ",", "_"}], "]"}], "]"}], ",", "result_"}], "]"}], 
     "\[RuleDelayed]", "result"}]}], "]"}]}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "2.0.4. Notation conversion to/from ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s GroupTheory code"
}], "Subsubsection"],

Cell[TextData[{
 "From ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to ",
 StyleBox["xPerm",
  FontSlant->"Italic"],
 " notation. Note that SchreierSims can give a nonordered basis here. We need \
to find a way to avoid this call of SchreierSims."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MathToxPermSym", "[", 
    RowBox[{"sym", ":", 
     RowBox[{"(", 
      RowBox[{"_Symmetric", "|", "_Antisymmetric"}], ")"}]}], "]"}], ":=", 
   RowBox[{"SchreierSims", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "sym"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MathToxPermSym", "[", 
    RowBox[{"gs", ":", 
     RowBox[{"{", "___List", "}"}]}], "]"}], ":=", 
   RowBox[{"SchreierSims", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"GenSet", "@@", 
      RowBox[{"(", 
       RowBox[{"MathToxPermGen", "/@", "gs"}], ")"}]}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MathToxPermGen", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"System`Cycles", "[", 
       RowBox[{"{", "cycs___", "}"}], "]"}], ",", "sign_"}], "}"}], "]"}], ":=", 
   RowBox[{"sign", " ", 
    RowBox[{"Cycles", "[", "cycs", "]"}]}]}], ";"}]], "Input",
 InitializationCell->True],

Cell[TextData[{
 "From ",
 StyleBox["xPerm",
  FontSlant->"Italic"],
 " to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notation:"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"xPermToMathSym", "[", 
    RowBox[{"sym", ":", 
     RowBox[{"(", 
      RowBox[{"_Symmetric", "|", "_Antisymmetric"}], ")"}]}], "]"}], ":=", 
   "sym"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"xPermToMathSym", "[", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{"base_List", ",", "GS_GenSet"}], "]"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"xPermToMathGen", "/@", 
      RowBox[{"List", "@@", "GS"}]}], ",", "base"}], "}"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"xPermToMathGen", "[", 
    RowBox[{"sign_.", " ", 
     RowBox[{"Cycles", "[", "cycs___", "]"}]}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"System`Cycles", "[", 
      RowBox[{"{", "cycs", "}"}], "]"}], ",", "sign"}], "}"}]}], 
  ";"}]], "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["2.1. Notations for permutations. PermQ", "Subsection"],

Cell[CellGroupData[{

Cell["2.1.1. Definitions", "Subsubsection"],

Cell["\<\
This is the function in charge of certifying that something is a permutation:\
\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "PermQ"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"PermQ[ Perm[{n1, ..., nk}] ] yields True if the list {n1, ..., \
nk} of length k is a rearrangement of the numbers {1, ..., k}. PermQ[ \
Cycles[cyc1, cyc2, ...] ] gives True if there are no repeated points among \
cycles cyci. PermQ[ Rules[i1->i2, ...] ] gives True if the rules map a set of \
integers to itself. PermQ[ Images[{n1, ..., nk}] ] yields True if the list \
{n1, ..., nk} of length k is a rearrangement of the numbers {1, ..., k}. \
PermQ[ID] gives True. PermQ gives True on a linear combination of valid \
permutations. PermQ returns False otherwise.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977952-5455693"]
}, Open  ]],

Cell["Identity:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "ID"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"ID represents the identity in all notations. ID[perm] gives \
the identity permutation in the notation used by perm.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977953-5455693"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PermQ", "[", "ID", "]"}], ":=", "True"}], ";"}]], "Input",
 InitializationCell->True],

Cell["\<\
Perm notation: A permutation is any of the n! rearrangements of the list of \
numbers {1,2,...,n}\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Perm"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"Perm is the head for permutation lists of the form Perm[{n1, \
..., nk}]. Example: Perm[{6, 3, 2, 1, 5, 4}] means that the object in the \
first place goes to the fourth place and so on. Perm[{}] represents the \
identity.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977954-5455693"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PermQ", "[", 
    RowBox[{"Perm", "[", 
     RowBox[{"list", ":", 
      RowBox[{"{", "___Integer", "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{"PermutationListQ", "[", "list", "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["\<\
Images notation: A permutation is any of the n! rearrangements of the list of \
numbers {1,2,...,n}\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Images"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"Images is the head for permutations expressed as a list of \
images. Example: Images[{4, 3, 2, 6, 5, 1}]. Images[{}] represents the \
identity.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977954-5455693"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PermQ", "[", 
    RowBox[{"Images", "[", 
     RowBox[{"list", ":", 
      RowBox[{"{", "___Integer", "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{"PermutationListQ", "[", "list", "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["\<\
Cycles notation: A permutation is any set of disjoint cycles (lists of \
different points)\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Cycles"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"Cycles is the head for permutations expressed in disjoint \
cyclic notation. Singletons are not included. Example: Cycles[{1, 4, 6}, {2, \
3}] represents the exchange of points 2 and 3, and the cycle 1->4->6->1. \
Cycles[] represents the identity.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977955-5455693"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PermQ", "[", 
    RowBox[{"Cycles", "[", 
     RowBox[{"cycs", ":", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"___Integer", "?", "Positive"}], "}"}], "..."}]}], "]"}], 
    "]"}], ":=", 
   RowBox[{"PermutationCyclesQ", "[", 
    RowBox[{"System`Cycles", "[", 
     RowBox[{"{", "cycs", "}"}], "]"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["\<\
Rules notation: A permutation is any collection of rules mapping a set of \
integers to itself\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Rules"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"Rules is the head for permutations expressed in rule notation. \
Singletons are not included. Example: Rules[1->4, 4->6, 6->1, 2->3, 3->2]. \
Rules[] represents the identity.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977955-5455693"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PermQ", "[", 
    RowBox[{"Rules", "[", 
     RowBox[{"rules", ":", 
      RowBox[{
       RowBox[{"Rule", "[", 
        RowBox[{
         RowBox[{"_Integer", "?", "Positive"}], ",", 
         RowBox[{"_Integer", "?", "Positive"}]}], "]"}], ".."}]}], "]"}], 
    "]"}], ":=", 
   RowBox[{"Apply", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Union", "[", "#1", "]"}], "===", 
       RowBox[{"Sort", "[", 
        RowBox[{"Join", "[", "#2", "]"}], "]"}]}], "&"}], ",", 
     RowBox[{"Transpose", "[", 
      RowBox[{
       RowBox[{"{", "rules", "}"}], "/.", 
       RowBox[{"Rule", "\[Rule]", "List"}]}], "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";", 
  RowBox[{
   RowBox[{"PermQ", "[", 
    RowBox[{"Rules", "[", "]"}], "]"}], ":=", "True"}], ";"}]], "Input",
 InitializationCell->True],

Cell["\<\
Action on a linear combination. This is not an evident definition; here we \
have in mind a future generalization to the algebra of permutations:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermQ", "[", "expr_Plus", "]"}], ":=", 
   RowBox[{"Apply", "[", 
    RowBox[{"And", ",", 
     RowBox[{"PermQ", "/@", 
      RowBox[{"List", "@@", "expr"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermQ", "[", 
    RowBox[{
     RowBox[{"x_", "?", "NumericQ"}], " ", "perm_"}], "]"}], ":=", 
   RowBox[{"PermQ", "[", "perm", "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Any other case:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PermQ", "[", "_", "]"}], ":=", "False"}], ";"}]], "Input",
 InitializationCell->True],

Cell["Protect:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"PermQ", ",", "1"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "PermQ", "]"}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["2.1.2. Examples", "Subsubsection"],

Cell["\<\
In the following we do not check that arguments of functions are actually \
permutations, because that would slow down the computations. The function \
PermQ is given to test permutations in case of doubt.\
\>", "Text"],

Cell["Examples:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}]}], "+", 
     RowBox[{"2", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4", ",", "5", ",", "2", ",", "1"}], "}"}], 
       "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", "True"}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}]}], 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "5", ",", "2", ",", "1"}], "}"}], "]"}]}], 
    "]"}], ",", "\[IndentingNewLine]", "False"}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["Perm[{}] represents the identity permutation.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", "}"}], "]"}], "]"}], ",", "\[IndentingNewLine]", "True"}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{"Perm", "[", "]"}], "]"}], ",", "\[IndentingNewLine]", "False"}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "1"}], "}"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "5", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "1"}], "}"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "False"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "6", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["Images[{}] represents the identity permutation.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{"Images", "[", 
     RowBox[{"{", "}"}], "]"}], "]"}], ",", "\[IndentingNewLine]", "True"}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "7", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{"Images", "[", "]"}], "]"}], ",", "\[IndentingNewLine]", 
   "False"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "8", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "1"}], "}"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "9", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "1"}], "}"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "False"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "10", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["Cycles:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{"Cycles", "[", "]"}], "]"}], ",", "\[IndentingNewLine]", "True"}],
   "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "11", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{"Cycles", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "5"}], "}"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "12", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{"Cycles", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "5", ",", "0"}], "}"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "False"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "13", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{"Cycles", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3."}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "5"}], "}"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "False"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "14", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{"Cycles", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "5"}], "}"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "False", ",", "\[IndentingNewLine]", "True"}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"System`Cycles", "::", "reppoint"}], "MessageName"], ":", 
  " ", "\<\"\[NoBreak]\\!\\(System`Cycles[\\(\\({\\(\\({1, 3}\\)\\), \
\\(\\({1, 5}\\)\\)}\\)\\)]\\)\[NoBreak] contains repeated integers. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/Cycles\\\", ButtonNote -> \
\\\"Cycles::reppoint\\\"]\\)\"\>"}]], "Message", "MSG"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "15", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{"Cycles", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "5"}], "}"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "False", ",", "\[IndentingNewLine]", "True"}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"System`Cycles", "::", "reppoint"}], "MessageName"], ":", 
  " ", "\<\"\[NoBreak]\\!\\(System`Cycles[\\(\\({\\(\\({1, 3, 1}\\)\\), \
\\(\\({2, 5}\\)\\)}\\)\\)]\\)\[NoBreak] contains repeated integers. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/Cycles\\\", ButtonNote -> \
\\\"Cycles::reppoint\\\"]\\)\"\>"}]], "Message", "MSG"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "16", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["Rules:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{"Rules", "[", "]"}], "]"}], ",", "\[IndentingNewLine]", "True"}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "17", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{"Rules", "[", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "5"}], ",", 
      RowBox[{"5", "\[Rule]", "1"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "18", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermQ", "[", 
    RowBox[{"Rules", "[", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "2"}], ",", 
      RowBox[{"1", "\[Rule]", "3"}], ",", 
      RowBox[{"2", "\[Rule]", "3"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "False"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermQ", ",", "19", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"alltests", "[", "PermQ", "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["2.1.3. Remove singletons in Cycles and Rules notations", \
"Subsubsection"],

Cell["\<\
We automatically remove singletons and empty cycles from the cyclic structure \
(I've tried to replace these definitions with a function DeleteSingletons to \
be used at the right places, but it is less efficient!)\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Cycles", "[", 
    RowBox[{"cycs1___", ",", 
     RowBox[{"{", "}"}], ",", "cycs2___"}], "]"}], ":=", 
   RowBox[{"Cycles", "[", 
    RowBox[{"cycs1", ",", "cycs2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Cycles", "[", 
    RowBox[{"cycs1___", ",", 
     RowBox[{"{", "_", "}"}], ",", "cycs2___"}], "]"}], ":=", 
   RowBox[{"Cycles", "[", 
    RowBox[{"cycs1", ",", "cycs2"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell["And the same for rules:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Rules", "[", 
    RowBox[{"rules1___", ",", 
     RowBox[{"HoldPattern", "[", 
      RowBox[{"x_", "\[Rule]", "x_"}], "]"}], ",", "rules2___"}], "]"}], ":=", 
   RowBox[{"Rules", "[", 
    RowBox[{"rules1", ",", "rules2"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["Examples:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cycles", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Cycles", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "3"}], "}"}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Rules", "[", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "2"}], ",", 
   RowBox[{"2", "\[Rule]", "2"}], ",", 
   RowBox[{"2", "\[Rule]", "3"}], ",", 
   RowBox[{"3", "\[Rule]", "4"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Rules", "[", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "2"}], ",", 
   RowBox[{"2", "\[Rule]", "3"}], ",", 
   RowBox[{"3", "\[Rule]", "4"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["Note that rules are not sorted:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Rules", "[", 
  RowBox[{
   RowBox[{"2", "\[Rule]", "3"}], ",", 
   RowBox[{"1", "\[Rule]", "2"}], ",", 
   RowBox[{"3", "\[Rule]", "4"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Rules", "[", 
  RowBox[{
   RowBox[{"2", "\[Rule]", "3"}], ",", 
   RowBox[{"1", "\[Rule]", "2"}], ",", 
   RowBox[{"3", "\[Rule]", "4"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["Protect heads:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"Perm", ",", "1"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"Images", ",", "1"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", 
   RowBox[{"Perm", ",", "Cycles", ",", "Rules", ",", "Images"}], "]"}], 
  ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
It is important to note that a given permutation has a unique representation \
in Perm or Images notation (for a given list-length), but not in Cycles or \
Rules notation because the cycles and rules can be reordered in different \
ways. It would be simple to solve the problem in Rules notation by \
introducing the Orderless attribute, but then the computations would slow \
down. Even worse, it is not so simple for Cycles and actually we do not do it \
for neither of them. See section 3.1 for tests of equality of permutations.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["2.1.4. More on Cycles notation. TOCOMPLETE", "Subsubsection"],

Cell["\<\
Note that the opposite convention for multiplication would have made this \
nicer :\
\>", "Text",
 CellChangeTimes->{{3.458836210323723*^9, 3.458836243794829*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermProduct", "[", 
  RowBox[{
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"PermProduct", "[", 
  RowBox[{
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell["We have checked that this is the result in GAP as well :", "Text",
 CellChangeTimes->{{3.458836440040317*^9, 3.458836457821416*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermProduct", "[", 
  RowBox[{
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"PermProduct", "[", 
  RowBox[{
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell["Ensure that cycles are properly sorted:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SortCycles", "[", "perm_Cycles", "]"}], ":=", 
   RowBox[{"Sort", "[", 
    RowBox[{"SortCycle", "/@", "perm"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SortCycle", "[", "cyc_List", "]"}], ":=", 
   RowBox[{"Nest", "[", 
    RowBox[{"RotateLeft", ",", "cyc", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{"cyc", ",", 
         RowBox[{"Min", "[", "cyc", "]"}]}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "1"}], "]"}], "]"}], "-", "1"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SortCycles", "[", "expr_", "]"}], ":=", 
   RowBox[{"expr", "/.", 
    RowBox[{"perm_Cycles", "\[RuleDelayed]", 
     RowBox[{"SortCycles", "[", "perm", "]"}]}]}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.459278436019951*^9, 3.4592784814340677`*^9}, {
   3.4592785337331743`*^9, 3.459278630975389*^9}, {3.459278664498281*^9, 
   3.4592787468102016`*^9}, {3.459278782603794*^9, 3.4592788105303793`*^9}, 
   3.4592788680243597`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", "3"}], 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "3", ",", "2", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "1", ",", "7", ",", "8"}], "}"}]}], "]"}]}], "//", 
  "SortCycles"}]], "Input",
 CellChangeTimes->{{3.45927869550174*^9, 3.459278706913328*^9}, {
  3.459278823571581*^9, 3.459278840551702*^9}, {3.459278875816319*^9, 
  3.459278880519724*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "3"}], " ", 
  RowBox[{"Cycles", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "7", ",", "8", ",", "6"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "5", ",", "4", ",", "3"}], "}"}]}], 
   "]"}]}]], "Output"]
}, Open  ]],

Cell["\<\
Standard formatting for cyclic permutation. Note the exception of the \
identity.\
\>", "Text",
 CellChangeTimes->{{3.459352595261002*^9, 3.4593526131019983`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Unprotect", "[", "Cycles", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", "]"}], ",", "StandardForm"}], "]"}], ":=", 
   RowBox[{"xAct`xTensor`Private`interpretbox", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", "]"}], ",", "\"\<id\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"formatcycle", "[", "cyc_List", "]"}], ":=", 
   RowBox[{"RowBox", "@", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"{", "\"\<(\>\"", "}"}], ",", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"MakeBoxes", "/@", "cyc"}], ",", "\"\<,\>\""}], "]"}], ",", 
      RowBox[{"{", "\"\<)\>\"", "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Cycles", "[", "cycs__List", "]"}]}], ",", "StandardForm"}], 
    "]"}], ":=", 
   RowBox[{"xAct`xTensor`Private`interpretbox", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Cycles", "[", "cycs", "]"}]}], ",", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Prepend", "[", 
       RowBox[{
        RowBox[{"formatcycle", "/@", 
         RowBox[{"{", "cycs", "}"}]}], ",", "\"\<-\>\""}], "]"}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"coeff_", "?", "NumberQ"}], " ", 
      RowBox[{"Cycles", "[", "cycs__List", "]"}]}], ",", "StandardForm"}], 
    "]"}], ":=", 
   RowBox[{"xAct`xTensor`Private`interpretbox", "[", 
    RowBox[{
     RowBox[{"coeff", " ", 
      RowBox[{"Cycles", "[", "cycs", "]"}]}], ",", 
     RowBox[{"RowBox", "[", 
      RowBox[{"Prepend", "[", 
       RowBox[{
        RowBox[{"formatcycle", "/@", 
         RowBox[{"{", "cycs", "}"}]}], ",", 
        RowBox[{"MakeBoxes", "[", 
         RowBox[{"coeff", ",", "StandardForm"}], "]"}]}], "]"}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", "cycs__List", "]"}], ",", "StandardForm"}], "]"}],
    ":=", 
   RowBox[{"xAct`xTensor`Private`interpretbox", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", "cycs", "]"}], ",", 
     RowBox[{"RowBox", "[", 
      RowBox[{"formatcycle", "/@", 
       RowBox[{"{", "cycs", "}"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "Cycles", "]"}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.459328165736621*^9, 3.4593282315036592`*^9}, {
  3.459328261825961*^9, 3.459328501493902*^9}, {3.459328734460535*^9, 
  3.459328769537201*^9}, {3.459328903453329*^9, 3.459328915833776*^9}, {
  3.4593289467193613`*^9, 3.459328971309409*^9}, {3.459329005153653*^9, 
  3.4593290615825*^9}, {3.459329749979547*^9, 3.459329776731907*^9}, {
  3.459329811488844*^9, 3.459329839031599*^9}, {3.459329908753956*^9, 
  3.459329979287959*^9}, {3.4593301019126663`*^9, 3.4593301988089*^9}}],

Cell["Examples :", "Text",
 CellChangeTimes->{{3.4593297090382223`*^9, 3.4593297131133432`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Cycles", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.459352625420043*^9, 3.459352629173397*^9}}],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Cycles", "[", "]"}]}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Cycles", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.459328554680685*^9, 3.459328611851015*^9}, {
  3.459328985982842*^9, 3.459328990896435*^9}, {3.459329033044778*^9, 
  3.459329035877017*^9}}],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Cycles", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}]}], "]"}]}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "3"}], 
  RowBox[{"Cycles", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.459329129261324*^9, 3.459329135978319*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "3"}], " ", 
  RowBox[{"Cycles", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}]}], "]"}]}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", "3"}], "/", "2"}], 
  RowBox[{"Cycles", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4593291382118483`*^9, 3.4593291452671337`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox["3", "2"]}], " ", 
  RowBox[{"Cycles", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}]}], "]"}]}]], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
2.2. Degree and length of permutations. PermDeg, PermLength, NotationOfPerm\
\>", "Subsection"],

Cell[CellGroupData[{

Cell["2.2.1. PermDeg and PermLength", "Subsubsection"],

Cell["\<\
The length of a permutation is a notation-dependent concept. This is mostly \
used internally to avoid recomputing the degree of a permutation many times. \
Users should use PermDeg, which gives the true degree of a permutation, i.e., \
the largest point moved by the permutation (a notation-independent concept).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "PermLength"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"PermLength[perm] gives the so-called length of permutation \
perm. If expressed in Perm or Images notation, the length of perm is the \
length of the list of points. In other cases, it returns PermDeg[perm].\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977958-5455693"]
}, Open  ]],

Cell["We need definitions on the two special cases:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermLength", "[", 
    RowBox[{"Perm", "[", "list_List", "]"}], "]"}], ":=", 
   RowBox[{"Length", "[", "list", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermLength", "[", 
    RowBox[{"Images", "[", "list_List", "]"}], "]"}], ":=", 
   RowBox[{"Length", "[", "list", "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
And definitions on sets of permutations. We take into account the base to \
compute the perm-length of a strong generating set.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"PermLength", "[", "group_Group", "]"}], ":=", 
  RowBox[{"Max", "[", 
   RowBox[{"0", ",", 
    RowBox[{"PermLength", "/@", 
     RowBox[{"List", "@@", "group"}]}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermLength", "[", "GS_GenSet", "]"}], ":=", 
   RowBox[{"Max", "[", 
    RowBox[{"0", ",", 
     RowBox[{"PermLength", "/@", 
      RowBox[{"List", "@@", "GS"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermLength", "[", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{"base_", ",", "GS_"}], "]"}], "]"}], ":=", 
   RowBox[{"Max", "[", 
    RowBox[{"base", ",", 
     RowBox[{"PermLength", "[", "GS", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermLength", "[", 
    RowBox[{"Symmetric", "[", "list_", "]"}], "]"}], ":=", 
   RowBox[{"Max", "[", 
    RowBox[{"0", ",", "list"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermLength", "[", 
    RowBox[{"Antisymmetric", "[", "list_", "]"}], "]"}], ":=", 
   RowBox[{"Max", "[", 
    RowBox[{"0", ",", "list"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell["In other cases change to PermDeg:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermLength", "[", "x_", "]"}], ":=", 
   RowBox[{"PermDeg", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"PermLength", ",", "1"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "PermLength", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
We define PermDeg here, because even though the concept is \
notation-independent, the internal definitions are different for different \
notations, to make it faster:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "PermDeg"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"PermDeg[perm] gives the degree of permutation perm, defined as \
the largest point moved. The degree of (any form of) the identity is 0. \
PermDeg[set] gives the largest degree among the permutations of the set (a \
group, generating set, strong generating set or linear combination).\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977959-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermDeg", "[", 
    RowBox[{"Perm", "[", "list_List", "]"}], "]"}], ":=", 
   RowBox[{"PermutationMax", "[", "list", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermDeg", "[", 
    RowBox[{"Images", "[", "list_List", "]"}], "]"}], ":=", 
   RowBox[{"PermutationMax", "[", "list", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermDeg", "[", 
    RowBox[{"Cycles", "[", "cycs___List", "]"}], "]"}], ":=", 
   RowBox[{"Max", "[", 
    RowBox[{"0", ",", "cycs"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermDeg", "[", 
    RowBox[{"Rules", "[", "rules___Rule", "]"}], "]"}], ":=", 
   RowBox[{"Max", "[", 
    RowBox[{"0", ",", 
     RowBox[{"Apply", "[", 
      RowBox[{"List", ",", 
       RowBox[{"{", "rules", "}"}], ",", 
       RowBox[{"{", "1", "}"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermDeg", "[", "ID", "]"}], ":=", "0"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["We do not take into account the base to compute the degree:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermDeg", "[", 
    RowBox[{"Group", "[", "perms___", "]"}], "]"}], ":=", 
   RowBox[{"Max", "[", 
    RowBox[{"0", ",", 
     RowBox[{"PermDeg", "/@", 
      RowBox[{"{", "perms", "}"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermDeg", "[", 
    RowBox[{"GenSet", "[", "perms___", "]"}], "]"}], ":=", 
   RowBox[{"Max", "[", 
    RowBox[{"0", ",", 
     RowBox[{"PermDeg", "/@", 
      RowBox[{"{", "perms", "}"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermDeg", "[", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{"_List", ",", 
      RowBox[{"GenSet", "[", "perms___", "]"}]}], "]"}], "]"}], ":=", 
   RowBox[{"Max", "[", 
    RowBox[{"0", ",", 
     RowBox[{"PermDeg", "/@", 
      RowBox[{"{", "perms", "}"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermDeg", "[", 
    RowBox[{"Symmetric", "[", "list_", "]"}], "]"}], ":=", 
   RowBox[{"Max", "[", 
    RowBox[{"0", ",", "list"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermDeg", "[", 
    RowBox[{"Antisymmetric", "[", "list_", "]"}], "]"}], ":=", 
   RowBox[{"Max", "[", 
    RowBox[{"0", ",", "list"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
Again, this is just a tentative definition on linear combinations of \
permutations:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermDeg", "[", "expr_Plus", "]"}], ":=", 
   RowBox[{"Max", "[", 
    RowBox[{"PermDeg", "/@", 
     RowBox[{"List", "@@", "expr"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermDeg", "[", 
    RowBox[{
     RowBox[{"x_", "?", "NumericQ"}], " ", "perm_"}], "]"}], ":=", 
   RowBox[{"PermDeg", "[", "perm", "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermDeg", "[", "x_", "]"}], ":=", 
   RowBox[{"Throw", "[", 
    RowBox[{"Message", "[", 
     RowBox[{
      RowBox[{"PermDeg", "::", "undef"}], ",", "\"\<degree\>\"", ",", "x"}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"PermDeg", ",", "1"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "PermDeg", "]"}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["2.2.2. Examples", "Subsubsection"],

Cell["Note the difference between these two cases:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermDeg", ",", "\[IndentingNewLine]", 
   RowBox[{"PermLength", "[", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "4"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermDeg", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermDeg", ",", "\[IndentingNewLine]", 
   RowBox[{"PermDeg", "[", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "0"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermDeg", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["or these:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermDeg", ",", "\[IndentingNewLine]", 
   RowBox[{"PermLength", "[", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "4"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermDeg", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermDeg", ",", "\[IndentingNewLine]", 
   RowBox[{"PermDeg", "[", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "3"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermDeg", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["Special cases:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermDeg", ",", "\[IndentingNewLine]", 
   RowBox[{"PermDeg", "[", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", "}"}], "]"}], "]"}], ",", "\[IndentingNewLine]", "0"}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermDeg", ",", "5", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermDeg", ",", "\[IndentingNewLine]", 
   RowBox[{"Catch", "@", 
    RowBox[{"PermDeg", "[", 
     RowBox[{"Perm", "[", "]"}], "]"}]}], ",", "\[IndentingNewLine]", "Null", 
   ",", "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Perm", "::", "argx"}], "MessageName"], ":", 
  " ", "\<\"\[NoBreak]\\!\\(Perm\\)\[NoBreak] called with \
\[NoBreak]\\!\\(0\\)\[NoBreak] arguments; 1 argument is expected. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/argx\\\", \
ButtonNote -> \\\"xAct`xPerm`Perm::argx\\\"]\\)\"\>"}]], "Message", "MSG"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"PermDeg", "::", "undef"}], "MessageName"], ":", 
  " ", "\<\"Undefined \[NoBreak]\\!\\(\\\"degree\\\"\\)\[NoBreak] of \
\[NoBreak]\\!\\(Null\\)\[NoBreak].\"\>"}]], "Message", "MSG"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermDeg", ",", "6", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermDeg", ",", "\[IndentingNewLine]", 
   RowBox[{"PermDeg", "[", 
    RowBox[{"Rules", "[", "]"}], "]"}], ",", "\[IndentingNewLine]", "0"}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermDeg", ",", "7", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermDeg", ",", "\[IndentingNewLine]", 
   RowBox[{"PermDeg", "[", 
    RowBox[{"Images", "[", 
     RowBox[{"{", "}"}], "]"}], "]"}], ",", "\[IndentingNewLine]", "0"}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermDeg", ",", "8", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["Cycles and Rules notations:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermDeg", ",", "\[IndentingNewLine]", 
   RowBox[{"PermDeg", "[", 
    RowBox[{"Cycles", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "5"}], "}"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "5"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermDeg", ",", "9", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermDeg", ",", "\[IndentingNewLine]", 
   RowBox[{"PermDeg", "[", 
    RowBox[{"Cycles", "[", "]"}], "]"}], ",", "\[IndentingNewLine]", "0"}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermDeg", ",", "10", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermDeg", ",", "\[IndentingNewLine]", 
   RowBox[{"PermDeg", "[", 
    RowBox[{"Rules", "[", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "2"}], ",", 
      RowBox[{"2", "\[Rule]", "5"}], ",", 
      RowBox[{"5", "\[Rule]", "1"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "5"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermDeg", ",", "11", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"alltests", "[", "PermDeg", "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["2.2.3. NotationOfPerm", "Subsubsection"],

Cell["\<\
This simple function gives the notation in which a particular permutation is \
written. Note that it only acts on single (possibly signed) permutations.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "NotationOfPerm"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"NotationOfPerm[perm] gives the notation of permutation perm. \
It can be one of {Perm, length}, {Images, length}, Cyles or Rules.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977960-5455693"]
}, Open  ]],

Cell["\<\
Note that for a generating set the NotationOfPerm is defined as the notation \
of the first permutation of the set:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"NotationOfPerm", "[", 
    RowBox[{"-", "g_"}], "]"}], ":=", 
   RowBox[{"NotationOfPerm", "[", "g", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NotationOfPerm", "[", 
    RowBox[{"g", ":", 
     RowBox[{"Perm", "[", "_List", "]"}]}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"Perm", ",", 
     RowBox[{"PermLength", "[", "g", "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NotationOfPerm", "[", 
    RowBox[{"g", ":", 
     RowBox[{"Images", "[", "_List", "]"}]}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"Images", ",", 
     RowBox[{"PermLength", "[", "g", "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NotationOfPerm", "[", 
    RowBox[{"Cycles", "[", "___List", "]"}], "]"}], ":=", "Cycles"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NotationOfPerm", "[", 
    RowBox[{"Rules", "[", "___Rule", "]"}], "]"}], ":=", "Rules"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NotationOfPerm", "[", 
    RowBox[{"GenSet", "[", "]"}], "]"}], ":=", "Cycles"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NotationOfPerm", "[", 
    RowBox[{"GenSet", "[", 
     RowBox[{"perm_", ",", "___"}], "]"}], "]"}], ":=", 
   RowBox[{"NotationOfPerm", "[", "perm", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"NotationOfPerm", "[", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{"_", ",", "GS_"}], "]"}], "]"}], ":=", 
    RowBox[{"NotationOfPerm", "[", "GS", "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Arbitrary", " ", "decision"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NotationOfPerm", "[", 
    RowBox[{"Symmetric", "[", "list_", "]"}], "]"}], ":=", "Cycles"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NotationOfPerm", "[", 
    RowBox[{"Antisymmetric", "[", "list_", "]"}], "]"}], ":=", "Cycles"}], 
  ";"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"NotationOfPerm", "[", "x_", "]"}], ":=", 
   RowBox[{"Throw", "[", 
    RowBox[{"Message", "[", 
     RowBox[{
      RowBox[{"NotationOfPerm", "::", "undef"}], ",", "\"\<notation\>\"", ",",
       "x"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"NotationOfPerm", ",", "1"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "NotationOfPerm", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Examples:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"NotationOfPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"NotationOfPerm", "[", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "1"}], "}"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"Perm", ",", "3"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"NotationOfPerm", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"NotationOfPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"NotationOfPerm", "[", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "1", ",", "4"}], "}"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"Images", ",", "4"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"NotationOfPerm", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"NotationOfPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"NotationOfPerm", "[", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"5", ",", "4"}], "}"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "Cycles"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"NotationOfPerm", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"NotationOfPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"NotationOfPerm", "[", 
    RowBox[{"Rules", "[", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "100"}], ",", 
      RowBox[{"100", "\[Rule]", "1"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "Rules"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"NotationOfPerm", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Catch", "@", 
  RowBox[{"NotationOfPerm", "[", "Hello", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NotationOfPerm", "::", "undef"}], "MessageName"], ":", 
  " ", "\<\"Undefined \[NoBreak]\\!\\(\\\"notation\\\"\\)\[NoBreak] of \
\[NoBreak]\\!\\(Hello\\)\[NoBreak].\"\>"}]], "Message", "MSG"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"alltests", "[", "NotationOfPerm", "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["2.3. Identity. ID", "Subsection"],

Cell[CellGroupData[{

Cell["2.3.1. Definitions", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "ID"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"ID represents the identity in all notations. ID[perm] gives \
the identity permutation in the notation used by perm.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977961-5455693"]
}, Open  ]],

Cell["\<\
Identity permutation in the notation given. Note that the length of the \
permutation is lost in Cycles and Rules notation:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ID", "[", 
    RowBox[{"Perm", "[", "list_List", "]"}], "]"}], ":=", 
   RowBox[{"Perm", "[", 
    RowBox[{"Sort", "@", "list"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ID", "[", 
    RowBox[{"Images", "[", "list_List", "]"}], "]"}], ":=", 
   RowBox[{"Images", "[", 
    RowBox[{"Sort", "@", "list"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ID", "[", 
    RowBox[{"Cycles", "[", "___List", "]"}], "]"}], ":=", 
   RowBox[{"Cycles", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ID", "[", 
    RowBox[{"Rules", "[", "___Rule", "]"}], "]"}], ":=", 
   RowBox[{"Rules", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ID", "[", "ID", "]"}], ":=", "ID"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
It is not clear how to define ID on a sum, and so we do not do that.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ID", "[", 
    RowBox[{
     RowBox[{"x_", "?", "NumericQ"}], " ", "perm_"}], "]"}], ":=", 
   RowBox[{"ID", "[", "perm", "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["Protection:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ID", "[", "x_", "]"}], ":=", 
   RowBox[{"Throw", "[", 
    RowBox[{"Message", "[", 
     RowBox[{
      RowBox[{"ID", "::", "undef"}], ",", "\"\<identity for notation\>\"", 
      ",", "x"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"ID", ",", "1"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "ID", "]"}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["2.3.2. Examples", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"ID", ",", "\[IndentingNewLine]", 
   RowBox[{"ID", "[", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "3", ",", "2", ",", "1"}], "}"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"ID", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"ID", ",", "\[IndentingNewLine]", 
   RowBox[{"ID", "[", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", "}"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"ID", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"ID", ",", "\[IndentingNewLine]", 
   RowBox[{"ID", "[", 
    RowBox[{"Cycles", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "5"}], "}"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Cycles", "[", "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"ID", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"ID", ",", "\[IndentingNewLine]", 
   RowBox[{"ID", "[", 
    RowBox[{"-", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "5"}], "}"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Cycles", "[", "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"ID", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Catch", "@", 
  RowBox[{"Perm", "[", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Perm", "::", "argx"}], "MessageName"], ":", 
  " ", "\<\"\[NoBreak]\\!\\(Perm\\)\[NoBreak] called with \
\[NoBreak]\\!\\(0\\)\[NoBreak] arguments; 1 argument is expected. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/argx\\\", \
ButtonNote -> \\\"xAct`xPerm`Perm::argx\\\"]\\)\"\>"}]], "Message", "MSG"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"alltests", "[", "ID", "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["2.4. Notation translations. TranslatePerm", "Subsection"],

Cell[CellGroupData[{

Cell["2.4.1. General definitions", "Subsubsection"],

Cell[TextData[{
 "This function translates any valid permutation in ",
 StyleBox["xPerm",
  FontSlant->"Italic"],
 " to any valid notation."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TranslatePerm"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"TranslatePerm[perm, notation] translates permutation perm, in \
any format, to the given notation, which must be one of Perm, {Perm, length}, \
Cycles, Rules, Images or {Images, length}. TranslatePerm[set, notation] \
returns the set (with head GenSet, StrongGenSet, Group or Coset) with all its \
permutations translated to notation.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977962-5455693"]
}, Open  ]],

Cell["Thread translate over lists and sets of permutations:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"set", ":", 
      RowBox[{"(", 
       RowBox[{"_List", "|", "_GenSet", "|", "_Group", "|", "_Coset"}], 
       ")"}]}], ",", "notation_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"TranslatePerm", "[", 
      RowBox[{"#", ",", "notation"}], "]"}], "&"}], "/@", "set"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"StrongGenSet", "[", 
      RowBox[{"base_List", ",", "GS_GenSet"}], "]"}], ",", "notation_"}], 
    "]"}], ":=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{"base", ",", 
     RowBox[{"TranslatePerm", "[", 
      RowBox[{"GS", ",", "notation"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Symmetric", "[", "list_", "]"}], ",", "notation_"}], "]"}], ":=", 
   RowBox[{"Symmetric", "[", "list", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Antisymmetric", "[", "list_", "]"}], ",", "notation_"}], "]"}], 
   ":=", 
   RowBox[{"Antisymmetric", "[", "list", "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Linear combinations:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{"expr_Plus", ",", "notation_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"TranslatePerm", "[", 
      RowBox[{"#", ",", "notation"}], "]"}], "&"}], "/@", "expr"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"x_", "?", "NumericQ"}], " ", "perm_"}], ",", "notation_"}], 
    "]"}], ":=", 
   RowBox[{"x", " ", 
    RowBox[{"TranslatePerm", "[", 
     RowBox[{"perm", ",", "notation"}], "]"}]}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
Translation to Perm and Images notations is given in terms of {Perm, length} \
and {Images, length}:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{"perm_", ",", "Perm"}], "]"}], ":=", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{"perm", ",", 
     RowBox[{"{", 
      RowBox[{"Perm", ",", 
       RowBox[{"PermLength", "@", "perm"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{"perm_", ",", "Images"}], "]"}], ":=", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{"perm", ",", 
     RowBox[{"{", 
      RowBox[{"Images", ",", 
       RowBox[{"PermLength", "@", "perm"}]}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["2.4.2. ID to ...", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{"ID", ",", 
     RowBox[{"{", 
      RowBox[{"Perm", ",", "length_Integer"}], "}"}]}], "]"}], ":=", 
   RowBox[{"Perm", "[", 
    RowBox[{"Range", "[", "length", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{"ID", ",", 
     RowBox[{"{", 
      RowBox[{"Images", ",", "length_Integer"}], "}"}]}], "]"}], ":=", 
   RowBox[{"Images", "[", 
    RowBox[{"Range", "[", "length", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{"ID", ",", "Cycles"}], "]"}], ":=", 
   RowBox[{"Cycles", "[", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{"ID", ",", "Rules"}], "]"}], ":=", 
   RowBox[{"Rules", "[", "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{"ID", ",", "Perm"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"-", "ID"}], ",", "Perm"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", "}"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{"ID", ",", "Images"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Images", "[", 
    RowBox[{"{", "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"-", "ID"}], ",", "Images"}], "]"}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", "}"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["2.4.3. Cycles to ...", "Subsubsection"],

Cell["1) Cycles to Cycles:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"perm", ":", 
      RowBox[{"Cycles", "[", "___List", "]"}]}], ",", "Cycles"}], "]"}], ":=", 
   RowBox[{"Cycles", "@@", 
    RowBox[{"First", "[", 
     RowBox[{"System`Cycles", "[", 
      RowBox[{"List", "@@", "perm"}], "]"}], "]"}]}]}], ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6", ",", "4"}], "}"}]}], "]"}], ",", "Cycles"}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "5", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["2) Cycles to Rules:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", "cycs___List", "]"}], ",", "Rules"}], "]"}], ":=", 
   RowBox[{"Inner", "[", 
    RowBox[{"Rule", ",", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", "cycs", "}"}], "]"}], ",", 
     RowBox[{"Flatten", "[", 
      RowBox[{"RotateLeft", "/@", 
       RowBox[{"{", "cycs", "}"}]}], "]"}], ",", "Rules"}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "5"}], "}"}]}], "]"}], ",", "Rules"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Rules", "[", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "3"}], ",", 
     RowBox[{"3", "\[Rule]", "2"}], ",", 
     RowBox[{"2", "\[Rule]", "1"}], ",", 
     RowBox[{"4", "\[Rule]", "5"}], ",", 
     RowBox[{"5", "\[Rule]", "4"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "6", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", "Rules"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Rules", "[", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "2"}], ",", 
     RowBox[{"2", "\[Rule]", "1"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "7", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Trace", "[", 
  RowBox[{"TranslatePerm", "[", 
   RowBox[{
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"102", ",", "101"}], "}"}], "]"}], ",", "Rules"}], "]"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"TranslatePerm", "[", 
     RowBox[{
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"102", ",", "101"}], "}"}], "]"}], ",", "Rules"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"Inner", "[", 
     RowBox[{"Rule", ",", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"102", ",", "101"}], "}"}], "}"}], "]"}], ",", 
      RowBox[{"Flatten", "[", 
       RowBox[{"RotateLeft", "/@", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"102", ",", "101"}], "}"}], "}"}]}], "]"}], ",", "Rules"}], 
     "]"}],
    HoldForm], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"102", ",", "101"}], "}"}], "}"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"{", 
       RowBox[{"102", ",", "101"}], "}"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"RotateLeft", "/@", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"102", ",", "101"}], "}"}], "}"}]}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"{", 
         RowBox[{"RotateLeft", "[", 
          RowBox[{"{", 
           RowBox[{"102", ",", "101"}], "}"}], "]"}], "}"}],
        HoldForm], ",", 
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"RotateLeft", "[", 
           RowBox[{"{", 
            RowBox[{"102", ",", "101"}], "}"}], "]"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"{", 
           RowBox[{"101", ",", "102"}], "}"}],
          HoldForm]}], "}"}], ",", 
       TagBox[
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"101", ",", "102"}], "}"}], "}"}],
        HoldForm]}], "}"}], ",", 
     TagBox[
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"101", ",", "102"}], "}"}], "}"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"{", 
       RowBox[{"101", ",", "102"}], "}"}],
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"Inner", "[", 
     RowBox[{"Rule", ",", 
      RowBox[{"{", 
       RowBox[{"102", ",", "101"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"101", ",", "102"}], "}"}], ",", "Rules"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"Rules", "[", 
     RowBox[{
      RowBox[{"102", "\[Rule]", "101"}], ",", 
      RowBox[{"101", "\[Rule]", "102"}]}], "]"}],
    HoldForm], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"102", "\[Rule]", "101"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"102", "\[Rule]", "101"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"101", "\[Rule]", "102"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"101", "\[Rule]", "102"}],
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"Rules", "[", 
     RowBox[{
      RowBox[{"102", "\[Rule]", "101"}], ",", 
      RowBox[{"101", "\[Rule]", "102"}]}], "]"}],
    HoldForm]}], "}"}]], "Output"]
}, Open  ]],

Cell["3) Cycles to Perm:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TranslatePerm", "[", 
   RowBox[{
    RowBox[{"Cycles", "[", "cycs___List", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"Perm", ",", "length_Integer"}], "}"}]}], "]"}], ":=", 
  RowBox[{"Perm", "@", 
   RowBox[{"PermList", "[", 
    RowBox[{
     RowBox[{"System`Cycles", "[", 
      RowBox[{"Reverse", "/@", 
       RowBox[{"{", "cycs", "}"}]}], "]"}], ",", "length"}], 
    "]"}]}]}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "7"}], "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"Perm", ",", "9"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{
     "3", ",", "1", ",", "2", ",", "7", ",", "5", ",", "6", ",", "4", ",", 
      "8", ",", "9"}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "8", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "7"}], "}"}]}], "]"}], ",", "Perm"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{
     "3", ",", "1", ",", "2", ",", "7", ",", "5", ",", "6", ",", "4"}], "}"}],
     "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "9", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["4) Cycles to Images:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"perm", ":", 
      RowBox[{"Cycles", "[", "cycs___List", "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"Images", ",", "length_Integer"}], "}"}]}], "]"}], ":=", 
   RowBox[{"Images", "@", 
    RowBox[{"PermList", "[", 
     RowBox[{
      RowBox[{"System`Cycles", "[", 
       RowBox[{"{", "cycs", "}"}], "]"}], ",", "length"}], "]"}]}]}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "7"}], "}"}]}], "]"}], ",", "Images"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "2", ",", "3", ",", "1", ",", "7", ",", "5", ",", "6", ",", "4"}], "}"}],
     "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "10", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"4", ",", "7"}], "}"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"Images", ",", "8"}], "}"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{
      "2", ",", "3", ",", "1", ",", "7", ",", "5", ",", "6", ",", "4", ",", 
       "8"}], "}"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "11", ",", "True"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["2.4.4. Perm to ...", "Subsubsection"],

Cell["\<\
1) Perm to Perm. Note that if we require a larger length then we add more \
points:\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Perm", "[", "list_List", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"Perm", ",", "length_Integer"}], "}"}]}], "]"}], ":=", 
   RowBox[{"Perm", "@", 
    RowBox[{"PermList", "[", 
     RowBox[{"list", ",", "length"}], "]"}]}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["2) Perm to Cycles:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Perm", "[", "list_List", "]"}], ",", "Cycles"}], "]"}], ":=", 
   RowBox[{"Cycles", "@@", 
    RowBox[{"(", 
     RowBox[{"Reverse", "/@", 
      RowBox[{"First", "[", 
       RowBox[{"PermCycles", "[", "list", "]"}], "]"}]}], ")"}]}]}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{
       "3", ",", "4", ",", "2", ",", "5", ",", "1", ",", "6", ",", "8", ",", 
        "7"}], "}"}], "]"}], ",", "Cycles"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "4", ",", "2", ",", "3", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "7"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "12", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["3) Perm to Rules (intermediate translation to Cycles):", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"perm", ":", 
      RowBox[{"Perm", "[", "_List", "]"}]}], ",", "Rules"}], "]"}], ":=", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"TranslatePerm", "[", 
      RowBox[{"perm", ",", "Cycles"}], "]"}], ",", "Rules"}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{
       "3", ",", "4", ",", "2", ",", "5", ",", "1", ",", "6", ",", "8", ",", 
        "7"}], "}"}], "]"}], ",", "Rules"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Rules", "[", 
    RowBox[{
     RowBox[{"5", "\[Rule]", "4"}], ",", 
     RowBox[{"4", "\[Rule]", "2"}], ",", 
     RowBox[{"2", "\[Rule]", "3"}], ",", 
     RowBox[{"3", "\[Rule]", "1"}], ",", 
     RowBox[{"1", "\[Rule]", "5"}], ",", 
     RowBox[{"8", "\[Rule]", "7"}], ",", 
     RowBox[{"7", "\[Rule]", "8"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "13", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", "}"}], "]"}], ",", "Rules"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Rules", "[", "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "14", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
4) Perm To Images. Again, add points if we require a larger length:\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Perm", "[", "list_List", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"Images", ",", "length_Integer"}], "}"}]}], "]"}], ":=", 
   RowBox[{"Images", "[", 
    RowBox[{"Take", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Ordering", "[", "list", "]"}], "~", "Join", "~", 
       RowBox[{"Range", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "list", "]"}], "+", "1"}], ",", "length"}], 
        "]"}]}], ",", "length"}], "]"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"4", ",", "2", ",", "5", ",", "3", ",", "1"}], "}"}], "]"}], 
     ",", "Images"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "2", ",", "4", ",", "1", ",", "3"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "15", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{
       "4", ",", "2", ",", "5", ",", "3", ",", "1", ",", "6", ",", "7", ",", 
        "8"}], "}"}], "]"}], ",", "Images"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "5", ",", "2", ",", "4", ",", "1", ",", "3", ",", "6", ",", "7", ",", 
      "8"}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "16", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{
       "4", ",", "2", ",", "5", ",", "3", ",", "1", ",", "6", ",", "7", ",", 
        "8"}], "}"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"Images", ",", "5"}], "}"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "2", ",", "4", ",", "1", ",", "3"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "17", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{
       "4", ",", "2", ",", "5", ",", "3", ",", "1", ",", "6", ",", "7", ",", 
        "8"}], "}"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"Images", ",", "10"}], "}"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "5", ",", "2", ",", "4", ",", "1", ",", "3", ",", "6", ",", "7", ",", 
      "8", ",", "9", ",", "10"}], "}"}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "18", ",", "True"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["2.4.5. Rules to ...", "Subsubsection"],

Cell["1) Rules to Rules:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"perm", ":", 
      RowBox[{"Rules", "[", "___Rule", "]"}]}], ",", "Rules"}], "]"}], ":=", 
   "perm"}], ";"}]], "Input",
 InitializationCell->True],

Cell["2) Rules to Cycles. Rewriting-rules coding:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"m1c", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n_", ",", "n_"}], "}"}], ",", "_"}], "]"}], ":=", 
   RowBox[{"Sequence", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"m1c", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n_", ",", "other__", ",", "n_"}], "}"}], ",", "_"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"n", ",", "other"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"m1c", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"other___", ",", "n_"}], "}"}], ",", "rules_"}], "]"}], ":=", 
   RowBox[{"m1c", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"other", ",", "n", ",", 
       RowBox[{"n", "/.", "rules"}]}], "}"}], ",", "rules"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mcs", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n_", ",", "other___"}], "}"}], ",", "rules_", ",", 
     RowBox[{"{", "cycs___", "}"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cyc", "=", 
       RowBox[{"m1c", "[", 
        RowBox[{
         RowBox[{"{", "n", "}"}], ",", "rules"}], "]"}]}], "}"}], ",", 
     RowBox[{"mcs", "[", 
      RowBox[{
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"{", "other", "}"}], ",", "cyc"}], "]"}], ",", "rules", ",", 
       
       RowBox[{"{", 
        RowBox[{"cycs", ",", "cyc"}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mcs", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "_", ",", "cycs_"}], "]"}], ":=", "cycs"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Rules", "[", "rules___Rule", "]"}], ",", "Cycles"}], "]"}], ":=", 
   RowBox[{"Cycles", "@@", 
    RowBox[{"mcs", "[", 
     RowBox[{
      RowBox[{"Range", "[", 
       RowBox[{"PermDeg", "[", 
        RowBox[{"Rules", "[", "rules", "]"}], "]"}], "]"}], ",", 
      RowBox[{"{", "rules", "}"}], ",", 
      RowBox[{"{", "}"}]}], "]"}]}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
It would be nice to write a one-liner, but I don't know how to do it.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Rules", "[", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "3"}], ",", 
       RowBox[{"3", "\[Rule]", "1"}]}], "]"}], ",", "Cycles"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "19", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Rules", "[", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "3"}], ",", 
       RowBox[{"3", "\[Rule]", "2"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}], ",", 
       RowBox[{"7", "\[Rule]", "8"}], ",", 
       RowBox[{"8", "\[Rule]", "7"}]}], "]"}], ",", "Cycles"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "20", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Rules", "[", "]"}]}], ",", "Cycles"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "21", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["3) Rules to Perm:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TranslatePerm", "[", 
   RowBox[{
    RowBox[{"Rules", "[", "rules___Rule", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"Perm", ",", "length_Integer"}], "}"}]}], "]"}], ":=", 
  RowBox[{"Perm", "@", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{
     RowBox[{"Range", "@", "length"}], ",", 
     RowBox[{"First", "/@", 
      RowBox[{"{", "rules", "}"}]}], ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "}"}], "&"}], "/@", 
        RowBox[{"{", "rules", "}"}]}], ")"}], "/.", 
      RowBox[{
       RowBox[{"{", "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"{", "}"}], "}"}]}]}], ",", 
     RowBox[{
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", 
          RowBox[{"{", "rules", "}"}], "]"}], "]"}], ",", "1"}], "]"}], "/.", 
      
      RowBox[{
       RowBox[{"{", "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"{", "}"}], "}"}]}]}]}], "]"}]}]}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Rules", "[", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", 
       RowBox[{"2", "\[Rule]", "5"}], ",", 
       RowBox[{"5", "\[Rule]", "1"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"Perm", ",", "7"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{
     "5", ",", "1", ",", "3", ",", "4", ",", "2", ",", "6", ",", "7"}], "}"}],
     "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "22", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Rules", "[", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "2"}], ",", 
        RowBox[{"2", "\[Rule]", "5"}], ",", 
        RowBox[{"5", "\[Rule]", "1"}], ",", 
        RowBox[{"7", "\[Rule]", "8"}], ",", 
        RowBox[{"8", "\[Rule]", "7"}]}], "]"}]}], ",", "Perm"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{
      "5", ",", "1", ",", "3", ",", "4", ",", "2", ",", "6", ",", "8", ",", 
       "7"}], "}"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "23", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Rules", "[", "]"}], ",", "Perm"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "24", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["4) Rules to Images:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TranslatePerm", "[", 
   RowBox[{
    RowBox[{"perm", ":", 
     RowBox[{"Rules", "[", "___Rule", "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"Images", ",", "length_Integer"}], "}"}]}], "]"}], ":=", 
  RowBox[{"Images", "[", 
   RowBox[{
    RowBox[{"Range", "@", "length"}], "/.", 
    RowBox[{"List", "@@", "perm"}]}], "]"}]}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Rules", "[", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "3"}], ",", 
       RowBox[{"2", "\[Rule]", "4"}], ",", 
       RowBox[{"3", "\[Rule]", "2"}], ",", 
       RowBox[{"4", "\[Rule]", "1"}]}], "]"}], ",", "Images"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "25", ",", "True"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["2.4.6. Images to ...", "Subsubsection"],

Cell["1) Images to Images:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Images", "[", "list_List", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"Images", ",", "length_Integer"}], "}"}]}], "]"}], ":=", 
   RowBox[{"Images", "[", 
    RowBox[{"Take", "[", 
     RowBox[{
      RowBox[{"list", "~", "Join", "~", 
       RowBox[{"Range", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "list", "]"}], "+", "1"}], ",", "length"}], 
        "]"}]}], ",", "length"}], "]"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["2) Images to Perm:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Images", "[", "list_List", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"Perm", ",", "length_"}], "}"}]}], "]"}], ":=", 
   RowBox[{"Perm", "[", 
    RowBox[{"Take", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Ordering", "[", "list", "]"}], "~", "Join", "~", 
       RowBox[{"Range", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "list", "]"}], "+", "1"}], ",", "length"}], 
        "]"}]}], ",", "length"}], "]"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{
        "3", ",", "4", ",", "2", ",", "1", ",", "7", ",", "6", ",", "5"}], 
        "}"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"Images", ",", "9"}], "}"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{
      "4", ",", "3", ",", "1", ",", "2", ",", "7", ",", "6", ",", "5", ",", 
       "8", ",", "9"}], "}"}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "26", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{
        "4", ",", "3", ",", "1", ",", "2", ",", "7", ",", "6", ",", "5", ",", 
         "8", ",", "9"}], "}"}], "]"}]}], ",", "Perm"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{
      "3", ",", "4", ",", "2", ",", "1", ",", "7", ",", "6", ",", "5", ",", 
       "8", ",", "9"}], "}"}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "27", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["3) Images to Cycles:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Images", "[", "list_List", "]"}], ",", "Cycles"}], "]"}], ":=", 
   
   RowBox[{"Cycles", "@@", 
    RowBox[{"First", "[", 
     RowBox[{"PermCycles", "[", "list", "]"}], "]"}]}]}], ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{
        "4", ",", "3", ",", "1", ",", "2", ",", "7", ",", "6", ",", "5"}], 
        "}"}], "]"}]}], ",", "Cycles"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"5", ",", "7"}], "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "28", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["4) Images to Rules:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"Images", "[", "perm_List", "]"}], ",", "Rules"}], "]"}], ":=", 
   RowBox[{"Inner", "[", 
    RowBox[{"Rule", ",", 
     RowBox[{"Sort", "[", "perm", "]"}], ",", "perm", ",", "Rules"}], "]"}]}],
   ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TranslatePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{
        "4", ",", "3", ",", "1", ",", "2", ",", "7", ",", "6", ",", "5"}], 
        "}"}], "]"}]}], ",", "Rules"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Rules", "[", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "4"}], ",", 
      RowBox[{"2", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "1"}], ",", 
      RowBox[{"4", "\[Rule]", "2"}], ",", 
      RowBox[{"5", "\[Rule]", "7"}], ",", 
      RowBox[{"7", "\[Rule]", "5"}]}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TranslatePerm", ",", "29", ",", "True"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["2.4.7. Protection", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{"perm_", ",", 
     RowBox[{"Cycles", "|", "Rules", "|", "Perm", "|", "Images", "|", 
      RowBox[{"{", 
       RowBox[{"Perm", ",", "_Integer"}], "}"}], "|", 
      RowBox[{"{", 
       RowBox[{"Images", ",", "_Integer"}], "}"}]}]}], "]"}], ":=", 
   RowBox[{"Throw", "[", 
    RowBox[{"Message", "[", 
     RowBox[{
      RowBox[{"TranslatePerm", "::", "invalid"}], ",", "perm", ",", 
      "\"\<permutation\>\""}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{"_", ",", "notation_"}], "]"}], ":=", 
   RowBox[{"Throw", "[", 
    RowBox[{"Message", "[", 
     RowBox[{
      RowBox[{"TranslatePerm", "::", "unknown"}], ",", "\"\<notation\>\"", 
      ",", "notation"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"TranslatePerm", ",", "2"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "TranslatePerm", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Catch", "@", 
  RowBox[{"TranslatePerm", "[", 
   RowBox[{"Hello", ",", "Cycles"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"TranslatePerm", "::", "invalid"}], "MessageName"], ":", 
  " ", "\<\"\[NoBreak]\\!\\(Hello\\)\[NoBreak] is not a valid \
\[NoBreak]\\!\\(\\\"permutation\\\"\\)\[NoBreak].\"\>"}]], "Message", "MSG"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Catch", "@", 
  RowBox[{"TranslatePerm", "[", 
   RowBox[{"Hello", ",", "GoodBye"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"TranslatePerm", "::", "unknown"}], "MessageName"], ":", 
  " ", "\<\"Unknown \[NoBreak]\\!\\(\\\"notation\\\"\\)\[NoBreak] \
\[NoBreak]\\!\\(GoodBye\\)\[NoBreak].\"\>"}]], "Message", "MSG"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"alltests", "[", "TranslatePerm", "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["2.5. Point images. OnPoints", "Subsection"],

Cell[CellGroupData[{

Cell["2.5.1. Definitions and examples", "Subsubsection"],

Cell["\<\
This is usually treated as a Power function on permutations. I don't like \
that at all.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "OnPoints"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"OnPoints[p, perm] yields the image of point p under \
permutation perm. OnPoints[{p1, ...}, perm] yields the list of images of \
points pi. Signs of permutations are not considered.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977965-5455693"]
}, Open  ]],

Cell["OnPoints is listable on its first argument:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"OnPoints", "[", 
    RowBox[{"list_List", ",", "perm_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"OnPoints", "[", 
      RowBox[{"#", ",", "perm"}], "]"}], "&"}], "/@", "list"}]}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell["Permutations acting on points:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"OnPoints", "[", 
    RowBox[{"p_Integer", ",", "ID"}], "]"}], ":=", "p"}], ";"}]], "Input",
 InitializationCell->True],

Cell["\<\
HACK: OnPoints with negative permutations: forget about sign. Onpoints is not \
defined on sums or multiplications for scalars other than -1.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Sign", " ", "points"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"OnPoints", "[", 
      RowBox[{"0", ",", 
       RowBox[{"-", "perm_"}]}], "]"}], ":=", 
     RowBox[{"-", "1"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"OnPoints", "[", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "perm_"}]}], "]"}], ":=", "0"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"OnPoints", "[", 
      RowBox[{"0", ",", "perm_"}], "]"}], ":=", "0"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"OnPoints", "[", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "perm_"}], "]"}], ":=", 
     RowBox[{"-", "1"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Other", " ", "points"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"OnPoints", "[", 
      RowBox[{"p_Integer", ",", 
       RowBox[{"-", "perm_"}]}], "]"}], ":=", 
     RowBox[{"OnPoints", "[", 
      RowBox[{"p", ",", "perm"}], "]"}]}], ";"}]}]}]], "Input",
 InitializationCell->True],

Cell["1) Perm notation:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"OnPoints", "[", 
    RowBox[{"p_Integer", ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"list", ":", 
       RowBox[{"{", 
        RowBox[{"___", ",", "p_", ",", "___"}], "}"}]}], "]"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Position", "[", 
     RowBox[{"list", ",", "p"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OnPoints", "[", 
    RowBox[{"p_Integer", ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", "___", "}"}], "]"}]}], "]"}], ":=", "p"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{"5", ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", "5"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{"4", ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", "2"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{"1", ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", "}"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", "1"}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["The function OnPoints is reasonably fast in Perm notation", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Trace", "[", 
  RowBox[{"OnPoints", "[", 
   RowBox[{"4", ",", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}]}], 
   "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"OnPoints", "[", 
     RowBox[{"4", ",", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "5", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}]}],
      "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{
     RowBox[{"Position", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "5", ",", "4", ",", "2", ",", "1"}], "}"}], ",", 
       "4"}], "]"}], "\[LeftDoubleBracket]", 
     RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}],
    HoldForm], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"Position", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "5", ",", "4", ",", "2", ",", "1"}], "}"}], ",", 
        "4"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"{", 
       RowBox[{"{", "3", "}"}], "}"}],
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", "3", "}"}], "}"}], "\[LeftDoubleBracket]", 
     RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}],
    HoldForm], ",", 
   TagBox["3",
    HoldForm]}], "}"}]], "Output"]
}, Open  ]],

Cell["2) Rules notation:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"OnPoints", "[", 
    RowBox[{"p_Integer", ",", 
     RowBox[{"Rules", "[", "rules___Rule", "]"}]}], "]"}], ":=", 
   RowBox[{"p", "/.", 
    RowBox[{"{", "rules", "}"}]}]}], ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{"3", ",", 
     RowBox[{"Rules", "[", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "3"}], ",", 
       RowBox[{"3", "\[Rule]", "5"}], ",", 
       RowBox[{"5", "\[Rule]", "1"}], ",", 
       RowBox[{"6", "\[Rule]", "7"}], ",", 
       RowBox[{"7", "\[Rule]", "6"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "5"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{"3", ",", 
     RowBox[{"-", 
      RowBox[{"Rules", "[", "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
   "3"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "5", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", 
      RowBox[{"Rules", "[", "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
   "0"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "6", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Trace", "[", 
  RowBox[{"OnPoints", "[", 
   RowBox[{"3", ",", 
    RowBox[{"Rules", "[", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "5"}], ",", 
      RowBox[{"5", "\[Rule]", "1"}], ",", 
      RowBox[{"6", "\[Rule]", "7"}], ",", 
      RowBox[{"7", "\[Rule]", "6"}]}], "]"}]}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"1", "\[Rule]", "3"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"1", "\[Rule]", "3"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"3", "\[Rule]", "5"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"3", "\[Rule]", "5"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"5", "\[Rule]", "1"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"5", "\[Rule]", "1"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"6", "\[Rule]", "7"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"6", "\[Rule]", "7"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"7", "\[Rule]", "6"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"7", "\[Rule]", "6"}],
        HoldForm]}], "}"}], ",", 
     TagBox[
      RowBox[{"Rules", "[", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "3"}], ",", 
        RowBox[{"3", "\[Rule]", "5"}], ",", 
        RowBox[{"5", "\[Rule]", "1"}], ",", 
        RowBox[{"6", "\[Rule]", "7"}], ",", 
        RowBox[{"7", "\[Rule]", "6"}]}], "]"}],
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"OnPoints", "[", 
     RowBox[{"3", ",", 
      RowBox[{"Rules", "[", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "3"}], ",", 
        RowBox[{"3", "\[Rule]", "5"}], ",", 
        RowBox[{"5", "\[Rule]", "1"}], ",", 
        RowBox[{"6", "\[Rule]", "7"}], ",", 
        RowBox[{"7", "\[Rule]", "6"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"3", "/.", "\[VeryThinSpace]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "3"}], ",", 
       RowBox[{"3", "\[Rule]", "5"}], ",", 
       RowBox[{"5", "\[Rule]", "1"}], ",", 
       RowBox[{"6", "\[Rule]", "7"}], ",", 
       RowBox[{"7", "\[Rule]", "6"}]}], "}"}]}],
    HoldForm], ",", 
   TagBox["5",
    HoldForm]}], "}"}]], "Output"]
}, Open  ]],

Cell["3) Cycles notation:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"OnPoints", "[", 
    RowBox[{"p_Integer", ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"___List", ",", 
       RowBox[{"{", 
        RowBox[{"___", ",", "p_", ",", "q_", ",", "___"}], "}"}], ",", 
       "___List"}], "]"}]}], "]"}], ":=", "q"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OnPoints", "[", 
    RowBox[{"p_Integer", ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"___List", ",", 
       RowBox[{"{", 
        RowBox[{"q_", ",", "___", ",", "p_"}], "}"}], ",", "___List"}], 
      "]"}]}], "]"}], ":=", "q"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OnPoints", "[", 
    RowBox[{"p_Integer", ",", 
     RowBox[{"Cycles", "[", "___List", "]"}]}], "]"}], ":=", "p"}], 
  ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{"3", ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3", ",", "4"}], "}"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "4"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "7", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{"3", ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4", ",", "3"}], "}"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "2"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "8", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{"3", ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "3"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "9", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{"3", ",", 
     RowBox[{"Cycles", "[", "]"}]}], "]"}], ",", "\[IndentingNewLine]", "3"}],
   "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "10", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "5", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"5", ",", "4", ",", "1", ",", "3", ",", "2"}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "11", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{"1", ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}], "]"}]}]}], "]"}], ",", 
   "\[IndentingNewLine]", "1"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "12", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{"2", ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}], "]"}]}]}], "]"}], ",", 
   "\[IndentingNewLine]", "3"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "13", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["4) Images notation:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"OnPoints", "[", 
    RowBox[{"p_Integer", ",", 
     RowBox[{"Images", "[", 
      RowBox[{"list", ":", 
       RowBox[{"{", 
        RowBox[{"___", ",", "p_", ",", "___"}], "}"}]}], "]"}]}], "]"}], ":=", 
   RowBox[{"list", "[", 
    RowBox[{"[", "p", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OnPoints", "[", 
    RowBox[{"p_Integer", ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", "___", "}"}], "]"}]}], "]"}], ":=", "p"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{"1", ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", "2"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "14", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{"5", ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", "5"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "15", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["Protection:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"OnPoints", ",", "2"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "OnPoints", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["It is not defined on linear combinations:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OnPoints", "[", 
  RowBox[{"1", ",", 
   RowBox[{
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], "]"}], "+", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], "]"}]}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"OnPoints", "[", 
  RowBox[{"1", ",", 
   RowBox[{
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], "]"}], "+", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], "]"}]}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OnPoints", "[", 
  RowBox[{"1", ",", 
   RowBox[{"3", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], "]"}]}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"OnPoints", "[", 
  RowBox[{"1", ",", 
   RowBox[{"3", " ", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], "]"}]}]}], "]"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["2.5.2. Timings", "Subsubsection"],

Cell["First we compare different notations:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"p", "=", "1"}], ";", 
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"p", "=", 
      RowBox[{"OnPoints", "[", 
       RowBox[{"p", ",", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"5", ",", "1", ",", "6", ",", "2", ",", "3", ",", "4"}], 
          "}"}], "]"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "10000"}], "}"}]}], "]"}], ";", "p"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.11465699999999999503241809861719957553`5.080000487553353", ",", "3"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"p", "=", "1"}], ";", 
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"p", "=", 
      RowBox[{"OnPoints", "[", 
       RowBox[{"p", ",", 
        RowBox[{"Images", "[", 
         RowBox[{"{", 
          RowBox[{"2", ",", "4", ",", "5", ",", "6", ",", "1", ",", "3"}], 
          "}"}], "]"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "10000"}], "}"}]}], "]"}], ";", "p"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.06862799999999999456257171459583332762`4.857101255873921", ",", "3"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"p", "=", "1"}], ";", 
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"p", "=", 
      RowBox[{"OnPoints", "[", 
       RowBox[{"p", ",", 
        RowBox[{"Rules", "[", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "2"}], ",", 
          RowBox[{"2", "\[Rule]", "4"}], ",", 
          RowBox[{"4", "\[Rule]", "6"}], ",", 
          RowBox[{"6", "\[Rule]", "3"}], ",", 
          RowBox[{"3", "\[Rule]", "5"}], ",", 
          RowBox[{"5", "\[Rule]", "1"}]}], "]"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "10000"}], "}"}]}], "]"}], ";", "p"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.18414400000000000212629913676209980622`5.2857574859989676", ",", "3"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"p", "=", "1"}], ";", 
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"p", "=", 
      RowBox[{"OnPoints", "[", 
       RowBox[{"p", ",", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"5", ",", "1", ",", "2", ",", "4", ",", "6", ",", "3"}], 
          "}"}], "]"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "10000"}], "}"}]}], "]"}], ";", "p"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.07227899999999999602895428552074008621`4.879612048625544", ",", "3"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["Now we include irrelevant points:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"p", "=", "1"}], ";", 
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"p", "=", 
      RowBox[{"OnPoints", "[", 
       RowBox[{"p", ",", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{
          "5", ",", "1", ",", "6", ",", "2", ",", "3", ",", "4", ",", "7", 
           ",", "8", ",", "9", ",", "10", ",", "11", ",", "12"}], "}"}], 
         "]"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "10000"}], "}"}]}], "]"}], ";", "p"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.12138200000000000378097553266343311407`5.1047542023230825", ",", "3"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"p", "=", "1"}], ";", 
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"p", "=", 
      RowBox[{"OnPoints", "[", 
       RowBox[{"p", ",", 
        RowBox[{"Images", "[", 
         RowBox[{"{", 
          RowBox[{
          "2", ",", "4", ",", "5", ",", "6", ",", "1", ",", "3", ",", "7", 
           ",", "8", ",", "9", ",", "10", ",", "11", ",", "12"}], "}"}], 
         "]"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "10000"}], "}"}]}], "]"}], ";", "p"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.07240499999999999714006548856559675187`4.880368471153997", ",", "3"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"p", "=", "1"}], ";", 
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"p", "=", 
      RowBox[{"OnPoints", "[", 
       RowBox[{"p", ",", 
        RowBox[{"Rules", "[", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "2"}], ",", 
          RowBox[{"2", "\[Rule]", "4"}], ",", 
          RowBox[{"4", "\[Rule]", "6"}], ",", 
          RowBox[{"6", "\[Rule]", "3"}], ",", 
          RowBox[{"3", "\[Rule]", "5"}], ",", 
          RowBox[{"5", "\[Rule]", "1"}], ",", 
          RowBox[{"7", "\[Rule]", "7"}], ",", 
          RowBox[{"8", "\[Rule]", "8"}], ",", 
          RowBox[{"9", "\[Rule]", "9"}], ",", 
          RowBox[{"10", "\[Rule]", "10"}], ",", 
          RowBox[{"11", "\[Rule]", "11"}], ",", 
          RowBox[{"12", "\[Rule]", "12"}]}], "]"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "10000"}], "}"}]}], "]"}], ";", "p"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.76923600000000003085176558670355007052`5.906659514165224", ",", "3"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"p", "=", "1"}], ";", 
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"p", "=", 
      RowBox[{"OnPoints", "[", 
       RowBox[{"p", ",", 
        RowBox[{"Cycles", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"5", ",", "1", ",", "2", ",", "4", ",", "6", ",", "3"}], 
           "}"}], ",", 
          RowBox[{"{", "7", "}"}], ",", 
          RowBox[{"{", "8", "}"}], ",", 
          RowBox[{"{", "9", "}"}], ",", 
          RowBox[{"{", "10", "}"}], ",", 
          RowBox[{"{", "11", "}"}], ",", 
          RowBox[{"{", "12", "}"}]}], "]"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "10000"}], "}"}]}], "]"}], ";", "p"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.29445500000000002227551476607914082706`5.489618846545511", ",", "3"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\<\
It is clear that a lot of time is lost eliminating the points at the end of \
the permutations.\
\>", "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["2.6. Composition of permutations. PermProduct", "Subsection"],

Cell["\<\
Composition of two permutations is defined. Composition of permutations in \
different notations is not allowed. Note that this is an important point to \
speed up calculations. In particular, this is why we want to ensure that all \
permutations in Perm or Images notation have the same length.\
\>", "Text"],

Cell["\<\
Linear combinations (we shall need an algebra to work with Young tableaux):\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{"perm1_", ",", "expr_Plus"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"PermProduct", "[", 
      RowBox[{"perm1", ",", "#"}], "]"}], "&"}], "/@", "expr"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{"expr_Plus", ",", "perm2_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"PermProduct", "[", 
      RowBox[{"#", ",", "perm2"}], "]"}], "&"}], "/@", "expr"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"x_", "?", "NumericQ"}], " ", "perm1_"}], ",", "perm2_"}], 
    "]"}], ":=", 
   RowBox[{"x", " ", 
    RowBox[{"PermProduct", "[", 
     RowBox[{"perm1", ",", "perm2"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{"perm1_", ",", 
     RowBox[{
      RowBox[{"y_", "?", "NumericQ"}], " ", "perm2_"}]}], "]"}], ":=", 
   RowBox[{"y", " ", 
    RowBox[{"PermProduct", "[", 
     RowBox[{"perm1", ",", "perm2"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{"perm_", ",", "0"}], "]"}], ":=", "0"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{"0", ",", "perm_"}], "]"}], ":=", "0"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Identity:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", "]"}], ":=", "ID"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{"perm_", ",", "ID"}], "]"}], ":=", "perm"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{"ID", ",", "perm_"}], "]"}], ":=", "perm"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
OneIdentity (this is given to be consistent with PermPower[perm, 1] below):\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", "perm_", "]"}], ":=", "perm"}], ";"}]], "Input",
 InitializationCell->True],

Cell["Associativity (it doesn't matter which side we choose):", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{"perm1_", ",", "perm2_", ",", "perm3__"}], "]"}], ":=", 
   RowBox[{"PermProduct", "[", 
    RowBox[{"perm1", ",", 
     RowBox[{"PermProduct", "[", 
      RowBox[{"perm2", ",", "perm3"}], "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["Thread over lists:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{"list_List", ",", "perm_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"PermProduct", "[", 
      RowBox[{"#", ",", "perm"}], "]"}], "&"}], "/@", "list"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{"perm_", ",", "list_List"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"PermProduct", "[", 
      RowBox[{"perm", ",", "#"}], "]"}], "&"}], "/@", "list"}]}], 
  ";"}]}], "Input",
 InitializationCell->True],

Cell["Linearity:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermProduct", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "+", 
    RowBox[{"3", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}]}]}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "1"}], "}"}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PermProduct", "[", 
   RowBox[{
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "1"}], "}"}], "]"}]}], "]"}], "+", 
  RowBox[{"3", " ", 
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "2", ",", "1"}], "}"}], "]"}]}], "]"}]}]}]], "Output"]
}, Open  ]],

Cell["\<\
1) Perm notation (note that we do not check lengths). This definition \
essentially defines the convention of multiplications: from left to right:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Perm", "[", "list_List", "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", "}"}], "]"}]}], "]"}], ":=", 
   RowBox[{"Perm", "[", "list", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", "list_List", "]"}]}], "]"}], ":=", 
   RowBox[{"Perm", "[", "list", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Perm", "[", "list1_List", "]"}], ",", 
     RowBox[{"Perm", "[", "list2_List", "]"}]}], "]"}], ":=", 
   RowBox[{"Perm", "[", 
    RowBox[{"list1", "[", 
     RowBox[{"[", "list2", "]"}], "]"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermProduct", ",", "\[IndentingNewLine]", 
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "2", ",", "6"}], "}"}],
       "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"5", ",", "3", ",", "4", ",", "1", ",", "6", ",", "2"}], "}"}],
       "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "5", ",", "1", ",", "3", ",", "6", ",", "4"}], "}"}], 
    "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermProduct", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["This is rather efficient:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Trace", "[", 
  RowBox[{"PermProduct", "[", 
   RowBox[{
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "2", ",", "6"}], "}"}], 
     "]"}], ",", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"5", ",", "3", ",", "4", ",", "1", ",", "6", ",", "2"}], "}"}], 
     "]"}]}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"PermProduct", "[", 
     RowBox[{
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "2", ",", "6"}], 
        "}"}], "]"}], ",", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"5", ",", "3", ",", "4", ",", "1", ",", "6", ",", "2"}], 
        "}"}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"Perm", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "2", ",", "6"}], "}"}],
       "\[LeftDoubleBracket]", 
      RowBox[{"{", 
       RowBox[{"5", ",", "3", ",", "4", ",", "1", ",", "6", ",", "2"}], "}"}],
       "\[RightDoubleBracket]"}], "]"}],
    HoldForm], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "2", ",", "6"}], 
        "}"}], "\[LeftDoubleBracket]", 
       RowBox[{"{", 
        RowBox[{"5", ",", "3", ",", "4", ",", "1", ",", "6", ",", "2"}], 
        "}"}], "\[RightDoubleBracket]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"{", 
       RowBox[{"2", ",", "5", ",", "1", ",", "3", ",", "6", ",", "4"}], "}"}],
      
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "5", ",", "1", ",", "3", ",", "6", ",", "4"}], "}"}], 
     "]"}],
    HoldForm]}], "}"}]], "Output"]
}, Open  ]],

Cell["2) Rules notation:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PermProduct", "[", 
   RowBox[{
    RowBox[{"Rules", "[", "r1___Rule", "]"}], ",", 
    RowBox[{"Rules", "[", "r2___Rule", "]"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"Inner", "[", 
     RowBox[{"Rule", ",", "#", ",", 
      RowBox[{
       RowBox[{"#", "/.", 
        RowBox[{"{", "r1", "}"}]}], "/.", 
       RowBox[{"{", "r2", "}"}]}], ",", "Rules"}], "]"}], "&"}], "@", 
   RowBox[{"Union", "[", 
    RowBox[{"Level", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"r1", ",", "r2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"-", "1"}], "}"}]}], "]"}], "]"}]}]}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermProduct", ",", "\[IndentingNewLine]", 
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Rules", "[", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "4"}], ",", 
       RowBox[{"4", "\[Rule]", "2"}], ",", 
       RowBox[{"2", "\[Rule]", "5"}], ",", 
       RowBox[{"5", "\[Rule]", "3"}], ",", 
       RowBox[{"3", "\[Rule]", "1"}]}], "]"}], ",", 
     RowBox[{"Rules", "[", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "4"}], ",", 
       RowBox[{"4", "\[Rule]", "3"}], ",", 
       RowBox[{"3", "\[Rule]", "2"}], ",", 
       RowBox[{"2", "\[Rule]", "6"}], ",", 
       RowBox[{"6", "\[Rule]", "5"}], ",", 
       RowBox[{"5", "\[Rule]", "1"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Rules", "[", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "3"}], ",", 
     RowBox[{"2", "\[Rule]", "1"}], ",", 
     RowBox[{"3", "\[Rule]", "4"}], ",", 
     RowBox[{"4", "\[Rule]", "6"}], ",", 
     RowBox[{"5", "\[Rule]", "2"}], ",", 
     RowBox[{"6", "\[Rule]", "5"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermProduct", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermProduct", ",", "\[IndentingNewLine]", 
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Rules", "[", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "4"}], ",", 
        RowBox[{"4", "\[Rule]", "2"}], ",", 
        RowBox[{"2", "\[Rule]", "5"}], ",", 
        RowBox[{"5", "\[Rule]", "3"}], ",", 
        RowBox[{"3", "\[Rule]", "1"}]}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Rules", "[", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "4"}], ",", 
        RowBox[{"4", "\[Rule]", "3"}], ",", 
        RowBox[{"3", "\[Rule]", "2"}], ",", 
        RowBox[{"2", "\[Rule]", "6"}], ",", 
        RowBox[{"6", "\[Rule]", "5"}], ",", 
        RowBox[{"5", "\[Rule]", "1"}]}], "]"}]}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Rules", "[", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "3"}], ",", 
     RowBox[{"2", "\[Rule]", "1"}], ",", 
     RowBox[{"3", "\[Rule]", "4"}], ",", 
     RowBox[{"4", "\[Rule]", "6"}], ",", 
     RowBox[{"5", "\[Rule]", "2"}], ",", 
     RowBox[{"6", "\[Rule]", "5"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermProduct", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermProduct", ",", "\[IndentingNewLine]", 
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Rules", "[", "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Rules", "[", "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Rules", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermProduct", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["This is not very efficient:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Trace", "[", 
  RowBox[{"PermProduct", "[", 
   RowBox[{
    RowBox[{"Rules", "[", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "4"}], ",", 
      RowBox[{"4", "\[Rule]", "2"}], ",", 
      RowBox[{"2", "\[Rule]", "5"}], ",", 
      RowBox[{"5", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "1"}]}], "]"}], ",", 
    RowBox[{"Rules", "[", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "4"}], ",", 
      RowBox[{"4", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "2"}], ",", 
      RowBox[{"2", "\[Rule]", "6"}], ",", 
      RowBox[{"6", "\[Rule]", "5"}], ",", 
      RowBox[{"5", "\[Rule]", "1"}]}], "]"}]}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"1", "\[Rule]", "4"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"1", "\[Rule]", "4"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"4", "\[Rule]", "2"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"4", "\[Rule]", "2"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"2", "\[Rule]", "5"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"2", "\[Rule]", "5"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"5", "\[Rule]", "3"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"5", "\[Rule]", "3"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"3", "\[Rule]", "1"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"3", "\[Rule]", "1"}],
        HoldForm]}], "}"}], ",", 
     TagBox[
      RowBox[{"Rules", "[", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "4"}], ",", 
        RowBox[{"4", "\[Rule]", "2"}], ",", 
        RowBox[{"2", "\[Rule]", "5"}], ",", 
        RowBox[{"5", "\[Rule]", "3"}], ",", 
        RowBox[{"3", "\[Rule]", "1"}]}], "]"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"1", "\[Rule]", "4"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"1", "\[Rule]", "4"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"4", "\[Rule]", "3"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"4", "\[Rule]", "3"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"3", "\[Rule]", "2"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"3", "\[Rule]", "2"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"2", "\[Rule]", "6"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"2", "\[Rule]", "6"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"6", "\[Rule]", "5"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"6", "\[Rule]", "5"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"5", "\[Rule]", "1"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"5", "\[Rule]", "1"}],
        HoldForm]}], "}"}], ",", 
     TagBox[
      RowBox[{"Rules", "[", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "4"}], ",", 
        RowBox[{"4", "\[Rule]", "3"}], ",", 
        RowBox[{"3", "\[Rule]", "2"}], ",", 
        RowBox[{"2", "\[Rule]", "6"}], ",", 
        RowBox[{"6", "\[Rule]", "5"}], ",", 
        RowBox[{"5", "\[Rule]", "1"}]}], "]"}],
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"PermProduct", "[", 
     RowBox[{
      RowBox[{"Rules", "[", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "4"}], ",", 
        RowBox[{"4", "\[Rule]", "2"}], ",", 
        RowBox[{"2", "\[Rule]", "5"}], ",", 
        RowBox[{"5", "\[Rule]", "3"}], ",", 
        RowBox[{"3", "\[Rule]", "1"}]}], "]"}], ",", 
      RowBox[{"Rules", "[", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "4"}], ",", 
        RowBox[{"4", "\[Rule]", "3"}], ",", 
        RowBox[{"3", "\[Rule]", "2"}], ",", 
        RowBox[{"2", "\[Rule]", "6"}], ",", 
        RowBox[{"6", "\[Rule]", "5"}], ",", 
        RowBox[{"5", "\[Rule]", "1"}]}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Inner", "[", 
        RowBox[{"Rule", ",", "#1", ",", 
         RowBox[{
          RowBox[{"#1", "/.", "\[VeryThinSpace]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"1", "\[Rule]", "4"}], ",", 
             RowBox[{"4", "\[Rule]", "2"}], ",", 
             RowBox[{"2", "\[Rule]", "5"}], ",", 
             RowBox[{"5", "\[Rule]", "3"}], ",", 
             RowBox[{"3", "\[Rule]", "1"}]}], "}"}]}], "/.", 
          "\[VeryThinSpace]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"1", "\[Rule]", "4"}], ",", 
            RowBox[{"4", "\[Rule]", "3"}], ",", 
            RowBox[{"3", "\[Rule]", "2"}], ",", 
            RowBox[{"2", "\[Rule]", "6"}], ",", 
            RowBox[{"6", "\[Rule]", "5"}], ",", 
            RowBox[{"5", "\[Rule]", "1"}]}], "}"}]}], ",", "Rules"}], "]"}], 
       "&"}], ")"}], "[", 
     RowBox[{"Union", "[", 
      RowBox[{"Level", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "4"}], ",", 
          RowBox[{"4", "\[Rule]", "2"}], ",", 
          RowBox[{"2", "\[Rule]", "5"}], ",", 
          RowBox[{"5", "\[Rule]", "3"}], ",", 
          RowBox[{"3", "\[Rule]", "1"}], ",", 
          RowBox[{"1", "\[Rule]", "4"}], ",", 
          RowBox[{"4", "\[Rule]", "3"}], ",", 
          RowBox[{"3", "\[Rule]", "2"}], ",", 
          RowBox[{"2", "\[Rule]", "6"}], ",", 
          RowBox[{"6", "\[Rule]", "5"}], ",", 
          RowBox[{"5", "\[Rule]", "1"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"-", "1"}], "}"}]}], "]"}], "]"}], "]"}],
    HoldForm], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"Level", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"1", "\[Rule]", "4"}], ",", 
            RowBox[{"4", "\[Rule]", "2"}], ",", 
            RowBox[{"2", "\[Rule]", "5"}], ",", 
            RowBox[{"5", "\[Rule]", "3"}], ",", 
            RowBox[{"3", "\[Rule]", "1"}], ",", 
            RowBox[{"1", "\[Rule]", "4"}], ",", 
            RowBox[{"4", "\[Rule]", "3"}], ",", 
            RowBox[{"3", "\[Rule]", "2"}], ",", 
            RowBox[{"2", "\[Rule]", "6"}], ",", 
            RowBox[{"6", "\[Rule]", "5"}], ",", 
            RowBox[{"5", "\[Rule]", "1"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"-", "1"}], "}"}]}], "]"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"{", 
         RowBox[{
         "1", ",", "4", ",", "4", ",", "2", ",", "2", ",", "5", ",", "5", ",",
           "3", ",", "3", ",", "1", ",", "1", ",", "4", ",", "4", ",", "3", 
          ",", "3", ",", "2", ",", "2", ",", "6", ",", "6", ",", "5", ",", 
          "5", ",", "1"}], "}"}],
        HoldForm]}], "}"}], ",", 
     TagBox[
      RowBox[{"Union", "[", 
       RowBox[{"{", 
        RowBox[{
        "1", ",", "4", ",", "4", ",", "2", ",", "2", ",", "5", ",", "5", ",", 
         "3", ",", "3", ",", "1", ",", "1", ",", "4", ",", "4", ",", "3", ",",
          "3", ",", "2", ",", "2", ",", "6", ",", "6", ",", "5", ",", "5", 
         ",", "1"}], "}"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}],
      
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Inner", "[", 
        RowBox[{"Rule", ",", "#1", ",", 
         RowBox[{
          RowBox[{"#1", "/.", "\[VeryThinSpace]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"1", "\[Rule]", "4"}], ",", 
             RowBox[{"4", "\[Rule]", "2"}], ",", 
             RowBox[{"2", "\[Rule]", "5"}], ",", 
             RowBox[{"5", "\[Rule]", "3"}], ",", 
             RowBox[{"3", "\[Rule]", "1"}]}], "}"}]}], "/.", 
          "\[VeryThinSpace]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"1", "\[Rule]", "4"}], ",", 
            RowBox[{"4", "\[Rule]", "3"}], ",", 
            RowBox[{"3", "\[Rule]", "2"}], ",", 
            RowBox[{"2", "\[Rule]", "6"}], ",", 
            RowBox[{"6", "\[Rule]", "5"}], ",", 
            RowBox[{"5", "\[Rule]", "1"}]}], "}"}]}], ",", "Rules"}], "]"}], 
       "&"}], ")"}], "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
     "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"Inner", "[", 
     RowBox[{"Rule", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}],
       ",", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
         "}"}], "/.", "\[VeryThinSpace]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "4"}], ",", 
          RowBox[{"4", "\[Rule]", "2"}], ",", 
          RowBox[{"2", "\[Rule]", "5"}], ",", 
          RowBox[{"5", "\[Rule]", "3"}], ",", 
          RowBox[{"3", "\[Rule]", "1"}]}], "}"}]}], "/.", "\[VeryThinSpace]", 
       
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "4"}], ",", 
         RowBox[{"4", "\[Rule]", "3"}], ",", 
         RowBox[{"3", "\[Rule]", "2"}], ",", 
         RowBox[{"2", "\[Rule]", "6"}], ",", 
         RowBox[{"6", "\[Rule]", "5"}], ",", 
         RowBox[{"5", "\[Rule]", "1"}]}], "}"}]}], ",", "Rules"}], "]"}],
    HoldForm], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
          "}"}], "/.", "\[VeryThinSpace]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "\[Rule]", "4"}], ",", 
           RowBox[{"4", "\[Rule]", "2"}], ",", 
           RowBox[{"2", "\[Rule]", "5"}], ",", 
           RowBox[{"5", "\[Rule]", "3"}], ",", 
           RowBox[{"3", "\[Rule]", "1"}]}], "}"}]}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"{", 
         RowBox[{"4", ",", "5", ",", "1", ",", "2", ",", "3", ",", "6"}], 
         "}"}],
        HoldForm]}], "}"}], ",", 
     TagBox[
      RowBox[{
       RowBox[{"{", 
        RowBox[{"4", ",", "5", ",", "1", ",", "2", ",", "3", ",", "6"}], 
        "}"}], "/.", "\[VeryThinSpace]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "4"}], ",", 
         RowBox[{"4", "\[Rule]", "3"}], ",", 
         RowBox[{"3", "\[Rule]", "2"}], ",", 
         RowBox[{"2", "\[Rule]", "6"}], ",", 
         RowBox[{"6", "\[Rule]", "5"}], ",", 
         RowBox[{"5", "\[Rule]", "1"}]}], "}"}]}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"{", 
       RowBox[{"3", ",", "1", ",", "4", ",", "6", ",", "2", ",", "5"}], "}"}],
      
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"Inner", "[", 
     RowBox[{"Rule", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}],
       ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "1", ",", "4", ",", "6", ",", "2", ",", "5"}], "}"}],
       ",", "Rules"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"Rules", "[", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "3"}], ",", 
      RowBox[{"2", "\[Rule]", "1"}], ",", 
      RowBox[{"3", "\[Rule]", "4"}], ",", 
      RowBox[{"4", "\[Rule]", "6"}], ",", 
      RowBox[{"5", "\[Rule]", "2"}], ",", 
      RowBox[{"6", "\[Rule]", "5"}]}], "]"}],
    HoldForm], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"1", "\[Rule]", "3"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"1", "\[Rule]", "3"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"2", "\[Rule]", "1"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"2", "\[Rule]", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"3", "\[Rule]", "4"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"3", "\[Rule]", "4"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"4", "\[Rule]", "6"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"4", "\[Rule]", "6"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"5", "\[Rule]", "2"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"5", "\[Rule]", "2"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"6", "\[Rule]", "5"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"6", "\[Rule]", "5"}],
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"Rules", "[", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "3"}], ",", 
      RowBox[{"2", "\[Rule]", "1"}], ",", 
      RowBox[{"3", "\[Rule]", "4"}], ",", 
      RowBox[{"4", "\[Rule]", "6"}], ",", 
      RowBox[{"5", "\[Rule]", "2"}], ",", 
      RowBox[{"6", "\[Rule]", "5"}]}], "]"}],
    HoldForm]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
3) Cycles notation (just translation to Rules). This should be improved:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", "]"}], ",", 
     RowBox[{"perm", ":", 
      RowBox[{"Cycles", "[", "___List", "]"}]}]}], "]"}], ":=", "perm"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"perm", ":", 
      RowBox[{"Cycles", "[", "___List", "]"}]}], ",", 
     RowBox[{"Cycles", "[", "]"}]}], "]"}], ":=", "perm"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", "cycs1___", "]"}], ",", 
     RowBox[{"Cycles", "[", "cycs2___", "]"}]}], "]"}], ":=", 
   RowBox[{"Apply", "[", 
    RowBox[{"Cycles", ",", 
     RowBox[{"First", "@", 
      RowBox[{"PermutationProduct", "[", 
       RowBox[{
        RowBox[{"System`Cycles", "[", 
         RowBox[{"{", "cycs1", "}"}], "]"}], ",", 
        RowBox[{"System`Cycles", "[", 
         RowBox[{"{", "cycs2", "}"}], "]"}]}], "]"}]}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermProduct", ",", "\[IndentingNewLine]", 
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermProduct", ",", "5", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermProduct", ",", "\[IndentingNewLine]", 
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "5", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "5", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermProduct", ",", "6", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["4) Images notation:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Images", "[", "list1_List", "]"}], ",", 
     RowBox[{"Images", "[", "list2_List", "]"}]}], "]"}], ":=", 
   RowBox[{"Images", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Union", "[", 
       RowBox[{"list1", ",", "list2"}], "]"}], "/.", 
      RowBox[{"Inner", "[", 
       RowBox[{"Rule", ",", 
        RowBox[{"Sort", "[", "list1", "]"}], ",", "list1", ",", "List"}], 
       "]"}]}], "/.", 
     RowBox[{"Inner", "[", 
      RowBox[{"Rule", ",", 
       RowBox[{"Sort", "[", "list2", "]"}], ",", "list2", ",", "List"}], 
      "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["\<\
This definition is insensitive to the lengths of the lists of points of the \
permutations.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermProduct", ",", "\[IndentingNewLine]", 
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "4", ",", "1", ",", "5", ",", "6"}], "}"}],
       "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "6", ",", "2"}], 
        "}"}], "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "1", ",", "3", ",", "6", ",", "2"}], "}"}], 
     "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermProduct", ",", "7", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Trace", "[", 
  RowBox[{"PermProduct", "[", 
   RowBox[{
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "4", ",", "1", ",", "5", ",", "6"}], "}"}], 
     "]"}], ",", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "6", ",", "2"}], "}"}], 
     "]"}]}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"PermProduct", "[", 
     RowBox[{
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3", ",", "4", ",", "1", ",", "5", ",", "6"}], 
        "}"}], "]"}], ",", 
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "6", ",", "2"}], 
        "}"}], "]"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"Images", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "4", ",", "1", ",", "5", ",", "6"}], 
         "}"}], "\[Union]", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "6", ",", "2"}], 
         "}"}]}], "/.", "\[VeryThinSpace]", 
       RowBox[{"Inner", "[", 
        RowBox[{"Rule", ",", 
         RowBox[{"Sort", "[", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3", ",", "4", ",", "1", ",", "5", ",", "6"}], 
           "}"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "3", ",", "4", ",", "1", ",", "5", ",", "6"}], 
          "}"}], ",", "List"}], "]"}]}], "/.", "\[VeryThinSpace]", 
      RowBox[{"Inner", "[", 
       RowBox[{"Rule", ",", 
        RowBox[{"Sort", "[", 
         RowBox[{"{", 
          RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "6", ",", "2"}], 
          "}"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "6", ",", "2"}], 
         "}"}], ",", "List"}], "]"}]}], "]"}],
    HoldForm], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{
           RowBox[{"{", 
            RowBox[{"2", ",", "3", ",", "4", ",", "1", ",", "5", ",", "6"}], 
            "}"}], "\[Union]", 
           RowBox[{"{", 
            RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "6", ",", "2"}], 
            "}"}]}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
           "}"}],
          HoldForm]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           TagBox[
            RowBox[{"Sort", "[", 
             RowBox[{"{", 
              RowBox[{"2", ",", "3", ",", "4", ",", "1", ",", "5", ",", "6"}],
               "}"}], "]"}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
             "}"}],
            HoldForm]}], "}"}], ",", 
         TagBox[
          RowBox[{"Inner", "[", 
           RowBox[{"Rule", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
             "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"2", ",", "3", ",", "4", ",", "1", ",", "5", ",", "6"}], 
             "}"}], ",", "List"}], "]"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"{", 
           RowBox[{
            RowBox[{"1", "\[Rule]", "2"}], ",", 
            RowBox[{"2", "\[Rule]", "3"}], ",", 
            RowBox[{"3", "\[Rule]", "4"}], ",", 
            RowBox[{"4", "\[Rule]", "1"}], ",", 
            RowBox[{"5", "\[Rule]", "5"}], ",", 
            RowBox[{"6", "\[Rule]", "6"}]}], "}"}],
          HoldForm], ",", 
         RowBox[{"{", 
          RowBox[{
           TagBox[
            RowBox[{"1", "\[Rule]", "2"}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"1", "\[Rule]", "2"}],
            HoldForm]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           TagBox[
            RowBox[{"2", "\[Rule]", "3"}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"2", "\[Rule]", "3"}],
            HoldForm]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           TagBox[
            RowBox[{"3", "\[Rule]", "4"}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"3", "\[Rule]", "4"}],
            HoldForm]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           TagBox[
            RowBox[{"4", "\[Rule]", "1"}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"4", "\[Rule]", "1"}],
            HoldForm]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           TagBox[
            RowBox[{"5", "\[Rule]", "5"}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"5", "\[Rule]", "5"}],
            HoldForm]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           TagBox[
            RowBox[{"6", "\[Rule]", "6"}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"6", "\[Rule]", "6"}],
            HoldForm]}], "}"}], ",", 
         TagBox[
          RowBox[{"{", 
           RowBox[{
            RowBox[{"1", "\[Rule]", "2"}], ",", 
            RowBox[{"2", "\[Rule]", "3"}], ",", 
            RowBox[{"3", "\[Rule]", "4"}], ",", 
            RowBox[{"4", "\[Rule]", "1"}], ",", 
            RowBox[{"5", "\[Rule]", "5"}], ",", 
            RowBox[{"6", "\[Rule]", "6"}]}], "}"}],
          HoldForm]}], "}"}], ",", 
       TagBox[
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
          "}"}], "/.", "\[VeryThinSpace]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "\[Rule]", "2"}], ",", 
           RowBox[{"2", "\[Rule]", "3"}], ",", 
           RowBox[{"3", "\[Rule]", "4"}], ",", 
           RowBox[{"4", "\[Rule]", "1"}], ",", 
           RowBox[{"5", "\[Rule]", "5"}], ",", 
           RowBox[{"6", "\[Rule]", "6"}]}], "}"}]}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "4", ",", "1", ",", "5", ",", "6"}], 
         "}"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"Sort", "[", 
           RowBox[{"{", 
            RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "6", ",", "2"}], 
            "}"}], "]"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
           "}"}],
          HoldForm]}], "}"}], ",", 
       TagBox[
        RowBox[{"Inner", "[", 
         RowBox[{"Rule", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
           "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "6", ",", "2"}], 
           "}"}], ",", "List"}], "]"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "3"}], ",", 
          RowBox[{"2", "\[Rule]", "4"}], ",", 
          RowBox[{"3", "\[Rule]", "5"}], ",", 
          RowBox[{"4", "\[Rule]", "1"}], ",", 
          RowBox[{"5", "\[Rule]", "6"}], ",", 
          RowBox[{"6", "\[Rule]", "2"}]}], "}"}],
        HoldForm], ",", 
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"1", "\[Rule]", "3"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"1", "\[Rule]", "3"}],
          HoldForm]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"2", "\[Rule]", "4"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"2", "\[Rule]", "4"}],
          HoldForm]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"3", "\[Rule]", "5"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"3", "\[Rule]", "5"}],
          HoldForm]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"4", "\[Rule]", "1"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"4", "\[Rule]", "1"}],
          HoldForm]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"5", "\[Rule]", "6"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"5", "\[Rule]", "6"}],
          HoldForm]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"6", "\[Rule]", "2"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"6", "\[Rule]", "2"}],
          HoldForm]}], "}"}], ",", 
       TagBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "3"}], ",", 
          RowBox[{"2", "\[Rule]", "4"}], ",", 
          RowBox[{"3", "\[Rule]", "5"}], ",", 
          RowBox[{"4", "\[Rule]", "1"}], ",", 
          RowBox[{"5", "\[Rule]", "6"}], ",", 
          RowBox[{"6", "\[Rule]", "2"}]}], "}"}],
        HoldForm]}], "}"}], ",", 
     TagBox[
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "3", ",", "4", ",", "1", ",", "5", ",", "6"}], 
        "}"}], "/.", "\[VeryThinSpace]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "3"}], ",", 
         RowBox[{"2", "\[Rule]", "4"}], ",", 
         RowBox[{"3", "\[Rule]", "5"}], ",", 
         RowBox[{"4", "\[Rule]", "1"}], ",", 
         RowBox[{"5", "\[Rule]", "6"}], ",", 
         RowBox[{"6", "\[Rule]", "2"}]}], "}"}]}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"{", 
       RowBox[{"4", ",", "5", ",", "1", ",", "3", ",", "6", ",", "2"}], "}"}],
      
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "1", ",", "3", ",", "6", ",", "2"}], "}"}], 
     "]"}],
    HoldForm]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
This is a very important point, because there is a choice between two \
possibilities. Our choice means that given a list omega we perform \
permutations in the form omega \[SmallCircle] perm = omega[[ perm ]]. For \
example, in Perm notation, if we are given two permutations perm1 and perm2, \
we can multiply them as perm1 \[SmallCircle] perm2, which means omega \
\[SmallCircle] ( perm1 \[SmallCircle] perm2 ) = omega [[ perm1 \[SmallCircle] \
perm2 ]] = omega[[ perm1 ]][[ perm2 ]] = omega[[ perm1[[ perm2 ]] ]]. \
Therefore it is consistent to define perm1 \[SmallCircle] perm2 = perm1[[ \
perm2 ]]. This is good to remember the order of everything. A posteriori, the \
main motivation is having, given a point alpha, that      ( alpha^perm1 \
)^perm2 = alpha^( perm1.perm2)\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermProduct", ",", "\[IndentingNewLine]", 
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "4", ",", "3"}], "}"}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "4", ",", "1"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermProduct", ",", "8", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermProduct", ",", "\[IndentingNewLine]", 
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "4", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermProduct", ",", "9", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
This is the choice in GAP, the choice in Butler's book, and the choice in \
Renato's papers.\
\>", "Text"],

Cell["This is the example given in GAP Reference, chapter 40:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermProduct", ",", "\[IndentingNewLine]", 
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "4"}], "}"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermProduct", ",", "10", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{"17", ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "5", ",", "17", ",", "9", ",", "8"}], "}"}], "]"}]}],
     "]"}], ",", "\[IndentingNewLine]", "9"}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "16", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermProduct", ",", "\[IndentingNewLine]", 
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermProduct", ",", "11", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Note that in the Perm and Images notations we do (implicitly) check the \
lengths, in the sense that errors quickly crop up:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermProduct", ",", "\[IndentingNewLine]", 
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4", ",", "1", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "1"}], "}"}], "]"}]}], "\[IndentingNewLine]",
   "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermProduct", ",", "12", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermProduct", ",", "\[IndentingNewLine]", 
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4", ",", "1", ",", "3"}], "}"}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", "$Failed", ",", "\[IndentingNewLine]", 
   "True"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Part", "::", "partw"}], "MessageName"], ":", 
  " ", "\<\"Part \[NoBreak]\\!\\({2, 4, 1, 3}\\)\[NoBreak] of \
\[NoBreak]\\!\\({2, 1, 3}\\)\[NoBreak] does not exist. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/partw\\\", \
ButtonNote -> \\\"Part::partw\\\"]\\)\"\>"}]], "Message", "MSG"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermProduct", ",", "13", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Cosets. We first check if the permutation is already in the set or not:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{
     RowBox[{"Group", "[", "perms___", "]"}], ",", "perm_"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"Or", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"PermEqual", "[", 
          RowBox[{"#", ",", "perm"}], "]"}], "&"}], "/@", 
        RowBox[{"{", "perms", "}"}]}], ")"}]}], ",", 
     RowBox[{"Group", "[", "perms", "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"PermProduct", "[", 
        RowBox[{"#", ",", "perm"}], "]"}], "&"}], "/@", 
      RowBox[{"Coset", "[", "perms", "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermProduct", "[", 
    RowBox[{"perm_", ",", 
     RowBox[{"Group", "[", "perms___", "]"}]}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"Or", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"PermEqual", "[", 
          RowBox[{"perm", ",", "#"}], "]"}], "&"}], "/@", 
        RowBox[{"{", "perms", "}"}]}], ")"}]}], ",", 
     RowBox[{"Group", "[", "perms", "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"PermProduct", "[", 
        RowBox[{"perm", ",", "#"}], "]"}], "&"}], "/@", 
      RowBox[{"Coset", "[", "perms", "]"}]}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Protection. PermProduct can have any number of arguments:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Protection", "[", "PermProduct", "]"}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["2.7. Inverse permutation. InversePerm", "Subsection"],

Cell[CellGroupData[{

Cell["2.7.1. Definitions", "Subsubsection"],

Cell["\<\
The only nontrivial part is the use of the function Ordering:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "InversePerm"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"InversePerm[perm] gives the inverse permutation of perm.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977969-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"InversePerm", "[", 
    RowBox[{"Perm", "[", "list_List", "]"}], "]"}], ":=", 
   RowBox[{"Perm", "[", 
    RowBox[{"InversePermutation", "[", "list", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"InversePerm", "[", 
    RowBox[{"Images", "[", "list_List", "]"}], "]"}], ":=", 
   RowBox[{"Images", "[", 
    RowBox[{"InversePermutation", "[", "list", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"InversePerm", "[", 
    RowBox[{"Cycles", "[", "cycs___List", "]"}], "]"}], ":=", 
   RowBox[{"Apply", "[", 
    RowBox[{"Cycles", ",", 
     RowBox[{"First", "@", 
      RowBox[{"InversePermutation", "[", 
       RowBox[{"System`Cycles", "[", 
        RowBox[{"{", "cycs", "}"}], "]"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"InversePerm", "[", 
    RowBox[{"Rules", "[", "rules___Rule", "]"}], "]"}], ":=", 
   RowBox[{"Reverse", "/@", 
    RowBox[{"Rules", "[", "rules", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"InversePerm", "[", "ID", "]"}], ":=", "ID"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"InversePerm", "[", 
    RowBox[{
     RowBox[{"x_", "?", "NumericQ"}], " ", "perm_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"1", "/", "x"}], " ", 
    RowBox[{"InversePerm", "[", "perm", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"InversePerm", ",", "1"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "InversePerm", "]"}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["2.7.2. Examples", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"InversePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"InversePerm", "[", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"InversePerm", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"InversePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"InversePerm", "[", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", "}"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"InversePerm", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"InversePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"InversePerm", "[", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"InversePerm", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"InversePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"InversePerm", "[", 
    RowBox[{"-", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"InversePerm", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"InversePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"InversePerm", "[", 
    RowBox[{"-", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6", ",", "1"}], "}"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "6", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"InversePerm", ",", "5", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"InversePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"InversePerm", "[", 
    RowBox[{"-", 
     RowBox[{"Cycles", "[", "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"InversePerm", ",", "6", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"InversePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"InversePerm", "[", 
    RowBox[{"Rules", "[", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "5"}], ",", 
      RowBox[{"5", "\[Rule]", "1"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Rules", "[", 
    RowBox[{
     RowBox[{"3", "\[Rule]", "1"}], ",", 
     RowBox[{"5", "\[Rule]", "3"}], ",", 
     RowBox[{"1", "\[Rule]", "5"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"InversePerm", ",", "7", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"InversePerm", ",", "\[IndentingNewLine]", 
   RowBox[{"InversePerm", "[", 
    RowBox[{"Rules", "[", "]"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Rules", "[", "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"InversePerm", ",", "8", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["InversePerm is not very efficient:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Trace", "[", 
  RowBox[{"InversePerm", "[", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}], "]"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"InversePerm", "[", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"Perm", "[", 
     RowBox[{"InversePermutation", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}], "]"}],
    HoldForm], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"InversePermutation", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"{", 
       RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}],
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}],
    HoldForm]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Trace", "[", 
  RowBox[{"InversePerm", "[", 
   RowBox[{"Rules", "[", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "3"}], ",", 
     RowBox[{"3", "\[Rule]", "5"}], ",", 
     RowBox[{"5", "\[Rule]", "1"}]}], "]"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"1", "\[Rule]", "3"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"1", "\[Rule]", "3"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"3", "\[Rule]", "5"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"3", "\[Rule]", "5"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"5", "\[Rule]", "1"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"5", "\[Rule]", "1"}],
        HoldForm]}], "}"}], ",", 
     TagBox[
      RowBox[{"Rules", "[", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "3"}], ",", 
        RowBox[{"3", "\[Rule]", "5"}], ",", 
        RowBox[{"5", "\[Rule]", "1"}]}], "]"}],
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"InversePerm", "[", 
     RowBox[{"Rules", "[", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "3"}], ",", 
       RowBox[{"3", "\[Rule]", "5"}], ",", 
       RowBox[{"5", "\[Rule]", "1"}]}], "]"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"Reverse", "/@", 
     RowBox[{"Rules", "[", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "3"}], ",", 
       RowBox[{"3", "\[Rule]", "5"}], ",", 
       RowBox[{"5", "\[Rule]", "1"}]}], "]"}]}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"Rules", "[", 
     RowBox[{
      RowBox[{"Reverse", "[", 
       RowBox[{"1", "\[Rule]", "3"}], "]"}], ",", 
      RowBox[{"Reverse", "[", 
       RowBox[{"3", "\[Rule]", "5"}], "]"}], ",", 
      RowBox[{"Reverse", "[", 
       RowBox[{"5", "\[Rule]", "1"}], "]"}]}], "]"}],
    HoldForm], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"Reverse", "[", 
       RowBox[{"1", "\[Rule]", "3"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"3", "\[Rule]", "1"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"3", "\[Rule]", "1"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"Reverse", "[", 
       RowBox[{"3", "\[Rule]", "5"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"5", "\[Rule]", "3"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"5", "\[Rule]", "3"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"Reverse", "[", 
       RowBox[{"5", "\[Rule]", "1"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"1", "\[Rule]", "5"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"1", "\[Rule]", "5"}],
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"Rules", "[", 
     RowBox[{
      RowBox[{"3", "\[Rule]", "1"}], ",", 
      RowBox[{"5", "\[Rule]", "3"}], ",", 
      RowBox[{"1", "\[Rule]", "5"}]}], "]"}],
    HoldForm]}], "}"}]], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["2.8. Permute lists. PermuteList, PermutationFromTo", "Subsection"],

Cell[TextData[{
 "This function permutes the list according to permutation perm. We neglect \
signs. This function is used twice in ",
 StyleBox["xTensor",
  FontSlant->"Italic"],
 " and then here we use the (private) function SignedPermuteList (see section \
3.6 below)."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "PermuteList"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"PermuteList[list, perm] permutes the points of list according \
to the permutation perm.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977971-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermuteList", "[", 
    RowBox[{"list_", ",", 
     RowBox[{"-", "perm_"}]}], "]"}], ":=", 
   RowBox[{"PermuteList", "[", 
    RowBox[{"list", ",", "perm"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermuteList", "[", 
    RowBox[{"list_", ",", "perm_"}], "]"}], ":=", 
   RowBox[{"list", "[", 
    RowBox[{"[", 
     RowBox[{"First", "@", 
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"perm", ",", 
        RowBox[{"{", 
         RowBox[{"Perm", ",", 
          RowBox[{"Length", "[", "list", "]"}]}], "}"}]}], "]"}]}], "]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"PermuteList", ",", "2"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "PermuteList", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermuteList", ",", "\[IndentingNewLine]", 
   RowBox[{"PermuteList", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "1", ",", "3"}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermuteList", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermuteList", ",", "\[IndentingNewLine]", 
   RowBox[{"PermuteList", "[", 
    RowBox[{
     RowBox[{"head", "[", 
      RowBox[{"2", ",", "4", ",", "1", ",", "3"}], "]"}], ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"head", "[", 
    RowBox[{"3", ",", "1", ",", "2", ",", "4"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermuteList", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"PermuteList", "[", 
   RowBox[{
    RowBox[{"head", "[", "]"}], ",", "ID"}], "]"}], "//", "Trace"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"PermuteList", "[", 
     RowBox[{
      RowBox[{"head", "[", "]"}], ",", "ID"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{
     RowBox[{"head", "[", "]"}], "\[LeftDoubleBracket]", 
     RowBox[{"First", "[", 
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"ID", ",", 
        RowBox[{"{", 
         RowBox[{"Perm", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"head", "[", "]"}], "]"}]}], "}"}]}], "]"}], "]"}], 
     "\[RightDoubleBracket]"}],
    HoldForm], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           TagBox[
            RowBox[{"Length", "[", 
             RowBox[{"head", "[", "]"}], "]"}],
            HoldForm], ",", 
           TagBox["0",
            HoldForm]}], "}"}], ",", 
         TagBox[
          RowBox[{"{", 
           RowBox[{"Perm", ",", "0"}], "}"}],
          HoldForm]}], "}"}], ",", 
       TagBox[
        RowBox[{"TranslatePerm", "[", 
         RowBox[{"ID", ",", 
          RowBox[{"{", 
           RowBox[{"Perm", ",", "0"}], "}"}]}], "]"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"Perm", "[", 
         RowBox[{"Range", "[", "0", "]"}], "]"}],
        HoldForm], ",", 
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"Range", "[", "0", "]"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"{", "}"}],
          HoldForm]}], "}"}], ",", 
       TagBox[
        RowBox[{"Perm", "[", 
         RowBox[{"{", "}"}], "]"}],
        HoldForm]}], "}"}], ",", 
     TagBox[
      RowBox[{"First", "[", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", "}"}], "]"}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"{", "}"}],
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{
     RowBox[{"head", "[", "]"}], "\[LeftDoubleBracket]", 
     RowBox[{"{", "}"}], "\[RightDoubleBracket]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"head", "[", "]"}],
    HoldForm]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
We introduce a definition that always works, even if the elements are \
repeated, in the sense that it always returns a valid permutation\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "PermutationFromTo"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"PermutationFromTo[list1, list2] gives the permutation (in \
Images notation) that converts list1 into list2. Points in list1 or list2 can \
be repeated.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977971-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermutationFromTo", "::", "diff"}], "=", 
   "\"\<Lists`1` and `2` contain different points\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermutationFromTo", "[", 
    RowBox[{"list1_List", ",", "list2_List"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"PermProduct", "[", 
     RowBox[{
      RowBox[{"InversePerm", "@", 
       RowBox[{"Images", "@", 
        RowBox[{"Ordering", "[", "list1", "]"}]}]}], ",", 
      RowBox[{"Images", "@", 
       RowBox[{"Ordering", "[", "list2", "]"}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Sort", "[", "list1", "]"}], "===", 
     RowBox[{"Sort", "[", "list2", "]"}]}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermutationFromTo", "[", 
    RowBox[{
     RowBox[{"list1", ":", 
      RowBox[{"head_", "[", "___", "]"}]}], ",", 
     RowBox[{"list2", ":", 
      RowBox[{"head_", "[", "___", "]"}]}]}], "]"}], ":=", 
   RowBox[{"PermutationFromTo", "[", 
    RowBox[{
     RowBox[{"List", "@@", "list1"}], ",", 
     RowBox[{"List", "@@", "list2"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermutationFromTo", "[", 
    RowBox[{"list1_List", ",", "list2_List"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Throw", "[", 
     RowBox[{"Message", "[", 
      RowBox[{
       RowBox[{"PermutationFromTo", "::", "diff"}], ",", "list1", ",", 
       "list2"}], "]"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Sort", "[", "list1", "]"}], "=!=", 
     RowBox[{"Sort", "[", "list2", "]"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"PermutationFromTo", ",", "2"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "PermutationFromTo", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermutationFromTo", ",", "\[IndentingNewLine]", 
   RowBox[{"PermutationFromTo", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", 
       RowBox[{"-", "c"}], ",", "b", ",", "a", ",", "d"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "a", ",", 
       RowBox[{"-", "c"}], ",", "d", ",", "a", ",", "b"}], "}"}]}], "]"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "3", ",", "6", ",", "5", ",", "4"}], "}"}], 
    "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermutationFromTo", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermuteList", ",", "\[IndentingNewLine]", 
   RowBox[{"PermuteList", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", 
       RowBox[{"-", "c"}], ",", "b", ",", "a", ",", "d"}], "}"}], ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3", ",", "6", ",", "5", ",", "4"}], "}"}],
       "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"b", ",", "a", ",", 
     RowBox[{"-", "c"}], ",", "d", ",", "a", ",", "b"}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermuteList", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["The internal order of the repeated points is not changed:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermuteList", ",", "\[IndentingNewLine]", 
   RowBox[{"PermuteList", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a1", ",", "b1", ",", 
       RowBox[{"-", "c"}], ",", "b2", ",", "a2", ",", "d"}], "}"}], ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3", ",", "6", ",", "5", ",", "4"}], "}"}],
       "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"b1", ",", "a1", ",", 
     RowBox[{"-", "c"}], ",", "d", ",", "a2", ",", "b2"}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermuteList", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermutationFromTo", ",", "\[IndentingNewLine]", 
   RowBox[{"PermutationFromTo", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "1", ",", "3"}], "}"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermutationFromTo", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermutationFromTo", ",", "\[IndentingNewLine]", 
   RowBox[{"PermutationFromTo", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "1", ",", "3"}], "}"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermutationFromTo", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Catch", "@", 
  RowBox[{"PermutationFromTo", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "1", ",", "2"}], "}"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"$IterationLimit", "::", "itlim"}], "MessageName"], ":", 
  " ", "\<\"Iteration limit of \[NoBreak]\\!\\(4096\\)\[NoBreak] exceeded. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/$IterationLimit/itlim\\\
\", ButtonNote -> \\\"$IterationLimit::itlim\\\"]\\)\"\>"}]], "Message", \
"MSG"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"PermutationFromTo", "[", 
   RowBox[{
    RowBox[{"List", "@@", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}]}], ",", 
    RowBox[{"List", "@@", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "1", ",", "2"}], "}"}]}]}], "]"}], 
  "]"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["2.9. RandomPerm", "Subsection"],

Cell["\<\
RandomPerm gives a random permutation of given degree and notation. It is \
constructed in Perm notation and then translated. Note that the given \
permutation could have lower degree than that asked for. It would be highly \
counterintuitive to impose that the last element must be necessarily moved, \
but not the others.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RandomPerm"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"RandomPerm[deg] gives a random permutation in Perm notation. \
RandomPerm[deg, notation] constructs RandomPerm[deg] and then translates it \
to the given notation using TranslatePerm[perm, notation].\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977972-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"rand", "[", "n_", "]"}], ":=", 
   RowBox[{"Random", "[", 
    RowBox[{"Integer", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "n"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addrand", "[", "n_", "]"}], "[", 
    RowBox[{"list_List", ",", "m_"}], "]"}], ":=", 
   RowBox[{"Append", "[", 
    RowBox[{"list", ",", 
     RowBox[{
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"Range", "[", "n", "]"}], ",", "list"}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"rand", "[", "m", "]"}], "]"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RandomPerm", "[", "deg_", "]"}], ":=", 
   RowBox[{"RandomPerm", "[", 
    RowBox[{"deg", ",", "Perm"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RandomPerm", "[", 
    RowBox[{"deg_", ",", "Perm"}], "]"}], ":=", 
   RowBox[{"Perm", "[", 
    RowBox[{"Fold", "[", 
     RowBox[{
      RowBox[{"addrand", "[", "deg", "]"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"Reverse", "@", 
       RowBox[{"Range", "[", "deg", "]"}]}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RandomPerm", "[", 
    RowBox[{"deg_", ",", "notation_"}], "]"}], ":=", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"RandomPerm", "[", 
      RowBox[{"deg", ",", "Perm"}], "]"}], ",", "notation"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"RandomPerm", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "RandomPerm", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomPerm", "[", 
  RowBox[{"15", ",", "Rules"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Rules", "[", 
  RowBox[{
   RowBox[{"13", "\[Rule]", "1"}], ",", 
   RowBox[{"1", "\[Rule]", "13"}], ",", 
   RowBox[{"7", "\[Rule]", "14"}], ",", 
   RowBox[{"14", "\[Rule]", "11"}], ",", 
   RowBox[{"11", "\[Rule]", "6"}], ",", 
   RowBox[{"6", "\[Rule]", "10"}], ",", 
   RowBox[{"10", "\[Rule]", "3"}], ",", 
   RowBox[{"3", "\[Rule]", "9"}], ",", 
   RowBox[{"9", "\[Rule]", "2"}], ",", 
   RowBox[{"2", "\[Rule]", "7"}], ",", 
   RowBox[{"12", "\[Rule]", "4"}], ",", 
   RowBox[{"4", "\[Rule]", "12"}], ",", 
   RowBox[{"8", "\[Rule]", "5"}], ",", 
   RowBox[{"5", "\[Rule]", "8"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomPerm", "[", 
  RowBox[{"4", ",", 
   RowBox[{"{", 
    RowBox[{"Images", ",", "7"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Images", "[", 
  RowBox[{"{", 
   RowBox[{"4", ",", "1", ",", "2", ",", "3", ",", "5", ",", "6", ",", "7"}], 
   "}"}], "]"}]], "Output"]
}, Open  ]],

Cell["\<\
With notations Rules and Cycles and degree 1 we can only get the identity:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomPerm", "[", 
  RowBox[{"0", ",", "Rules"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Rules", "[", "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomPerm", "[", 
  RowBox[{"1", ",", "Cycles"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Cycles", "[", "]"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["2.10. PermSignature", "Subsection"],

Cell["\<\
Signature of permutation. We consider the sign as a transposition more.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermSignature", "[", 
    RowBox[{"Perm", "[", "list_List", "]"}], "]"}], ":=", 
   RowBox[{"Signature", "[", "list", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermSignature", "[", 
    RowBox[{"Images", "[", "list_List", "]"}], "]"}], ":=", 
   RowBox[{"Signature", "[", "list", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"signofcycle", "[", "cyc_List", "]"}], ":=", 
   RowBox[{"-", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "^", 
     RowBox[{"Length", "[", "cyc", "]"}]}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermSignature", "[", "perm_Cycles", "]"}], ":=", 
   RowBox[{"Apply", "[", 
    RowBox[{"Times", ",", 
     RowBox[{"signofcycle", "/@", "perm"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermSignature", "[", "perm_Rules", "]"}], ":=", 
   RowBox[{"PermSignature", "[", 
    RowBox[{"TranslatePerm", "[", 
     RowBox[{"perm", ",", "Cycles"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermSignature", "[", 
    RowBox[{"-", "perm_"}], "]"}], ":=", 
   RowBox[{"-", 
    RowBox[{"PermSignature", "[", "perm", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"PermSignature", ",", "1"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "PermSignature", "]"}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["3. Permutation Defs. Notation independent",
 FontColor->RGBColor[0, 0, 1]]], "Section",
 FontSize->24],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"**", "**", "**", "**", "**", "**", " ", "3."}], " ", 
   RowBox[{"Permutations", ".", " ", "Notation"}], " ", "independent"}], " ", 
  "*************)"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"TimeUsed", "[", "]"}], ",", 
   RowBox[{"SessionTime", "[", "]"}], ",", 
   RowBox[{
    RowBox[{"TimeUsed", "[", "]"}], "/", 
    RowBox[{"SessionTime", "[", "]"}]}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "7.051291`", ",", "26.902454`7.881336890972312", ",", 
   "0.2621067471925821`"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["3.0. Comments", "Subsection"],

Cell["\<\
This section defines all those actions on permutations whose structure is the \
same on different notations for the permutations.\
\>", "Text"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{"$ReadingVerbose", ",", 
   RowBox[{
   "Print", "[", 
    "\"\<Reading section 3: Permutations. Notation independent\>\"", "]"}], 
   ",", "Null", ",", "Null"}], "]"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["3.1. Sorting with a base", "Subsection"],

Cell["\<\
Given a set of points \[CapitalOmega], we can define inequivalent ways to \
sort them. This is very important because permutations will be sorted \
according to the order of points. Different orderings will be given using \
\"bases\": ordered subsets of \[CapitalOmega].\
\>", "Text"],

Cell["\<\
Note that we do not introduce a head Base because List is natural enough.\
\>", "Text"],

Cell["\<\
We define three different functions to work with orderings. They have \
independent codings, but they could be written in terms of just one of them:\
\>", "Text"],

Cell["\<\
1) First we define the function that sorts elements according to a given \
ordered set B. Note that points not appearing in the B list are sorted last, \
and sorted according to Sort:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SortB"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"SortB[{e1, e2, ...}, B] sorts the elements ei according to the \
canonical order defined by list B. Elements not in B are sorted last, using \
Sort.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977973-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SortB", "[", 
    RowBox[{"list_List", ",", "B_List"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"DeleteCases", "[", 
     RowBox[{"B", ",", 
      RowBox[{"Alternatives", "@@", 
       RowBox[{"Complement", "[", 
        RowBox[{"B", ",", "list"}], "]"}]}]}], "]"}], "~", "Join", "~", 
    RowBox[{"Complement", "[", 
     RowBox[{"list", ",", "B"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SortB", "[", 
    RowBox[{
     RowBox[{"list", ":", 
      RowBox[{"{", "_", "}"}]}], ",", "_"}], "]"}], ":=", "list"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SortB", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "_"}], "]"}], ":=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SortB", "[", "list_List", "]"}], ":=", 
   RowBox[{"Sort", "[", "list", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"SortB", ",", "2"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "SortB", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SortB", ",", "\[IndentingNewLine]", 
   RowBox[{"SortB", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2", ",", "3", ",", "5"}], "}"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2", ",", "5", ",", "1", ",", "6"}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SortB", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SortB", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "3", ",", "5"}], "}"}]}], "]"}], "//", 
  "Trace"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"SortB", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"6", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "2", ",", "3", ",", "5"}], "}"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"4", ",", "2", ",", "3", ",", "5"}], "}"}], ",", 
        RowBox[{"Alternatives", "@@", 
         RowBox[{"Complement", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"4", ",", "2", ",", "3", ",", "5"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"6", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}]}], 
          "]"}]}]}], "]"}], ",", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"6", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"4", ",", "2", ",", "3", ",", "5"}], "}"}]}], "]"}]}], "]"}],
    
    HoldForm], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"Complement", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"4", ",", "2", ",", "3", ",", "5"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"6", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}]}], 
           "]"}],
          HoldForm], ",", 
         TagBox[
          RowBox[{"{", "3", "}"}],
          HoldForm]}], "}"}], ",", 
       TagBox[
        RowBox[{"Alternatives", "@@", 
         RowBox[{"{", "3", "}"}]}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"Alternatives", "[", "3", "]"}],
        HoldForm]}], "}"}], ",", 
     TagBox[
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"4", ",", "2", ",", "3", ",", "5"}], "}"}], ",", 
        RowBox[{"Alternatives", "[", "3", "]"}]}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"{", 
       RowBox[{"4", ",", "2", ",", "5"}], "}"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"6", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"4", ",", "2", ",", "3", ",", "5"}], "}"}]}], "]"}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"{", 
       RowBox[{"1", ",", "6"}], "}"}],
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"4", ",", "2", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "6"}], "}"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "5", ",", "1", ",", "6"}], "}"}],
    HoldForm]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
2) This rather efficient function finds the minimum of a list with respect to \
a base:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MinB"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"MinB[list, B] gives the mininum element of list with respect \
to base B. If none of the elements of B is in list then the minimum of list \
with respect to the canonical order is returned.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977974-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MinB", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"___", ",", "p_", ",", "___"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"p_", ",", "___"}], "}"}]}], "]"}], ":=", "p"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MinB", "[", 
    RowBox[{"list_List", ",", 
     RowBox[{"{", 
      RowBox[{"_", ",", "x___"}], "}"}]}], "]"}], ":=", 
   RowBox[{"MinB", "[", 
    RowBox[{"list", ",", 
     RowBox[{"{", "x", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MinB", "[", 
    RowBox[{"list_List", ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", 
   RowBox[{"Min", "[", "list", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MinB", "[", "list_List", "]"}], ":=", 
   RowBox[{"Min", "[", "list", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"MinB", ",", "2"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "MinB", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MinB", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "3", ",", "5"}], "}"}]}], "]"}], "//", 
  "Trace"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"MinB", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"6", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "2", ",", "3", ",", "5"}], "}"}]}], "]"}],
    HoldForm], ",", 
   TagBox["4",
    HoldForm]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"MinB", ",", "\[IndentingNewLine]", 
   RowBox[{"MinB", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2", ",", "3", ",", "5"}], "}"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "4"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"MinB", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MinB", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "7"}], "}"}]}], "]"}], "//", "Trace"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"MinB", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"6", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "7"}], "}"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"MinB", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"6", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}], ",", 
      RowBox[{"{", "7", "}"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"MinB", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"6", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}], ",", 
      RowBox[{"{", "}"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"Min", "[", 
     RowBox[{"{", 
      RowBox[{"6", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}], "]"}],
    HoldForm], ",", 
   TagBox["1",
    HoldForm]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"MinB", ",", "\[IndentingNewLine]", 
   RowBox[{"MinB", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "7"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   "1"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"MinB", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SortB", ",", "\[IndentingNewLine]", 
   RowBox[{"SortB", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "7"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4", ",", "5", ",", "6"}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SortB", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
3) We assume that the base does not have repeated points. If one of the \
points is in the base but not the other, then the canonical order is having \
the former point first. If none of the points is in the base then we use \
normal lexicographical order. This function is private.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"LessB", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x_", ",", "y_", ",", "z__"}], "}"}], ",", "base_List"}], "]"}],
    ":=", 
   RowBox[{
    RowBox[{"LessB", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}], ",", "base"}], "]"}], "&&", 
    RowBox[{"LessB", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"y", ",", "z"}], "}"}], ",", "base"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"LessB", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x_", ",", "x_"}], "}"}], ",", "_List"}], "]"}], ":=", 
   "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"LessB", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x_", ",", "y_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"___", ",", "x_", ",", "___", ",", "y_", ",", "___"}], "}"}]}], 
    "]"}], ":=", "True"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"LessB", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x_", ",", "y_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"___", ",", "y_", ",", "___", ",", "x_", ",", "___"}], "}"}]}], 
    "]"}], ":=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"LessB", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x_", ",", "_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"___", ",", "x_", ",", "___"}], "}"}]}], "]"}], ":=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"LessB", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"_", ",", "x_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"___", ",", "x_", ",", "___"}], "}"}]}], "]"}], ":=", "False"}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"LessB", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x_", ",", "y_"}], "}"}], ",", "_List"}], "]"}], ":=", 
   RowBox[{"Less", "[", 
    RowBox[{"x", ",", "y"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"LessB", ",", "\[IndentingNewLine]", 
   RowBox[{"LessB", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2", ",", "3", ",", "5"}], "}"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"LessB", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"LessB", ",", "\[IndentingNewLine]", 
   RowBox[{"LessB", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2", ",", "3", ",", "5"}], "}"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "False"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"LessB", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Less", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "4"}], "}"}], "]"}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SortB", ",", "\[IndentingNewLine]", 
   RowBox[{"SortB", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2", ",", "3", ",", "5"}], "}"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2", ",", "1"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SortB", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["3.2. Sorting permutations. PermOrderedQ, PermSort", "Subsection"],

Cell[CellGroupData[{

Cell["3.2.0. Comments", "Subsubsection"],

Cell["\<\
There are two main ways of sorting permutations: using images of points or \
using the Perm notation. It turns out that using the former for a set of \
permutations is equivalent to using the latter for the set of inverses. \
PermOrderedQ returns Null when both permutations are equal (that is, they \
give same images for same points; this differs from the usual behaviour of \
OrderedQ).\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["3.2.1. PermOrderedQ and PermSort", "Subsubsection"],

Cell["\<\
Note that a linear combination of permutations would give errors because \
OnPoints is not defined on linear combinations. In PermOrderedQ head is \
needed but irrelevant. This definition means that we are sorting according to \
Images, and not Perm.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "PermOrderedQ"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"PermOrderedQ[h[perm1, perm2]] gives True if perm1 maps \
integers to smaller points than perm2. It gives False if perm1 maps integers \
to larger points than perm2. It gives Null if perm1 and perm2 maps integers \
to the same points. PermOrderedQ[h[perm1, perm2], B] gives True if perm1 maps \
the points of base B to smaller (according to B) images than perm2. It gives \
False if perm1 maps the points of B to larger (according to B) images than \
perm2. It gives Null if perm1 and perm2 map the points of B to the same \
images.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977975-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermOrderedQ", "[", 
    RowBox[{"head_", "[", 
     RowBox[{
      RowBox[{"perm1_", "/;", 
       RowBox[{
        RowBox[{"Head", "[", "perm1", "]"}], "=!=", "Times"}]}], ",", 
      RowBox[{"-", "perm2_"}]}], "]"}], "]"}], ":=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermOrderedQ", "[", 
    RowBox[{"head_", "[", 
     RowBox[{
      RowBox[{"-", "perm1_"}], ",", 
      RowBox[{"perm2_", "/;", 
       RowBox[{
        RowBox[{"Head", "[", "perm2", "]"}], "=!=", "Times"}]}]}], "]"}], 
    "]"}], ":=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermOrderedQ", "[", 
    RowBox[{"head_", "[", 
     RowBox[{
      RowBox[{"-", "perm1_"}], ",", 
      RowBox[{"-", "perm2_"}]}], "]"}], "]"}], ":=", 
   RowBox[{"PermOrderedQ", "[", 
    RowBox[{"head", "[", 
     RowBox[{"perm1", ",", "perm2"}], "]"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PermOrderedQ", "[", 
    RowBox[{"head_", "[", 
     RowBox[{"perm1_", ",", "perm2_"}], "]"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"len", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"PermLength", "@", "perm1"}], ",", 
          RowBox[{"PermLength", "@", "perm2"}]}], "]"}]}], ",", "i", ",", 
       "p1", ",", "p2"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "\[LessEqual]", "len"}], ",", 
        RowBox[{"++", "i"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"p1", "=", 
          RowBox[{"OnPoints", "[", 
           RowBox[{"i", ",", "perm1"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"p2", "=", 
          RowBox[{"OnPoints", "[", 
           RowBox[{"i", ",", "perm2"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Which", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"p1", "<", "p2"}], ",", 
           RowBox[{"Return", "[", "True", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"p1", ">", "p2"}], ",", 
           RowBox[{"Return", "[", "False", "]"}]}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "Null"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["We define a new function that depends on a base of points.", "Text"],

Cell["\<\
This is the definition given by Renato for two different permutations. It is \
not equivalent to my definition below:\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PermOrderedQ", "[", 
    RowBox[{
     RowBox[{"head_", "[", 
      RowBox[{"perm1_", ",", "perm2_"}], "]"}], ",", "base_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"deg", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"PermDeg", "@", "perm1"}], ",", 
          RowBox[{"PermDeg", "@", "perm2"}]}], "]"}]}], ",", "i", ",", "p1", 
       ",", "p2"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "\[LessEqual]", 
         RowBox[{"Length", "[", "base", "]"}]}], ",", 
        RowBox[{"++", "i"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"p1", "=", 
          RowBox[{"OnPoints", "[", 
           RowBox[{
            RowBox[{"base", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", "perm1"}], "]"}]}], ";", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{"base", ",", "p1"}], "]"}], ",", 
           RowBox[{"p1", "=", 
            RowBox[{"p1", "+", "deg"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"p2", "=", 
          RowBox[{"OnPoints", "[", 
           RowBox[{
            RowBox[{"base", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", "perm2"}], "]"}]}], ";", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{"base", ",", "p2"}], "]"}], ",", 
           RowBox[{"p2", "=", 
            RowBox[{"p2", "+", "deg"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Which", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"p1", "<", "p2"}], ",", 
           RowBox[{"Return", "[", "True", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"p1", ">", "p2"}], ",", 
           RowBox[{"Return", "[", "False", "]"}]}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "Null"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 Evaluatable->False],

Cell["\<\
(The addition of n is equivalent to our completion of the base.) The \
essential difference is that we use LessB comparisons and not the usual Less \
comparison.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PermOrderedQ", "[", 
    RowBox[{
     RowBox[{"head_", "[", 
      RowBox[{"perm1_", ",", "perm2_"}], "]"}], ",", "base_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"len", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"PermLength", "@", "perm1"}], ",", 
          RowBox[{"PermLength", "@", "perm2"}]}], "]"}]}], ",", "i", ",", "b",
        ",", "p1", ",", "p2", ",", "base2"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"base2", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"base", ",", 
         RowBox[{"Complement", "[", 
          RowBox[{
           RowBox[{"Range", "[", "len", "]"}], ",", "base"}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "\[LessEqual]", "len"}], ",", 
        RowBox[{"++", "i"}], ",", 
        RowBox[{
         RowBox[{"b", "=", 
          RowBox[{"base2", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"p1", "=", 
          RowBox[{"OnPoints", "[", 
           RowBox[{"b", ",", "perm1"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"p2", "=", 
          RowBox[{"OnPoints", "[", 
           RowBox[{"b", ",", "perm2"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Which", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"LessB", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"p1", ",", "p2"}], "}"}], ",", "base"}], "]"}], ",", 
           RowBox[{"Return", "[", "True", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"LessB", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"p2", ",", "p1"}], "}"}], ",", "base"}], "]"}], ",", 
           RowBox[{"Return", "[", "False", "]"}]}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "Null"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["Corresponding Sort function:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermSort", "[", 
    RowBox[{"head_", "[", "perms___", "]"}], "]"}], ":=", 
   RowBox[{"head", "@@", 
    RowBox[{"Sort", "[", 
     RowBox[{
      RowBox[{"{", "perms", "}"}], ",", 
      RowBox[{
       RowBox[{"PermOrderedQ", "[", 
        RowBox[{"{", 
         RowBox[{"#1", ",", "#2"}], "}"}], "]"}], "&"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermSort", "[", 
    RowBox[{
     RowBox[{"head_", "[", "perms___", "]"}], ",", "base_List"}], "]"}], ":=", 
   RowBox[{"head", "@@", 
    RowBox[{"Sort", "[", 
     RowBox[{
      RowBox[{"{", "perms", "}"}], ",", 
      RowBox[{
       RowBox[{"PermOrderedQ", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"#1", ",", "#2"}], "}"}], ",", "base"}], "]"}], "&"}]}], 
     "]"}]}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Protection:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"PermOrderedQ", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"PermSort", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", 
   RowBox[{"PermOrderedQ", ",", "PermSort"}], "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["These permutations are not sorted lexicographically:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermSort", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], ",", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "1"}], "}"}], "]"}]}], "}"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "1"}], "}"}], "]"}]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
but are sorted in such a way that their inverses are in lexicographical order:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InversePerm", "/@", "%"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "1"}], "}"}], "]"}]}], "}"}]], "Output"]
}, Open  ]],

Cell["The problem is in these two permutations:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "1", ",", "2"}], "}"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "1"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "17", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "1"}], "}"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "2"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "18", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Sorting the identity. Different forms of the identity are not sorted in a \
unique way. Compare the relative positions of Cycles[] and Perm[{}] in these \
two lists:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermSort", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], ",", "ID", ",", 
    RowBox[{"Cycles", "[", "]"}], ",", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", "}"}], "]"}], ",", "ID"}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"ID", ",", 
   RowBox[{"Cycles", "[", "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", "}"}], "]"}], ",", "ID", ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermSort", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], ",", "ID", ",", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", "}"}], "]"}], ",", 
    RowBox[{"Cycles", "[", "]"}], ",", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", "}"}], "]"}], ",", "ID"}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"ID", ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", "}"}], "]"}], ",", 
   RowBox[{"Cycles", "[", "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", "}"}], "]"}], ",", "ID", ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}]}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
3.2.2. PermEqual, PermLess, PermGreater, PermLessEqual, PermGreaterEqual\
\>", "Subsubsection"],

Cell["We generalize comparatives (not for B-sorting):", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermEqual", "[", "perms__", "]"}], ":=", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "===", "Null"}], "&"}], "/@", 
      RowBox[{"PermOrderedQ", "/@", 
       RowBox[{"Partition", "[", 
        RowBox[{
         RowBox[{"{", "perms", "}"}], ",", "2", ",", "1"}], "]"}]}]}], 
     ")"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"PermLessEqual", "[", "perms__", "]"}], ":=", 
   RowBox[{
    RowBox[{"{", "perms", "}"}], "===", 
    RowBox[{"PermSort", "[", 
     RowBox[{"{", "perms", "}"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"PermGreaterEqual", "[", "perms__", "]"}], ":=", 
   RowBox[{"PermLessEqual", "@@", 
    RowBox[{"Reverse", "[", 
     RowBox[{"{", "perms", "}"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"PermLess", "[", "perms__", "]"}], ":=", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"PermOrderedQ", "/@", 
       RowBox[{"Partition", "[", 
        RowBox[{
         RowBox[{"{", "perms", "}"}], ",", "2", ",", "1"}], "]"}]}], "/.", 
      RowBox[{"Null", "\[Rule]", "False"}]}], ")"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"PermGreater", "[", "perms__", "]"}], ":=", 
   RowBox[{"PermLess", "@@", 
    RowBox[{"Reverse", "[", 
     RowBox[{"{", "perms", "}"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Protect", "[", 
   RowBox[{
   "PermEqual", ",", "PermLess", ",", "PermGreater", ",", "PermLessEqual", 
    ",", "PermGreaterEqual"}], "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Examples:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermEqual", ",", "\[IndentingNewLine]", 
   RowBox[{"PermEqual", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermEqual", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermEqual", ",", "\[IndentingNewLine]", 
   RowBox[{"PermEqual", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", "]"}], ",", "ID"}], "]"}], ",", 
   "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermEqual", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermEqual", ",", "\[IndentingNewLine]", 
   RowBox[{"PermEqual", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermEqual", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermEqual", ",", "\[IndentingNewLine]", 
   RowBox[{"PermEqual", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermEqual", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermEqual", ",", "\[IndentingNewLine]", 
   RowBox[{"PermLess", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", "False"}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermEqual", ",", "5", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermEqual", ",", "\[IndentingNewLine]", 
   RowBox[{"PermLessEqual", "[", 
    RowBox[{"ID", ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermEqual", ",", "6", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermEqual", ",", "\[IndentingNewLine]", 
   RowBox[{"PermLess", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "1", ",", "2"}], "}"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "False"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermEqual", ",", "7", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Examples in GAP Reference, chapter 40 (the first should give True and the \
second False):\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermEqual", ",", "\[IndentingNewLine]", 
   RowBox[{"PermLess", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "2"}], "}"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermEqual", ",", "8", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermEqual", ",", "\[IndentingNewLine]", 
   RowBox[{"PermLess", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], "]"}]}], "]"}], 
   ",", "\[IndentingNewLine]", "False"}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermEqual", ",", "9", ",", "True"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["3.3. Set of generators. GenSet", "Subsection"],

Cell["\<\
Generator sets will be given as lists of permutations, with flat head GenSet. \
By convention we assume that we will never have the identity on a generator \
set, but we do not check that.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "GenSet"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"GenSet is the head for a generating set.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977976-5455693"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GenSet", "[", 
    RowBox[{"x___", ",", 
     RowBox[{"GenSet", "[", "y___", "]"}], ",", "z___"}], "]"}], ":=", 
   RowBox[{"GenSet", "[", 
    RowBox[{"x", ",", "y", ",", "z"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["\<\
GenSet extracts the generating set from a strong generating set:\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GenSet", "[", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{"_", ",", "GS_GenSet"}], "]"}], "]"}], ":=", "GS"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell["Special cases:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"Symmetric", "|", "Antisymmetric"}], ")"}], "[", 
     RowBox[{
      RowBox[{"{", "}"}], "|", 
      RowBox[{"{", "_", "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{"GenSet", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GenSet", "[", 
    RowBox[{"Symmetric", "[", "list_List", "]"}], "]"}], ":=", 
   RowBox[{"DeleteDuplicates", "@", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"Cycles", "[", 
       RowBox[{"list", "[", 
        RowBox[{"[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"Cycles", "[", "list", "]"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GenSet", "[", 
    RowBox[{"Antisymmetric", "[", "list_List", "]"}], "]"}], ":=", 
   RowBox[{"DeleteDuplicates", "@", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"Cycles", "[", 
        RowBox[{"list", "[", 
         RowBox[{"[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}], "]"}]}], ",", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"-", "1"}], ")"}], "^", 
         RowBox[{"Length", "[", "list", "]"}]}]}], 
       RowBox[{"Cycles", "[", "list", "]"}]}]}], "]"}]}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
Empty generating sets represents the group Group[ ID ] and therefore it is \
reasonable to assign them degree 0:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermDeg", "[", 
  RowBox[{"GenSet", "[", "]"}], "]"}]], "Input"],

Cell[BoxData["0"], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Protect", "[", "GenSet", "]"}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["3.4. Powers. PermPower", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "PermPower"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"PermPower[perm, n] for positive n gives the composition of n \
copies of perm. For negative n it gives the composition of n copies of \
InversePerm[perm]. For zero n it gives ID[perm].\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977977-5455693"]
}, Open  ]],

Cell["\<\
For powers of index larger than 10 we switch to a recursive algorithm, far \
more efficient than a simple listing of permutations:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermPower", "[", 
    RowBox[{"perm_", ",", "0"}], "]"}], ":=", 
   RowBox[{"ID", "[", "perm", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermPower", "[", 
    RowBox[{"perm_", ",", "1"}], "]"}], ":=", "perm"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermPower", "[", 
    RowBox[{"perm_", ",", 
     RowBox[{"n_Integer", "?", "Negative"}]}], "]"}], ":=", 
   RowBox[{"PermPower", "[", 
    RowBox[{
     RowBox[{"InversePerm", "[", "perm", "]"}], ",", 
     RowBox[{"-", "n"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermPower", "[", 
    RowBox[{"perm_", ",", 
     RowBox[{"n_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"PermProduct", "@@", 
     RowBox[{"Table", "[", 
      RowBox[{"perm", ",", 
       RowBox[{"{", "n", "}"}]}], "]"}]}], "/;", 
    RowBox[{"n", "<", "10"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermPower", "[", 
    RowBox[{"perm_", ",", 
     RowBox[{"n_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", "=", 
       RowBox[{"IntegerPart", "[", 
        RowBox[{"n", "/", "2"}], "]"}]}], "}"}], ",", 
     RowBox[{"PermProduct", "[", 
      RowBox[{
       RowBox[{"PermPower", "[", 
        RowBox[{"perm", ",", "m"}], "]"}], ",", 
       RowBox[{"PermPower", "[", 
        RowBox[{"perm", ",", 
         RowBox[{"n", "-", "m"}]}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermPower", "[", 
    RowBox[{"perm_", ",", 
     RowBox[{"n_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pp", ",", "p"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"pp", "[", 
        RowBox[{"p_", ",", "0"}], "]"}], ":=", 
       RowBox[{"IP", "[", "p", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"pp", "[", 
        RowBox[{"p_", ",", "1"}], "]"}], ":=", "p"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"pp", "[", 
        RowBox[{"p_", ",", "k_"}], "]"}], ":=", 
       RowBox[{
        RowBox[{"pp", "[", 
         RowBox[{"p", ",", "k"}], "]"}], "=", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"m", "=", 
            RowBox[{"IntegerPart", "[", 
             RowBox[{"k", "/", "2"}], "]"}]}], "}"}], ",", 
          RowBox[{"PermProduct", "[", 
           RowBox[{
            RowBox[{"pp", "[", 
             RowBox[{"p", ",", "m"}], "]"}], ",", 
            RowBox[{"pp", "[", 
             RowBox[{"p", ",", 
              RowBox[{"k", "-", "m"}]}], "]"}]}], "]"}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"pp", "[", 
       RowBox[{"perm", ",", "n"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"PermPower", ",", "2"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "PermPower", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Examples:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermPower", ",", "\[IndentingNewLine]", 
   RowBox[{"PermPower", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", "}"}], "]"}], ",", "7"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermPower", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermPower", ",", "\[IndentingNewLine]", 
   RowBox[{"PermPower", "[", 
    RowBox[{"ID", ",", "7"}], "]"}], ",", "\[IndentingNewLine]", "ID"}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermPower", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"perm", "=", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "4", ",", "3", ",", "2", ",", "1"}], "}"}], "]"}]}], 
  ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermPower", ",", "\[IndentingNewLine]", 
   RowBox[{"PermPower", "[", 
    RowBox[{"perm", ",", "0"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermPower", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["This is a permutation of order 4:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"PermPower", "[", 
   RowBox[{"perm", ",", "4"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.00006999999999999999386775251242198692`1.8656979532938807", ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"PermPower", "[", 
   RowBox[{"perm", ",", "40"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0002680000000000000090483176506950258`2.4487347073084127", ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"PermPower", "[", 
   RowBox[{"perm", ",", "4000"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00059800000000000000724420523567914643`2.797301097268035", ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"PermPower", "[", 
   RowBox[{"perm", ",", "4000000"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.00103499999999999989577781356331342977`3.0355402630725608", ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"PermPower", "[", 
   RowBox[{"perm", ",", "4567891"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.00118200000000000010787204463014177236`3.0932173898248605", ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "4", ",", "3", ",", "2", ",", "1"}], "}"}], "]"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"PermPower", "[", 
   RowBox[{"perm", ",", 
    RowBox[{"-", "4567891"}]}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00113499999999999994122756863390577564`3.075595774808766", ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "4", ",", "3", ",", "2", ",", "1"}], "}"}], "]"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["The growth is clearly not linear!", "Text"],

Cell["Note that for negative n InversePerm is used  just once.", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["3.5. Dimino algorithm. Dimino, Group", "Subsection"],

Cell["\<\
And finally, this the simple Dimino algorithm to generate a group by \
generators. MakeGroup enlarges subgroup (assumed to be generated by all but \
the last generators in GS; not checked) to the group generated by all \
generators in GS. Note that we use MemberQ and FreeQ to test for membership \
of permutations; that is only valid for {Perm,length} and {Images,length} \
notations and hence we have to change to Perm notation initially.\
\>", "Text"],

Cell["This is algorithm 3.4 of Butler.", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"cyclicGroup", "[", "perm_", "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"id", "=", 
       RowBox[{"ID", "[", "perm", "]"}]}], "}"}], ",", 
     RowBox[{"Group", "@@", 
      RowBox[{"RotateRight", "[", 
       RowBox[{"NestWhileList", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"PermProduct", "[", 
           RowBox[{"#", ",", "perm"}], "]"}], "&"}], ",", "perm", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"#", "=!=", "id"}], ")"}], "&"}]}], "]"}], "]"}]}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RightCoset", "[", 
    RowBox[{"subgroup_Group", ",", "perm_"}], "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"PermProduct", "[", 
       RowBox[{"#", ",", "perm"}], "]"}], "&"}], ",", "subgroup"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeGroup", "[", 
    RowBox[{"H_Group", ",", "gs_GenSet"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"MemberQ", "[", 
      RowBox[{"H", ",", 
       RowBox[{"Last", "[", "gs", "]"}]}], "]"}], ",", "H", ",", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ordH", "=", 
          RowBox[{"Length", "[", "H", "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"elts", "=", 
          RowBox[{"H", "~", "Join", "~", 
           RowBox[{"RightCoset", "[", 
            RowBox[{"H", ",", 
             RowBox[{"Last", "[", "gs", "]"}]}], "]"}]}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"ncoset", "=", "2"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"While", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ordH", " ", "ncoset"}], "\[LessEqual]", 
           RowBox[{"Length", "[", "elts", "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"FreeQ", "[", 
                 RowBox[{"elts", ",", "#"}], "]"}], ",", 
                RowBox[{"elts", "=", 
                 RowBox[{"elts", "~", "Join", "~", 
                  RowBox[{"RightCoset", "[", 
                   RowBox[{"H", ",", "#"}], "]"}]}]}]}], "]"}], "&"}], ",", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"PermProduct", "[", 
                 RowBox[{
                  RowBox[{"elts", "[", 
                   RowBox[{"[", 
                    RowBox[{
                    RowBox[{"ordH", " ", 
                    RowBox[{"(", 
                    RowBox[{"ncoset", "-", "1"}], ")"}]}], "+", "1"}], "]"}], 
                   "]"}], ",", "#"}], "]"}], "&"}], ",", "gs"}], "]"}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"++", "ncoset"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", "elts"}]}], "]"}]}], "]"}]}], ";"}]}], "Input",
 
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Dimino"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"Dimino[GenSet[perm1, ...]] gives the group generated by \
permutations permi, using Dimino's algorithm.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977978-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Dimino", "[", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{"base_", ",", "GS_GenSet"}], "]"}], "]"}], ":=", 
   RowBox[{"Dimino", "[", "GS", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Dimino", "[", "GS_GenSet", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"GSPerm", "=", 
       RowBox[{"TranslatePerm", "[", 
        RowBox[{"GS", ",", 
         RowBox[{"{", 
          RowBox[{"Perm", ",", 
           RowBox[{"PermDeg", "[", "GS", "]"}]}], "}"}]}], "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"TranslatePerm", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Fold", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"MakeGroup", "[", 
           RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"cyclicGroup", "[", 
          RowBox[{"First", "[", "GSPerm", "]"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Rest", "[", 
          RowBox[{"FoldList", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Append", "[", 
              RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
            RowBox[{"GenSet", "[", 
             RowBox[{"First", "[", "GSPerm", "]"}], "]"}], ",", 
            RowBox[{"List", "@@", 
             RowBox[{"Rest", "[", "GSPerm", "]"}]}]}], "]"}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], ",", 
       RowBox[{"NotationOfPerm", "[", "GS", "]"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Dimino", "[", 
    RowBox[{"GenSet", "[", "]"}], "]"}], ":=", 
   RowBox[{"Group", "[", "ID", "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Dimino", "[", 
    RowBox[{"Symmetric", "[", "list_", "]"}], "]"}], ":=", 
   RowBox[{"Group", "@@", 
    RowBox[{"(", 
     RowBox[{"Images", "/@", 
      RowBox[{"Permutations", "[", "list", "]"}]}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Dimino", "[", 
    RowBox[{"Antisymmetric", "[", "list_", "]"}], "]"}], ":=", 
   RowBox[{"Group", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Signature", "[", "#", "]"}], 
         RowBox[{"Images", "[", "#", "]"}]}], ")"}], "&"}], "/@", 
      RowBox[{"Permutations", "[", "list", "]"}]}], ")"}]}]}], 
  ";"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"Dimino", ",", "1"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", 
   RowBox[{"Dimino", ",", "Group"}], "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Examples:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Dimino", ",", "\[IndentingNewLine]", 
   RowBox[{"Dimino", "[", 
    RowBox[{"GenSet", "[", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Group", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Dimino", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Dimino", ",", "\[IndentingNewLine]", 
   RowBox[{"Dimino", "[", 
    RowBox[{"GenSet", "[", 
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}]}], "]"}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Group", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}]}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}]}]}], 
    "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Dimino", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Dimino", ",", "\[IndentingNewLine]", 
   RowBox[{"Dimino", "[", 
    RowBox[{"GenSet", "[", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}], "]"}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Group", "[", 
    RowBox[{
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Dimino", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Dimino", ",", "\[IndentingNewLine]", 
   RowBox[{"Dimino", "[", 
    RowBox[{"GenSet", "[", 
     RowBox[{"Rules", "[", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", 
       RowBox[{"2", "\[Rule]", "3"}], ",", 
       RowBox[{"3", "\[Rule]", "4"}], ",", 
       RowBox[{"4", "\[Rule]", "1"}]}], "]"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Group", "[", 
    RowBox[{
     RowBox[{"Rules", "[", "]"}], ",", 
     RowBox[{"Rules", "[", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "3"}], ",", 
       RowBox[{"3", "\[Rule]", "4"}], ",", 
       RowBox[{"4", "\[Rule]", "1"}], ",", 
       RowBox[{"1", "\[Rule]", "2"}]}], "]"}], ",", 
     RowBox[{"Rules", "[", 
      RowBox[{
       RowBox[{"3", "\[Rule]", "1"}], ",", 
       RowBox[{"1", "\[Rule]", "3"}], ",", 
       RowBox[{"4", "\[Rule]", "2"}], ",", 
       RowBox[{"2", "\[Rule]", "4"}]}], "]"}], ",", 
     RowBox[{"Rules", "[", 
      RowBox[{
       RowBox[{"4", "\[Rule]", "3"}], ",", 
       RowBox[{"3", "\[Rule]", "2"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}], ",", 
       RowBox[{"1", "\[Rule]", "4"}]}], "]"}]}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Dimino", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimino", "[", 
  RowBox[{"GenSet", "[", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], "]"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Group", "[", 
  RowBox[{
   RowBox[{"Cycles", "[", "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2"}], "}"}]}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "2", ",", "1"}], "}"}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell["\<\
Permutations in Cycles notation are not being returned sorted. Can we avoid \
that?\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"Sort", "[", 
    RowBox[{"Dimino", "[", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}]}], "]"}], 
     "]"}], "]"}], "===", 
   RowBox[{"Group", "@@", 
    RowBox[{"Sort", "[", 
     RowBox[{"Perm", "/@", 
      RowBox[{"Permutations", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], 
     "]"}]}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.00118599999999999998825939151458896959`3.094684602307868", ",", "True"}],
   "}"}]], "Output"]
}, Open  ]],

Cell["Recall that", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"5", "!"}], ",", 
   RowBox[{"6", "!"}], ",", 
   RowBox[{"7", "!"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"120", ",", "720", ",", "5040"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Length", "@", 
   RowBox[{"Dimino", "[", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"5", ",", "1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], 
      ",", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}]}],
      "]"}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.00673499999999999966748820412476561614`3.8489375133386283", ",", "120"}],
   "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Length", "@", 
   RowBox[{"Dimino", "[", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"6", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
        "}"}], "]"}], ",", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5", ",", "6"}], 
        "}"}], "]"}]}], "]"}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.12335999999999999743316436706663807854`5.111774273986505", ",", "720"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Length", "@", 
   RowBox[{"Dimino", "[", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{
        "7", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
        "}"}], "]"}], ",", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], "]"}]}], "]"}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "5.26540900000000000602540239924564957619`6.742032024706959", ",", "5040"}],
   "}"}]], "Output"]
}, Open  ]],

Cell["This is quite slow now... Compare with", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Length", "@", 
   RowBox[{"Permutations", "[", 
    RowBox[{"Range", "[", "7", "]"}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.00019599999999999999367172875963660772`2.3128559846361", ",", "5040"}], 
  "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["3.6. Stabilization I", "Subsection"],

Cell[CellGroupData[{

Cell["3.6.1. StablePoints", "Subsubsection"],

Cell["\<\
This function gives the points between 1 and n which remain at place under \
the permutation p, or under a generating set of permutations\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "StablePoints"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"StablePoints[perm, n] gives the points in {1, ..., n} that are \
fixed by permutation perm. StablePoints[GS, n] gives the points in {1, ..., \
n} that are fixed by all permutations in GS.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977985-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"StablePoints", "[", "perm_", "]"}], ":=", 
   RowBox[{"StablePoints", "[", 
    RowBox[{"perm", ",", 
     RowBox[{"PermLength", "[", "perm", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StablePoints", "[", 
    RowBox[{
     RowBox[{"perm_", "?", "PermQ"}], ",", "n_Integer"}], "]"}], ":=", 
   RowBox[{"Cases", "[", 
    RowBox[{
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Range", "[", "n", "]"}], ",", 
        RowBox[{"OnPoints", "[", 
         RowBox[{
          RowBox[{"Range", "[", "n", "]"}], ",", "perm"}], "]"}]}], "}"}], 
      "]"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x_", ",", "x_"}], "}"}], "\[Rule]", "x"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StablePoints", "[", 
    RowBox[{
     RowBox[{"GS", ":", 
      RowBox[{"GenSet", "[", "__", "]"}]}], ",", "n_Integer"}], "]"}], ":=", 
   RowBox[{"Intersection", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"StablePoints", "[", 
        RowBox[{"#", ",", "n"}], "]"}], "&"}], "/@", "GS"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StablePoints", "[", 
    RowBox[{
     RowBox[{"GenSet", "[", "]"}], ",", "n_Integer"}], "]"}], ":=", 
   RowBox[{"Range", "[", "n", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"StablePoints", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "StablePoints", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"StablePoints", ",", "\[IndentingNewLine]", 
   RowBox[{"StablePoints", "[", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{
      "3", ",", "2", ",", "1", ",", "4", ",", "7", ",", "5", ",", "6"}], 
      "}"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"StablePoints", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"StablePoints", ",", "\[IndentingNewLine]", 
   RowBox[{"StablePoints", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{
       "3", ",", "2", ",", "1", ",", "4", ",", "7", ",", "5", ",", "6"}], 
       "}"}], "]"}], ",", "8"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "8"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"StablePoints", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"StablePoints", ",", "\[IndentingNewLine]", 
   RowBox[{"StablePoints", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], "]"}], ",", "4"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"StablePoints", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"StablePoints", ",", "\[IndentingNewLine]", 
   RowBox[{"StablePoints", "[", 
    RowBox[{"ID", ",", "0"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", "}"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"StablePoints", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"StablePoints", ",", "\[IndentingNewLine]", 
   RowBox[{"StablePoints", "[", 
    RowBox[{"ID", ",", "8"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
     "8"}], "}"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"StablePoints", ",", "5", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"StablePoints", ",", "\[IndentingNewLine]", 
   RowBox[{"StablePoints", "[", 
    RowBox[{
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "5", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "4", ",", "5", ",", "3"}], "}"}], 
        "]"}]}], "]"}], ",", "6"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "6"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"StablePoints", ",", "6", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"StablePoints", ",", "\[IndentingNewLine]", 
   RowBox[{"StablePoints", "[", 
    RowBox[{
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "5", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "4", ",", "5", ",", "3"}], "}"}], 
        "]"}]}], "]"}], ",", "5"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"StablePoints", ",", "7", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"StablePoints", ",", "\[IndentingNewLine]", 
   RowBox[{"StablePoints", "[", 
    RowBox[{
     RowBox[{"GenSet", "[", "]"}], ",", "5"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"StablePoints", ",", "8", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"StablePoints", ",", "\[IndentingNewLine]", 
   RowBox[{"StablePoints", "[", 
    RowBox[{
     RowBox[{"GenSet", "[", "]"}], ",", "0"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", "}"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"StablePoints", ",", "9", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"alltests", "[", "StablePoints", "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["3.6.2. NonStablePoints", "Subsubsection"],

Cell["\<\
This function gives the minimal number of points (trying to minimize them as \
well), including initB, such that none of the generators GS fixes all of them.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "NonStablePoints"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"NonStablePoints[list, GS] enlarges list until none of the \
permutations in GS fixes all points in list. It tries to give the shortest \
result possible, not necessarily ordered.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977986-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"NonStablePoints", "[", 
   RowBox[{"initB_List", ",", 
    RowBox[{"GenSet", "[", "]"}]}], "]"}], ":=", 
  "initB"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NonStablePoints", "[", 
    RowBox[{"initB_List", ",", 
     RowBox[{"GS", ":", 
      RowBox[{"GenSet", "[", "__", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"SubsetQ", ",", "stablepoints", ",", 
       RowBox[{"base", "=", "initB"}], ",", "candidates", ",", "check", ",", 
       RowBox[{"len", "=", 
        RowBox[{"PermLength", "[", "GS", "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"SubsetQ", "[", 
        RowBox[{"large_List", ",", "small_List"}], "]"}], ":=", 
       RowBox[{"And", "@@", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"large", ",", "#"}], "]"}], "&"}], ")"}], "/@", 
         "small"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"stablepoints", "=", 
       RowBox[{"List", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"StablePoints", "[", 
            RowBox[{"#", ",", "len"}], "]"}], "&"}], "/@", "GS"}], ")"}]}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"candidates", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"Complement", "[", 
              RowBox[{
               RowBox[{"Range", "[", "len", "]"}], ",", "#"}], "]"}], ",", 
             "#"}], "]"}], "&"}], "@", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Union", "/@", 
            RowBox[{"Sort", "@", 
             RowBox[{"Split", "@", 
              RowBox[{"Sort", "@", 
               RowBox[{"Flatten", "@", "stablepoints"}]}]}]}]}], "]"}]}], ",", 
         RowBox[{"Alternatives", "@@", 
          RowBox[{"Intersection", "@@", "stablepoints"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{"True", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"candidates", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{"candidates", ",", 
            RowBox[{"Alternatives", "@@", "base"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"check", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"SubsetQ", "[", 
             RowBox[{"#", ",", "base"}], "]"}], "&"}], "/@", 
           "stablepoints"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Which", "[", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Correct", " ", 
            RowBox[{"base", ".", " ", "Break"}], " ", "while", " ", "loop"}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Not", "[", 
            RowBox[{"Or", "@@", "check"}], "]"}], ",", 
           RowBox[{"Break", "[", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"No", " ", "candidate", " ", 
             RowBox[{"elements", ".", " ", "Throw"}], " ", "error"}], " ", 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{"candidates", "===", 
            RowBox[{"{", "}"}]}], ",", 
           RowBox[{
           "Throw", "[", "\"\<Unable to find enough nonstable points.\>\"", 
            "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"Incorrect", " ", 
             RowBox[{"base", ".", " ", "Add"}], " ", "new", " ", "point"}], 
            " ", "*)"}], "\[IndentingNewLine]", "True", ",", 
           RowBox[{"For", " ", "[", 
            RowBox[{
             RowBox[{"i", "=", "1"}], ",", 
             RowBox[{"i", "\[LessEqual]", 
              RowBox[{"Length", "[", "check", "]"}]}], ",", 
             RowBox[{"++", "i"}], ",", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"check", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", 
               RowBox[{
                RowBox[{"AppendTo", "[", 
                 RowBox[{"base", ",", 
                  RowBox[{"First", "[", 
                   RowBox[{"Cases", "[", 
                    RowBox[{"candidates", ",", 
                    RowBox[{"x_", "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"stablepoints", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "x"}], "]"}]}]}], 
                    "]"}], "]"}]}], "]"}], ";", 
                RowBox[{"Break", "[", "]"}]}]}], "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", "base"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"NonStablePoints", ",", "2"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "NonStablePoints", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NonStablePoints", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"GenSet", "[", "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output"]
}, Open  ]],

Cell["From example 4 below:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"a", "=", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "8", ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "11", ",", "15"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "10", ",", "12"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "14", ",", "19"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "16", ",", "17"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "21", ",", "20"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "13", ",", "18"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "18", ",", "20"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"12", ",", "19", ",", "17"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"c", "=", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "21", ",", "11"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", "16", ",", "14"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"NonStablePoints", ",", "\[IndentingNewLine]", 
   RowBox[{"NonStablePoints", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10"}], "}"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"NonStablePoints", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"NonStablePoints", ",", "\[IndentingNewLine]", 
   RowBox[{"NonStablePoints", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{"b", ",", "c", ",", "a"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10"}], "}"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"NonStablePoints", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"NonStablePoints", ",", "\[IndentingNewLine]", 
   RowBox[{"NonStablePoints", "[", 
    RowBox[{
     RowBox[{"{", "3", "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "9", ",", "10"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"NonStablePoints", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"NonStablePoints", ",", "\[IndentingNewLine]", 
   RowBox[{"NonStablePoints", "[", 
    RowBox[{
     RowBox[{"{", "9", "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10"}], "}"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"NonStablePoints", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["3.6.3. Pointwise stabilization: Stabilizer", "Subsubsection"],

Cell["\<\
This function gives the subset of permutations that leave stable the set of \
points. Note that when there is no stabilizing permutation we return \
GenSet[], and not the identity permutation, if it was not in GS.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Stabilizer"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"Stabilizer[{p1, ...}, GS] gives the subset of permutations in \
GS that fix all points pi. Stabilizer[{p1, ...}, SGS] returns a strong \
generating set for the stabilizer subgroup of the group SGS fixing all points \
pi. In this latter case a third argument can be given with the length of the \
internal Schreier vectors.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977986-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Stabilizer", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "GS_GenSet"}], "]"}], ":=", "GS"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Stabilizer", "[", 
    RowBox[{
     RowBox[{"{", "p_Integer", "}"}], ",", "GS_GenSet"}], "]"}], ":=", 
   RowBox[{"GenSet", "@@", 
    RowBox[{"Cases", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"p", ",", 
          RowBox[{"OnPoints", "[", 
           RowBox[{"p", ",", "#"}], "]"}], ",", "#"}], "}"}], "&"}], "/@", 
       "GS"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x_", ",", "x_", ",", "y_"}], "}"}], "\[Rule]", "y"}]}], 
     "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Stabilizer", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"p1_Integer", ",", "ps__Integer"}], "}"}], ",", "GS_GenSet"}], 
    "]"}], ":=", 
   RowBox[{"Stabilizer", "[", 
    RowBox[{
     RowBox[{"{", "ps", "}"}], ",", 
     RowBox[{"Stabilizer", "[", 
      RowBox[{
       RowBox[{"{", "p1", "}"}], ",", "GS"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Stabilizer", "[", 
    RowBox[{"ps_List", ",", 
     RowBox[{"Symmetric", "[", "list_", "]"}]}], "]"}], ":=", 
   RowBox[{"Symmetric", "[", 
    RowBox[{"Complement", "[", 
     RowBox[{"list", ",", "ps"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Stabilizer", "[", 
    RowBox[{"ps_List", ",", 
     RowBox[{"Antisymmetric", "[", "list_", "]"}]}], "]"}], ":=", 
   RowBox[{"Antisymmetric", "[", 
    RowBox[{"Complement", "[", 
     RowBox[{"list", ",", "ps"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"Stabilizer", ",", "2"}], "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
The function is not protected because it will be overloaded below with \
definitions on SGSs.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Stabilizer", "[", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{
       "3", ",", "2", ",", "1", ",", "4", ",", "7", ",", "5", ",", "6"}], 
       "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "2", ",", "4", ",", "3", ",", "6", ",", "5", ",", "7"}], 
       "}"}], "]"}]}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"GenSet", "[", 
  RowBox[{"Perm", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "6", ",", "5", ",", "7"}],
     "}"}], "]"}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Stabilizer", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{
       "3", ",", "2", ",", "1", ",", "4", ",", "7", ",", "5", ",", "6"}], 
       "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "2", ",", "4", ",", "3", ",", "6", ",", "5", ",", "7"}], 
       "}"}], "]"}]}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"GenSet", "[", "]"}]], "Output"]
}, Open  ]],

Cell["\<\
Remember that an empty generating set actually represents the Group[ ID ].\
\>", "Text"],

Cell["\<\
There is an important point to consider: The stabilizer of the generating set \
of a group is not necessarily a generating set of the stabilizer subgroup. \
For example\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Stabilizer", "[", 
  RowBox[{
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "2"}], "}"}], "]"}]}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"GenSet", "[", "]"}]], "Output"]
}, Open  ]],

Cell["\<\
and not GenSet[Perm[{3,2,1}]]. This problem will be solved below using strong \
generating sets.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["3.6.4. Set stabilization: SetStabilizer", "Subsubsection"],

Cell["\<\
Now we do not require that all points in a given list are stable under the \
stabilizer. We just require that those points do not leave the list.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SetStabilizer"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"SetStabilizer[{p1, ...}, GS] gives the subset of permutations \
in GS that keep the points pi inside the list. SetStabilizer[{p1, ...}, SGS] \
returns a strong generating set for the setwise stabilizer of the list of \
points pi under the group generated by the strong generating set SGS.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977987-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SetStabilizer", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "GS_GenSet"}], "]"}], ":=", "GS"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SetStabilizer", "[", 
    RowBox[{
     RowBox[{"{", "p_Integer", "}"}], ",", "GS_GenSet"}], "]"}], ":=", 
   RowBox[{"Stabilizer", "[", 
    RowBox[{
     RowBox[{"{", "p", "}"}], ",", "GS"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SetStabilizer", "[", 
    RowBox[{"list_List", ",", "GS_GenSet"}], "]"}], ":=", 
   RowBox[{"setstabilizer", "[", 
    RowBox[{"list", ",", "GS", ",", 
     RowBox[{"GenSet", "[", "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setstabilizer", "[", 
    RowBox[{"list_List", ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{"perm1_", ",", "perms___"}], "]"}], ",", 
     RowBox[{"GenSet", "[", "stperms___", "]"}]}], "]"}], ":=", 
   RowBox[{"setstabilizer", "[", 
    RowBox[{"list", ",", 
     RowBox[{"GenSet", "[", "perms", "]"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Complement", "[", 
         RowBox[{
          RowBox[{"OnPoints", "[", 
           RowBox[{"list", ",", "perm1"}], "]"}], ",", "list"}], "]"}], "===", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"stperms", ",", "perm1"}], "]"}], ",", 
       RowBox[{"GenSet", "[", "stperms", "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setstabilizer", "[", 
    RowBox[{"list_List", ",", 
     RowBox[{"GenSet", "[", "]"}], ",", "stableGS_"}], "]"}], ":=", 
   "stableGS"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
The function is not protected because it will be overloaded below with \
definitions on SGSs.\
\>", "Text"],

Cell["\<\
Using the group S3 we see the difference between pointwise stabilization and \
setwise stabilization:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GenSet", "@@", 
  RowBox[{"Dimino", "[", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}]}], "]"}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"GenSet", "[", 
  RowBox[{
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2"}], "}"}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Stabilizer", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", "%"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"GenSet", "[", 
  RowBox[{"Perm", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetStabilizer", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", "%%"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"GenSet", "[", 
  RowBox[{
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "3"}], "}"}], "]"}]}], "]"}]], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["4. Strong generating sets",
 FontColor->RGBColor[0, 0, 1]]], "Section",
 FontSize->24],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"**", "**", "**", "**", "**", "**", "**", " ", "4."}], " ", 
   "Strong", " ", "generating", " ", "sets"}], " ", 
  "***************)"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"TimeUsed", "[", "]"}], ",", 
   RowBox[{"SessionTime", "[", "]"}], ",", 
   RowBox[{
    RowBox[{"TimeUsed", "[", "]"}], "/", 
    RowBox[{"SessionTime", "[", "]"}]}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "13.401436000000002`", ",", "41.574118`8.070368037874692", ",", 
   "0.3223510025846834`"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["4.0. Comments", "Subsection"],

Cell["\<\
The fast manipulation of permutation groups is based on the combination of \
two \"complementary\" ideas: orbits (the description of how points move under \
the group) and stabilization (the description of how points don't move under \
the group). A strong generating sets (SGS) is a clever description of a group \
which allows efficient encoding of both simultaneously.\
\>", "Text"],

Cell[TextData[{
 "From now on most algorithms are encoded using an imperative paradigm (like \
C), to follow Butler as closely as possible, though this is rather \
inefficient in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". It really doesn't matter because in the end we will recode the whole \
thing in C, much faster, where the imperative paradigm is natural. Therefore \
this ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " code can be considered as a testbed for new ideas and algorithms. Once \
they work here then they are transferred to the C code."
}], "Text"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{"$ReadingVerbose", ",", 
   RowBox[{
   "Print", "[", "\"\<Reading section 4: Strong generating sets\>\"", "]"}], 
   ",", "Null", ",", "Null"}], "]"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["4.1. Orbits and Schreier vectors", "Subsection"],

Cell[CellGroupData[{

Cell["4.1.0. Comments", "Subsubsection"],

Cell["\<\
An orbit is an irreducible set of points closed under OnPoints. Given a group \
of permutations and a point of the orbit this is a well defined concept, \
independent of the notation used for the permutations. However, when we want \
to find all orbits we need to know in advance the length of the set of \
points, because we want to partition it in orbits. In the same way, in order \
to give a Schreier vector we need to know the length of the set to construct \
vectors of that length. That is why Orbit does not have a length argument, \
but Orbits, SchreierOrbit and SchreierOrbits do have it.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["4.1.1. Orbit", "Subsubsection"],

Cell["\<\
Orbit and Orbits give the orbits without their Schreier vectors.When no \
generators are given it means that we are calculating the orbit of a point \
under the group {ID}. Points in the orbits are not sorted and the initial \
point is used as first point.\
\>", "Text"],

Cell["This is algorithm 7.1 of Butler:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Orbit"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"Orbit[p, GS] gives the orbit of point p under the group \
generated by GS. The orbit is given as a (not necessarily ordered) list \
having p as first point.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977988-5455693"]
}, Open  ]],

Cell["Orbit is simply a driver for the Mathematica or the C codes:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Driver", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "Orbit", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{"MathLink", "\[RuleDelayed]", "$xpermQ"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Orbit", "[", 
      RowBox[{
       RowBox[{"point_Integer", "?", "Positive"}], ",", 
       RowBox[{"StrongGenSet", "[", 
        RowBox[{"base_", ",", "GS_"}], "]"}], ",", "options___"}], "]"}], ":=", 
     RowBox[{"Orbit", "[", 
      RowBox[{"point", ",", "GS", ",", "options"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Orbit", "[", 
      RowBox[{
       RowBox[{"point_Integer", "?", "Positive"}], ",", 
       RowBox[{"GenSet", "[", "]"}], ",", "options___"}], "]"}], ":=", 
     RowBox[{"{", "point", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Orbit", "[", 
      RowBox[{
       RowBox[{"point_Integer", "?", "Positive"}], ",", "GS_GenSet", ",", 
       RowBox[{"options", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "MathLink", "]"}], ",", "MathLinkOrbit", 
        ",", "MathOrbit"}], "]"}], "[", 
      RowBox[{"point", ",", "GS"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Orbit", "[", 
      RowBox[{
       RowBox[{"point_Integer", "?", "Positive"}], ",", "GS_"}], "]"}], ":=", 
     
     RowBox[{"Throw", "@", 
      RowBox[{"Message", "[", 
       RowBox[{
        RowBox[{"Orbit", "::", "unknown"}], ",", "\"\<generating set\>\"", 
        ",", "GS"}], "]"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Orbit", "[", 
      RowBox[{"point_", ",", "GS_"}], "]"}], ":=", 
     RowBox[{"Throw", "@", 
      RowBox[{"Message", "[", 
       RowBox[{
        RowBox[{"Orbit", "::", "unknown"}], ",", "\"\<point\>\"", ",", 
        "point"}], "]"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"SetNumberOfArguments", "[", 
     RowBox[{"Orbit", ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "Infinity"}], "}"}]}], "]"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"Protect", "[", "Orbit", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Mathematica", " ", "code"}], " ", "*)"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{
     RowBox[{"MathOrbit", "[", 
      RowBox[{"point_", ",", "GS_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"orbit", "=", 
          RowBox[{"{", "point", "}"}]}], ",", 
         RowBox[{"np", "=", "1"}], ",", "gamma", ",", "newgamma"}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"While", "[", 
         RowBox[{
          RowBox[{"np", "\[LessEqual]", 
           RowBox[{"Length", "[", "orbit", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"gamma", "=", 
            RowBox[{"orbit", "[", 
             RowBox[{"[", "np", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"FreeQ", "[", 
                 RowBox[{"orbit", ",", 
                  RowBox[{"newgamma", "=", 
                   RowBox[{"OnPoints", "[", 
                    RowBox[{"gamma", ",", "#"}], "]"}]}]}], "]"}], ",", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"orbit", ",", "newgamma"}], "]"}]}], "]"}], "&"}], 
             ",", "GS"}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"++", "np"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
        "orbit"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}]}]], "Input",
 InitializationCell->True],

Cell["Examples:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"$xpermQ", "=", "False"}]], "Input"],

Cell[BoxData["False"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Orbit", ",", "\[IndentingNewLine]", 
   RowBox[{"Orbit", "[", 
    RowBox[{"1", ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}], "]"}]}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Orbit", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Orbit", ",", "\[IndentingNewLine]", 
   RowBox[{"Orbit", "[", 
    RowBox[{"5", ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", 
         RowBox[{"2", "\[Rule]", "1"}]}], "]"}], ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "5"}], ",", 
         RowBox[{"5", "\[Rule]", "4"}]}], "]"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"5", ",", "4"}], "}"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Orbit", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["4.1.2. Orbits", "Subsubsection"],

Cell["\<\
In order to give all orbits we need to give the length of the set of points \
to partition:\
\>", "Text"],

Cell["This is algorithm 7.2 of Butler:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Orbits"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"Orbits[GS, len] gives a list with all orbits of the group \
generated by permutations in GS, a partition of Range[len]. Orbits[GS, len, \
list] makes points in list to be the first points of the orbits. Orbits[GS] \
and Orbits[GS, list] compute len from GS using PermLength. GS can be a \
generating set (head GenSet) or a strong generating set (head \
StrongGenSet).\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977989-5455693"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Compute", " ", "PermLength", " ", "if", " ", "not", " ", "given"}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Orbits", "[", 
      RowBox[{"gs_", ",", 
       RowBox[{"initpoints_List:", 
        RowBox[{"{", "}"}]}]}], "]"}], ":=", 
     RowBox[{"Orbits", "[", 
      RowBox[{"gs", ",", 
       RowBox[{"PermLength", "[", "gs", "]"}], ",", "initpoints"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Transform", " ", "SGS", " ", "to", " ", "GS"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Orbits", "[", 
      RowBox[{
       RowBox[{"StrongGenSet", "[", 
        RowBox[{"base_", ",", "GS_"}], "]"}], ",", "len_Integer", ",", 
       RowBox[{"initpoints_List:", 
        RowBox[{"{", "}"}]}]}], "]"}], ":=", 
     RowBox[{"Orbits", "[", 
      RowBox[{"GS", ",", "len", ",", "initpoints"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Compute", " ", "orbits", " ", "using", " ", "Orbit"}], " ", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Orbits", "[", 
      RowBox[{"GS_GenSet", ",", "len_Integer", ",", 
       RowBox[{"initpoints_List:", 
        RowBox[{"{", "}"}]}]}], "]"}], ":=", 
     RowBox[{"Fold", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{
            RowBox[{"Flatten", "[", "#1", "]"}], ",", "#2"}], "]"}], ",", 
          "#1", ",", 
          RowBox[{"Append", "[", 
           RowBox[{"#1", ",", 
            RowBox[{"Orbit", "[", 
             RowBox[{"#2", ",", "GS"}], "]"}]}], "]"}]}], "]"}], "&"}], ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"initpoints", "~", "Join", "~", 
        RowBox[{"Complement", "[", 
         RowBox[{
          RowBox[{"Range", "[", "len", "]"}], ",", "initpoints"}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Special", " ", "cases"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Orbits", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Symmetric", "|", "Antisymmetric"}], ")"}], "[", "list_List",
         "]"}], ",", "len_Integer"}], "]"}], ":=", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"{", "list", "}"}], ",", 
       RowBox[{"List", "/@", 
        RowBox[{"Complement", "[", 
         RowBox[{
          RowBox[{"Range", "[", "len", "]"}], ",", "list"}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Orbits", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Symmetric", "|", "Antisymmetric"}], ")"}], "[", "list_List",
         "]"}], ",", "len_Integer", ",", "initpoints_List"}], "]"}], ":=", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"SortB", "[", 
         RowBox[{"list", ",", "initpoints"}], "]"}], "}"}], ",", 
       RowBox[{"List", "/@", 
        RowBox[{"Complement", "[", 
         RowBox[{
          RowBox[{"Range", "[", "len", "]"}], ",", "list"}], "]"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SetNumberOfArguments", "[", 
     RowBox[{"Orbits", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{"Protect", "[", "Orbits", "]"}], ";"}]}]}]], "Input",
 InitializationCell->True],

Cell["\<\
Recall that points in the orbits are not reordered after computation (we \
shall do that, however, when computing SchreierOrbit).\
\>", "Text"],

Cell["Examples:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Orbits", ",", "\[IndentingNewLine]", 
   RowBox[{"Orbits", "[", 
    RowBox[{
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", 
         RowBox[{"2", "\[Rule]", "1"}]}], "]"}], ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "5"}], ",", 
         RowBox[{"5", "\[Rule]", "4"}]}], "]"}]}], "]"}], ",", "6"}], "]"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", "3", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", "6", "}"}]}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Orbits", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Orbits", ",", "\[IndentingNewLine]", 
   RowBox[{"Orbits", "[", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"Rules", "[", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "2"}], ",", 
        RowBox[{"2", "\[Rule]", "1"}]}], "]"}], ",", 
      RowBox[{"Rules", "[", 
       RowBox[{
        RowBox[{"4", "\[Rule]", "5"}], ",", 
        RowBox[{"5", "\[Rule]", "4"}]}], "]"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", "3", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}]}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Orbits", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Orbits", ",", "\[IndentingNewLine]", 
   RowBox[{"Orbits", "[", 
    RowBox[{
     RowBox[{"GenSet", "[", "]"}], ",", "5"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", "2", "}"}], ",", 
     RowBox[{"{", "3", "}"}], ",", 
     RowBox[{"{", "4", "}"}], ",", 
     RowBox[{"{", "5", "}"}]}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Orbits", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Orbits", ",", "\[IndentingNewLine]", 
   RowBox[{"Orbits", "[", 
    RowBox[{
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", 
         RowBox[{"2", "\[Rule]", "1"}]}], "]"}], ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "5"}], ",", 
         RowBox[{"5", "\[Rule]", "4"}]}], "]"}]}], "]"}], ",", "6", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "5"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "4"}], "}"}], ",", 
     RowBox[{"{", "3", "}"}], ",", 
     RowBox[{"{", "6", "}"}]}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Orbits", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Orbits", ",", "\[IndentingNewLine]", 
   RowBox[{"Orbits", "[", 
    RowBox[{
     RowBox[{"Symmetric", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "5"}], "}"}], "]"}], ",", "6"}], "]"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "5"}], "}"}], ",", 
     RowBox[{"{", "2", "}"}], ",", 
     RowBox[{"{", "4", "}"}], ",", 
     RowBox[{"{", "6", "}"}]}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Orbits", ",", "5", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Orbits", ",", "\[IndentingNewLine]", 
   RowBox[{"Orbits", "[", 
    RowBox[{
     RowBox[{"Antisymmetric", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "5"}], "}"}], "]"}], ",", "6", ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "3"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "3", ",", "1"}], "}"}], ",", 
     RowBox[{"{", "2", "}"}], ",", 
     RowBox[{"{", "4", "}"}], ",", 
     RowBox[{"{", "6", "}"}]}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Orbits", ",", "6", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
If the given length is too low then we can miss some of the orbits (we are \
asking to partition {1,2,3} only):\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Orbits", ",", "\[IndentingNewLine]", 
   RowBox[{"Orbits", "[", 
    RowBox[{
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", 
         RowBox[{"2", "\[Rule]", "1"}]}], "]"}], ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "5"}], ",", 
         RowBox[{"5", "\[Rule]", "4"}]}], "]"}]}], "]"}], ",", "3", ",", 
     RowBox[{"{", "2", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", "3", "}"}]}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Orbits", ",", "7", ",", "True"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["4.1.3. SchreierOrbit", "Subsubsection"],

Cell["\<\
We need to give the lenght of nu, w. When we supply a SGS instead of just the \
GS, we follow Canon code in this convention: use as first point of the orbit \
the mininum of the orbit with respect to the base of the SGS. We haven\.b4t \
done that in Orbit and Orbits.\
\>", "Text"],

Cell["\<\
The output is a Schreier structure, having three elements: the orbit, the nu \
vector of permutations and the w vector of backward pointers.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Schreier"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"Schreier is the head for a Schreier vector. The format is \
Schreier[orbits, nu, w], where nu is the actual Schreier vector and w is the \
associated vector of backward pointers.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977990-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"Schreier", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "Infinity"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "Schreier", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Schreier orbit:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SchreierOrbit"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"SchreierOrbit[p, GS, len] gives the orbit of point p under the \
group generated by GS, and its Schreier vector (of lenght len). \
SchreierOrbit[p, SGS, len] gives the same output, but the the first point of \
the orbit is now the minimum with respect to the base of the SGS. \
SchreierOrbit[p, gs] computes the length of the vectors from gs using \
PermLength. See notes for Schreier.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977990-5455693"]
}, Open  ]],

Cell["\<\
Unfortunately, this line introduces a redundant computation of the orbit, but \
I don't see how to avoid it (MinB is, however, very efficient):\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SchreierOrbit", "[", 
    RowBox[{"point_Integer", ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{"B_List", ",", "GS_GenSet"}], "]"}], ",", "deg_Integer"}], 
    "]"}], ":=", 
   RowBox[{"SchreierOrbit", "[", 
    RowBox[{
     RowBox[{"MinB", "[", 
      RowBox[{
       RowBox[{"Orbit", "[", 
        RowBox[{"point", ",", "GS"}], "]"}], ",", "B"}], "]"}], ",", "GS", 
     ",", "deg"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["\<\
For special cases perhaps there is a faster solution than this:\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SchreierOrbit", "[", 
    RowBox[{"point_Integer", ",", 
     RowBox[{"sym", ":", 
      RowBox[{"(", 
       RowBox[{"_Symmetric", "|", "_Antisymmetric"}], ")"}]}], ",", 
     "deg_Integer"}], "]"}], ":=", 
   RowBox[{"SchreierOrbit", "[", 
    RowBox[{"point", ",", 
     RowBox[{"SchreierSims", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "sym"}], "]"}], ",", "deg"}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell["This is algorithm 7.4 of Butler:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SchreierOrbit", "::", "infty"}], "=", 
   "\"\<Found Infinity as a point, with generating set `1`.\>\""}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SchreierOrbit", "[", 
    RowBox[{
     RowBox[{"point_Integer", "?", "Positive"}], ",", "gs_"}], "]"}], ":=", 
   RowBox[{"SchreierOrbit", "[", 
    RowBox[{"point", ",", "gs", ",", 
     RowBox[{"PermLength", "[", "gs", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SchreierOrbit", "[", 
    RowBox[{
     RowBox[{"point_Integer", "?", "Positive"}], ",", 
     RowBox[{"GenSet", "[", "]"}], ",", "len_Integer"}], "]"}], ":=", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", "point", "}"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", "len", "}"}]}], "]"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", "len", "}"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SchreierOrbit", "[", 
    RowBox[{
     RowBox[{"point_Integer", "?", "Positive"}], ",", 
     RowBox[{"GS", ":", 
      RowBox[{"GenSet", "[", "__", "]"}]}], ",", "len_Integer"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"orbit", "=", 
        RowBox[{"{", "point", "}"}]}], ",", "nu", ",", "w", ",", 
       RowBox[{"np", "=", "1"}], ",", "gamma", ",", "newgamma"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"nu", "=", 
       RowBox[{"w", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", 
          RowBox[{"{", "len", "}"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"np", "\[LessEqual]", 
         RowBox[{"Length", "[", "orbit", "]"}]}], ",", "\[IndentingNewLine]", 
        
        RowBox[{
         RowBox[{"gamma", "=", 
          RowBox[{"orbit", "[", 
           RowBox[{"[", "np", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"FreeQ", "[", 
               RowBox[{"orbit", ",", 
                RowBox[{"newgamma", "=", 
                 RowBox[{"OnPoints", "[", 
                  RowBox[{"gamma", ",", "#"}], "]"}]}]}], "]"}], ",", 
              RowBox[{
               RowBox[{"AppendTo", "[", 
                RowBox[{"orbit", ",", "newgamma"}], "]"}], ";", 
               RowBox[{
                RowBox[{"nu", "[", 
                 RowBox[{"[", "newgamma", "]"}], "]"}], "=", "#"}], ";", 
               RowBox[{
                RowBox[{"w", "[", 
                 RowBox[{"[", "newgamma", "]"}], "]"}], "=", "gamma"}]}]}], 
             "]"}], "&"}], ",", "GS"}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"++", "np"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Schreier", "[", 
       RowBox[{"orbit", ",", "nu", ",", "w"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SchreierOrbit", "[", 
    RowBox[{"Infinity", ",", "GS_", ",", "len_"}], "]"}], ":=", 
   RowBox[{"Throw", "@", 
    RowBox[{"Message", "[", 
     RowBox[{
      RowBox[{"SchreierOrbit", "::", "infty"}], ",", "GS"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"SchreierOrbit", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "SchreierOrbit", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Examples:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierOrbit", ",", "\[IndentingNewLine]", 
   RowBox[{"SchreierOrbit", "[", 
    RowBox[{"1", ",", 
     RowBox[{"GenSet", "[", "]"}], ",", "4"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierOrbit", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierOrbit", ",", "\[IndentingNewLine]", 
   RowBox[{"SchreierOrbit", "[", 
    RowBox[{"1", ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}], "]"}]}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}]}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "3", ",", "4", ",", "1"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierOrbit", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierOrbit", ",", "\[IndentingNewLine]", 
   RowBox[{"SchreierOrbit", "[", 
    RowBox[{"5", ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", 
         RowBox[{"2", "\[Rule]", "1"}]}], "]"}], ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "5"}], ",", 
         RowBox[{"5", "\[Rule]", "4"}]}], "]"}]}], "]"}], ",", "6"}], "]"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "5"}], ",", 
         RowBox[{"5", "\[Rule]", "4"}]}], "]"}], ",", "0", ",", "0"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "5", ",", "0", ",", "0"}], 
      "}"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierOrbit", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierOrbit", ",", "\[IndentingNewLine]", 
   RowBox[{"SchreierOrbit", "[", 
    RowBox[{"3", ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "1"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"Cycles", "[", 
           RowBox[{"{", 
            RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ",", 
         RowBox[{"-", 
          RowBox[{"Cycles", "[", 
           RowBox[{"{", 
            RowBox[{"3", ",", "4"}], "}"}], "]"}]}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "3"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], "]"}], ",", 
     "4"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "3"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "4"}], "}"}]}], "]"}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "3"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "4"}], "}"}]}], "]"}], ",", "0", ",", 
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"3", ",", "4"}], "}"}], "]"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "0", ",", "3"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierOrbit", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
The key point is the fact that g=OnPoints[ w[[g]], nu[[g]] ] for any g. That \
is, we know that we can go from w[[g]] to g using nu[[g]].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierOrbit", ",", "\[IndentingNewLine]", 
   RowBox[{"SchreierOrbit", "[", 
    RowBox[{"2", ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3"}], "}"}], "]"}]}], "]"}]}], "]"}], ",", 
     "3"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3"}], "}"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "2"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierOrbit", ",", "5", ",", "True"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["4.1.4. SchreierOrbits", "Subsubsection"],

Cell["We can have all orbits together in a single vector:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SchreierOrbits"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"SchreierOrbits[GS, len] gives a compound Schreier vector \
(length len) of the orbits of the group generated by GS. SchreierOrbits[GS, \
len, list] makes points in list to be the first points of the orbits. \
SchreierOrbits[SGS, len] gives the same output, but the orbits now start with \
the points of the base of the SGS. SchreierOrbits[gs] computes len from gs \
using PermLength. See notes for Schreier.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977991-5455693"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Compute", " ", "len", " ", "from", " ", "gs", " ", "using", " ", 
    "PermLength"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"SchreierOrbits", "[", 
      RowBox[{"gs_", ",", 
       RowBox[{"initpoints_List:", 
        RowBox[{"{", "}"}]}]}], "]"}], ":=", 
     RowBox[{"SchreierOrbits", "[", 
      RowBox[{"gs", ",", 
       RowBox[{"PermLength", "[", "gs", "]"}], ",", "initpoints"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"GS", ":", " ", 
     RowBox[{
     "Compute", " ", "all", " ", "Schreier", " ", "orbits", " ", "from", " ", 
      "SchreierOrbit", " ", "and", " ", "Orbits"}]}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SchreierOrbits", "[", 
      RowBox[{
       RowBox[{"GS", ":", 
        RowBox[{"GenSet", "[", "__", "]"}]}], ",", "len_Integer", ",", 
       RowBox[{"initpoints_List:", 
        RowBox[{"{", "}"}]}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"Schreier", "[", 
        RowBox[{
         RowBox[{"Sequence", "@@", 
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ",", 
         RowBox[{"Plus", "@@", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", 
         RowBox[{"Plus", "@@", 
          RowBox[{"#", "[", 
           RowBox[{"[", "3", "]"}], "]"}]}]}], "]"}], "&"}], "@", 
      RowBox[{"Transpose", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"SchreierOrbit", "[", 
           RowBox[{"#", ",", "GS", ",", "len"}], "]"}], "&"}], "/@", 
         RowBox[{"First", "/@", 
          RowBox[{"Orbits", "[", 
           RowBox[{"GS", ",", "len", ",", "initpoints"}], "]"}]}]}], "/.", 
        RowBox[{"Schreier", "\[Rule]", "List"}]}], "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"SGS", ":", " ", 
     RowBox[{
     "Use", " ", "base", " ", "as", " ", "initpoints", " ", "if", " ", 
      "initpoints", " ", "not", " ", "specified"}]}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SchreierOrbits", "[", 
      RowBox[{
       RowBox[{"StrongGenSet", "[", 
        RowBox[{"B_List", ",", 
         RowBox[{"GS", ":", 
          RowBox[{"GenSet", "[", "__", "]"}]}]}], "]"}], ",", "len_Integer"}],
       "]"}], ":=", 
     RowBox[{"SchreierOrbits", "[", 
      RowBox[{"GS", ",", "len", ",", "B"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SchreierOrbits", "[", 
      RowBox[{
       RowBox[{"StrongGenSet", "[", 
        RowBox[{"B_List", ",", 
         RowBox[{"GS", ":", 
          RowBox[{"GenSet", "[", "__", "]"}]}]}], "]"}], ",", "len_Integer", 
       ",", "initpoints_List"}], "]"}], ":=", 
     RowBox[{"SchreierOrbits", "[", 
      RowBox[{"GS", ",", "len", ",", "initpoints"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Special", " ", "cases"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SchreierOrbits", "[", 
      RowBox[{
       RowBox[{"sym", ":", 
        RowBox[{"(", 
         RowBox[{"_Symmetric", "|", "_Antisymmetric"}], ")"}]}], ",", 
       "len_Integer", ",", 
       RowBox[{"initpoints_:", 
        RowBox[{"{", "}"}]}]}], "]"}], ":=", 
     RowBox[{"SchreierOrbits", "[", 
      RowBox[{
       RowBox[{"GenSet", "[", "sym", "]"}], ",", "len", ",", "initpoints"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SchreierOrbits", "[", 
      RowBox[{
       RowBox[{"GenSet", "[", "]"}], ",", "len_Integer", ",", 
       RowBox[{"initpoints_:", 
        RowBox[{"{", "}"}]}]}], "]"}], ":=", 
     RowBox[{"Schreier", "[", 
      RowBox[{
       RowBox[{"Sequence", "@@", 
        RowBox[{"Orbits", "[", 
         RowBox[{
          RowBox[{"GenSet", "[", "]"}], ",", "len"}], "]"}]}], ",", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", "len", "}"}]}], "]"}], ",", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", "len", "}"}]}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SchreierOrbits", "[", 
      RowBox[{
       RowBox[{"StrongGenSet", "[", 
        RowBox[{"_", ",", 
         RowBox[{"GenSet", "[", "]"}]}], "]"}], ",", "len_Integer"}], "]"}], ":=", 
     RowBox[{"Schreier", "[", 
      RowBox[{
       RowBox[{"Sequence", "@@", 
        RowBox[{"Orbits", "[", 
         RowBox[{
          RowBox[{"GenSet", "[", "]"}], ",", "len"}], "]"}]}], ",", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", "len", "}"}]}], "]"}], ",", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", "len", "}"}]}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SetNumberOfArguments", "[", 
     RowBox[{"SchreierOrbits", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{"Protect", "[", "SchreierOrbits", "]"}], ";"}]}]}]], "Input",
 InitializationCell->True],

Cell["\<\
Examples. Note that the number of arguments of Schreier is finally #orbits + \
2.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TracePrint", "[", 
  RowBox[{
   RowBox[{"SchreierOrbits", "[", 
    RowBox[{"GenSet", "[", "]"}], "]"}], ",", 
   RowBox[{"SchreierOrbits", "[", "___", "]"}]}], "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{" ", "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"SchreierOrbits", "[", 
     RowBox[{"GenSet", "[", "]"}], "]"}],
    HoldForm]}],
  SequenceForm[
   Indent[1], 
   HoldForm[
    xAct`xPerm`SchreierOrbits[
     xAct`xPerm`GenSet[]]]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{" ", "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"SchreierOrbits", "[", 
     RowBox[{
      RowBox[{"GenSet", "[", "]"}], ",", 
      RowBox[{"PermLength", "[", 
       RowBox[{"GenSet", "[", "]"}], "]"}], ",", 
      RowBox[{"{", "}"}]}], "]"}],
    HoldForm]}],
  SequenceForm[
   Indent[1], 
   HoldForm[
    xAct`xPerm`SchreierOrbits[
     xAct`xPerm`GenSet[], 
     xAct`xPerm`PermLength[
      xAct`xPerm`GenSet[]], {}]]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{" ", "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"SchreierOrbits", "[", 
     RowBox[{
      RowBox[{"GenSet", "[", "]"}], ",", "0", ",", 
      RowBox[{"{", "}"}]}], "]"}],
    HoldForm]}],
  SequenceForm[
   Indent[1], 
   HoldForm[
    xAct`xPerm`SchreierOrbits[
     xAct`xPerm`GenSet[], 0, {}]]],
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Schreier", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierOrbits", ",", "\[IndentingNewLine]", 
   RowBox[{"SchreierOrbits", "[", 
    RowBox[{
     RowBox[{"GenSet", "[", "]"}], ",", "5"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", "2", "}"}], ",", 
     RowBox[{"{", "3", "}"}], ",", 
     RowBox[{"{", "4", "}"}], ",", 
     RowBox[{"{", "5", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "]"}]}],
   "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierOrbits", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierOrbits", ",", "\[IndentingNewLine]", 
   RowBox[{"SchreierOrbits", "[", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"Rules", "[", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "2"}], ",", 
        RowBox[{"2", "\[Rule]", "1"}]}], "]"}], ",", 
      RowBox[{"Rules", "[", 
       RowBox[{
        RowBox[{"4", "\[Rule]", "5"}], ",", 
        RowBox[{"5", "\[Rule]", "4"}]}], "]"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", "3", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", 
         RowBox[{"2", "\[Rule]", "1"}]}], "]"}], ",", "0", ",", "0", ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "5"}], ",", 
         RowBox[{"5", "\[Rule]", "4"}]}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "0", ",", "4"}], "}"}]}], "]"}]}],
   "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierOrbits", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierOrbits", ",", "\[IndentingNewLine]", 
   RowBox[{"SchreierOrbits", "[", 
    RowBox[{
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", 
         RowBox[{"2", "\[Rule]", "1"}]}], "]"}], ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "5"}], ",", 
         RowBox[{"5", "\[Rule]", "4"}]}], "]"}]}], "]"}], ",", "5", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "5"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "4"}], "}"}], ",", 
     RowBox[{"{", "3", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", 
         RowBox[{"2", "\[Rule]", "1"}]}], "]"}], ",", "0", ",", "0", ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "5"}], ",", 
         RowBox[{"5", "\[Rule]", "4"}]}], "]"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "0", ",", "0", ",", "5", ",", "0"}], "}"}]}], "]"}]}],
   "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierOrbits", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierOrbits", ",", "\[IndentingNewLine]", 
   RowBox[{"SchreierOrbits", "[", 
    RowBox[{
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "4"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{"Rules", "[", 
          RowBox[{
           RowBox[{"1", "\[Rule]", "2"}], ",", 
           RowBox[{"2", "\[Rule]", "1"}]}], "]"}], ",", 
         RowBox[{"Rules", "[", 
          RowBox[{
           RowBox[{"4", "\[Rule]", "5"}], ",", 
           RowBox[{"5", "\[Rule]", "4"}]}], "]"}]}], "]"}]}], "]"}], ",", 
     "5"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", "3", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", 
         RowBox[{"2", "\[Rule]", "1"}]}], "]"}], ",", "0", ",", "0", ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "5"}], ",", 
         RowBox[{"5", "\[Rule]", "4"}]}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "0", ",", "4"}], "}"}]}], "]"}]}],
   "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierOrbits", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierOrbits", ",", "\[IndentingNewLine]", 
   RowBox[{"SchreierOrbits", "[", 
    RowBox[{
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "5"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{"Rules", "[", 
          RowBox[{
           RowBox[{"1", "\[Rule]", "2"}], ",", 
           RowBox[{"2", "\[Rule]", "1"}]}], "]"}], ",", 
         RowBox[{"Rules", "[", 
          RowBox[{
           RowBox[{"4", "\[Rule]", "5"}], ",", 
           RowBox[{"5", "\[Rule]", "4"}]}], "]"}]}], "]"}]}], "]"}], ",", 
     "5"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "4"}], "}"}], ",", 
     RowBox[{"{", "3", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", 
         RowBox[{"2", "\[Rule]", "1"}]}], "]"}], ",", "0", ",", "0", ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "5"}], ",", 
         RowBox[{"5", "\[Rule]", "4"}]}], "]"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "0", ",", "0", ",", "5", ",", "0"}], "}"}]}], "]"}]}],
   "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierOrbits", ",", "5", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["Example from page 59 of Butler's book:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"a", "=", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1", ",", "4", ",", "5", ",", "11", ",", "6", ",", "10", ",", "3", ",", 
       "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1", ",", "4", ",", "5", ",", "11", ",", "6", ",", "10", ",", "3", ",", 
       "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "9"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"c", "=", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "11", ",", "10", ",", "6"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Orbit", ",", "\[IndentingNewLine]", 
   RowBox[{"Orbit", "[", 
    RowBox[{"7", ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Orbit", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierOrbit", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SchreierOrbit", "[", 
     RowBox[{"7", ",", 
      RowBox[{"GenSet", "[", 
       RowBox[{"a", ",", "b", ",", "c"}], "]"}], ",", "11"}], "]"}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"a", "\[Rule]", "\"\<a\>\""}], ",", 
      RowBox[{"b", "\[Rule]", "\"\<b\>\""}], ",", 
      RowBox[{"c", "\[Rule]", "\"\<c\>\""}]}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "8", ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "\"\<a\>\"", ",", "\"\<b\>\"", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "7", ",", "8", ",", "0", ",", "0"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierOrbit", ",", "6", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Orbit", ",", "\[IndentingNewLine]", 
   RowBox[{"Orbit", "[", 
    RowBox[{"1", ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "4", ",", "5", ",", "2", ",", "11", ",", "3", ",", "6", ",", 
     "10"}], "}"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Orbit", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierOrbit", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SchreierOrbit", "[", 
     RowBox[{"1", ",", 
      RowBox[{"GenSet", "[", 
       RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "]"}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"a", "\[Rule]", "\"\<a\>\""}], ",", 
      RowBox[{"b", "\[Rule]", "\"\<b\>\""}], ",", 
      RowBox[{"c", "\[Rule]", "\"\<c\>\""}]}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1", ",", "4", ",", "5", ",", "2", ",", "11", ",", "3", ",", "6", ",", 
       "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "\"\<c\>\"", ",", "\"\<c\>\"", ",", "\"\<a\>\"", ",", 
       "\"\<a\>\"", ",", "\"\<a\>\"", ",", "0", ",", "0", ",", "0", ",", 
       "\"\<c\>\"", ",", "\"\<a\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "4", ",", "2", ",", "1", ",", "4", ",", "11", ",", "0", ",", 
       "0", ",", "0", ",", "11", ",", "5"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierOrbit", ",", "7", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Orbits", ",", "\[IndentingNewLine]", 
   RowBox[{"Orbits", "[", 
    RowBox[{"GenSet", "[", 
     RowBox[{"a", ",", "b", ",", "c"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1", ",", "4", ",", "5", ",", "2", ",", "11", ",", "3", ",", "6", ",", 
       "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Orbits", ",", "8", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierOrbits", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SchreierOrbits", "[", 
     RowBox[{
      RowBox[{"GenSet", "[", 
       RowBox[{"a", ",", "b", ",", "c"}], "]"}], ",", "11"}], "]"}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"a", "\[Rule]", "\"\<a\>\""}], ",", 
      RowBox[{"b", "\[Rule]", "\"\<b\>\""}], ",", 
      RowBox[{"c", "\[Rule]", "\"\<c\>\""}]}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1", ",", "4", ",", "5", ",", "2", ",", "11", ",", "3", ",", "6", ",", 
       "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8", ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "\"\<c\>\"", ",", "\"\<c\>\"", ",", "\"\<a\>\"", ",", 
       "\"\<a\>\"", ",", "\"\<a\>\"", ",", "0", ",", "\"\<a\>\"", ",", 
       "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<a\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "4", ",", "2", ",", "1", ",", "4", ",", "11", ",", "0", ",", 
       "7", ",", "8", ",", "11", ",", "5"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierOrbits", ",", "6", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierOrbits", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SchreierOrbits", "[", 
     RowBox[{
      RowBox[{"GenSet", "[", 
       RowBox[{"a", ",", "b", ",", "c"}], "]"}], ",", "11", ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "8"}], "}"}]}], "]"}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"a", "\[Rule]", "\"\<a\>\""}], ",", 
      RowBox[{"b", "\[Rule]", "\"\<b\>\""}], ",", 
      RowBox[{"c", "\[Rule]", "\"\<c\>\""}]}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "2", ",", "1", ",", "3", ",", "4", ",", "5", ",", "11", ",", "6", ",", 
       "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "7", ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<a\>\"", ",", "0", ",", "\"\<c\>\"", ",", "\"\<a\>\"", ",", 
       "\"\<a\>\"", ",", "\"\<a\>\"", ",", "\"\<a\>\"", ",", "0", ",", 
       "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<a\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "2", ",", "0", ",", "2", ",", "1", ",", "4", ",", "11", ",", "8", ",", 
       "0", ",", "8", ",", "11", ",", "5"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierOrbits", ",", "7", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
If no permutations are given, we just return the trivial sets. Note the \
relevance of the len argument:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Orbit", ",", "\[IndentingNewLine]", 
   RowBox[{"Orbit", "[", 
    RowBox[{"1", ",", 
     RowBox[{"GenSet", "[", "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", "1", "}"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Orbit", ",", "5", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierOrbit", ",", "\[IndentingNewLine]", 
   RowBox[{"SchreierOrbit", "[", 
    RowBox[{"1", ",", 
     RowBox[{"GenSet", "[", "]"}], ",", "3"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierOrbit", ",", "8", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Orbits", ",", "\[IndentingNewLine]", 
   RowBox[{"Orbits", "[", 
    RowBox[{
     RowBox[{"GenSet", "[", "]"}], ",", "3"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", "2", "}"}], ",", 
     RowBox[{"{", "3", "}"}]}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Orbits", ",", "9", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierOrbits", ",", "\[IndentingNewLine]", 
   RowBox[{"SchreierOrbits", "[", 
    RowBox[{
     RowBox[{"GenSet", "[", "]"}], ",", "3"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", "2", "}"}], ",", 
     RowBox[{"{", "3", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierOrbits", ",", "8", ",", "True"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["4.1.5. TraceSchreier", "Subsubsection"],

Cell["\<\
Finally, we can trace the Schreier vectors, which is the operation giving the \
permutation moving the first-point of an orbit to a given point:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TraceSchreier"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"TraceSchreier[p, Schreier[orbits, nu, w]] finds a permutation \
such that the image of the first point of the orbit of p is p.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977993-5455693"]
}, Open  ]],

Cell["This is algorithm 7.3 of Butler:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TraceSchreier", "::", "trace"}], "=", 
   "\"\<Cannot trace `1` with orbit `2`\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TraceSchreier", "[", 
    RowBox[{"p_Integer", ",", 
     RowBox[{"oS", ":", 
      RowBox[{"Schreier", "[", 
       RowBox[{"orbits___List", ",", "nu_", ",", "w_"}], "]"}]}]}], "]"}], ":=", 
   RowBox[{"Which", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"First", "/@", 
        RowBox[{"{", "orbits", "}"}]}], ",", "p"}], "]"}], ",", "ID", ",", 
     "\[IndentingNewLine]", 
     RowBox[{"p", "===", "0"}], ",", 
     RowBox[{"Throw", "[", 
      RowBox[{"Message", "[", 
       RowBox[{
        RowBox[{"TraceSchreier", "::", "trace"}], ",", "0", ",", "oS"}], 
       "]"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Length", "[", "nu", "]"}], "<", "p"}], ",", "ID", ",", 
     "\[IndentingNewLine]", "True", ",", 
     RowBox[{"PermProduct", "[", 
      RowBox[{
       RowBox[{"TraceSchreier", "[", 
        RowBox[{
         RowBox[{"w", "[", 
          RowBox[{"[", "p", "]"}], "]"}], ",", "oS"}], "]"}], ",", 
       RowBox[{"nu", "[", 
        RowBox[{"[", "p", "]"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TraceSchreier", "[", 
    RowBox[{"p_Integer", ",", "os_Schreier"}], "]"}], ":=", 
   RowBox[{"Throw", "@", 
    RowBox[{"Message", "[", 
     RowBox[{
      RowBox[{"TraceSchreier", "::", "trace"}], ",", "p", ",", "os"}], 
     "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"TraceSchreier", ",", "2"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "TraceSchreier", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Examples:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierOrbit", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SchreierOrbit", "[", 
     RowBox[{"1", ",", 
      RowBox[{"GenSet", " ", "[", 
       RowBox[{"a", ",", "b", ",", "c"}], "]"}], ",", "11"}], "]"}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"a", "\[Rule]", "\"\<a\>\""}], ",", 
      RowBox[{"b", "\[Rule]", "\"\<b\>\""}], ",", 
      RowBox[{"c", "\[Rule]", "\"\<c\>\""}]}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Schreier", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1", ",", "4", ",", "5", ",", "2", ",", "11", ",", "3", ",", "6", ",", 
       "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "\"\<c\>\"", ",", "\"\<c\>\"", ",", "\"\<a\>\"", ",", 
       "\"\<a\>\"", ",", "\"\<a\>\"", ",", "0", ",", "0", ",", "0", ",", 
       "\"\<c\>\"", ",", "\"\<a\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "4", ",", "2", ",", "1", ",", "4", ",", "11", ",", "0", ",", 
       "0", ",", "0", ",", "11", ",", "5"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierOrbit", ",", "9", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TraceSchreier", ",", "\[IndentingNewLine]", 
   RowBox[{"TraceSchreier", "[", 
    RowBox[{"11", ",", 
     RowBox[{"SchreierOrbit", "[", 
      RowBox[{"1", ",", 
       RowBox[{"GenSet", " ", "[", 
        RowBox[{"a", ",", "b", ",", "c"}], "]"}], ",", "11"}], "]"}]}], "]"}],
    ",", "\[IndentingNewLine]", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1", ",", "11", ",", "3", ",", "4", ",", "6", ",", "2", ",", "5", ",", 
       "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TraceSchreier", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermPower", ",", "\[IndentingNewLine]", 
   RowBox[{"PermPower", "[", 
    RowBox[{"a", ",", "3"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1", ",", "11", ",", "3", ",", "4", ",", "6", ",", "2", ",", "5", ",", 
       "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermPower", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TraceSchreier", ",", "\[IndentingNewLine]", 
   RowBox[{"TraceSchreier", "[", 
    RowBox[{"11", ",", 
     RowBox[{"SchreierOrbits", "[", 
      RowBox[{
       RowBox[{"GenSet", "[", 
        RowBox[{"a", ",", "b", ",", "c"}], "]"}], ",", "11"}], "]"}]}], "]"}],
    ",", "\[IndentingNewLine]", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1", ",", "11", ",", "3", ",", "4", ",", "6", ",", "2", ",", "5", ",", 
       "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TraceSchreier", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OnPoints", ",", "\[IndentingNewLine]", 
   RowBox[{"OnPoints", "[", 
    RowBox[{"1", ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "1", ",", "11", ",", "3", ",", "4", ",", "6", ",", "2", ",", "5", ",",
          "10"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "8"}], "}"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "11"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OnPoints", ",", "19", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TraceSchreier", ",", "\[IndentingNewLine]", 
   RowBox[{"TraceSchreier", "[", 
    RowBox[{"1", ",", 
     RowBox[{"SchreierOrbit", "[", 
      RowBox[{"1", ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"a", ",", "b", ",", "c"}], "]"}], ",", "11"}], "]"}]}], "]"}],
    ",", "\[IndentingNewLine]", "ID"}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TraceSchreier", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Catch", "@", 
  RowBox[{"TraceSchreier", "[", 
   RowBox[{"8", ",", 
    RowBox[{"SchreierOrbit", "[", 
     RowBox[{"1", ",", 
      RowBox[{"GenSet", "[", 
       RowBox[{"a", ",", "b", ",", "c"}], "]"}], ",", "11"}], "]"}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"TraceSchreier", "::", "trace"}], "MessageName"], ":", 
  " ", "\<\"Cannot trace \[NoBreak]\\!\\(0\\)\[NoBreak] with orbit \[NoBreak]\
\\!\\(Schreier[\\(\\(\\(\\({1, 4, 5, 2, 11, 3, 6, 10}\\)\\), \\(\\({0, \
\\(\\(Cycles[\\(\\(\\(\\({1, 4, 2, 3}\\)\\), \\(\\({5, 11, 10, \
6}\\)\\)\\)\\)]\\)\\), \\(\\(Cycles[\\(\\(\\(\\({1, 4, 2, 3}\\)\\), \\(\\({5, \
11, 10, 6}\\)\\)\\)\\)]\\)\\), \\(\\(Cycles[\\(\\(\\(\\({1, 4, 5, 11, 6, 10, \
3, 2}\\)\\), \\(\\({7, 8}\\)\\)\\)\\)]\\)\\), \\(\\(Cycles[\\(\\(\\(\\({1, 4, \
5, 11, 6, 10, 3, 2}\\)\\), \\(\\({7, 8}\\)\\)\\)\\)]\\)\\), \
\\(\\(Cycles[\\(\\(\\(\\({1, 4, 5, 11, 6, 10, 3, 2}\\)\\), \\(\\({7, 8}\\)\\)\
\\)\\)]\\)\\), 0, 0, 0, \\(\\(Cycles[\\(\\(\\(\\({1, 4, 2, 3}\\)\\), \
\\(\\({5, 11, 10, 6}\\)\\)\\)\\)]\\)\\), \\(\\(Cycles[\\(\\(\\(\\({1, 4, 5, \
11, 6, 10, 3, 2}\\)\\), \\(\\({7, 8}\\)\\)\\)\\)]\\)\\)}\\)\\), \\(\\({0, 4, \
2, 1, 4, 11, 0, 0, 0, 11, 5}\\)\\)\\)\\)]\\)\[NoBreak] \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/trace\\\", \
ButtonNote -> \\\"xAct`xPerm`TraceSchreier::trace\\\"]\\)\"\>"}]], "Message", \
"MSG"]
}, Open  ]],

Cell["Note the following particular cases:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"TraceSchreier", ",", "\[IndentingNewLine]", 
   RowBox[{"TraceSchreier", "[", 
    RowBox[{"1", ",", 
     RowBox[{"Schreier", "[", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "ID"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TraceSchreier", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Catch", "@", 
  RowBox[{"TraceSchreier", "[", 
   RowBox[{"2", ",", 
    RowBox[{"Schreier", "[", 
     RowBox[{
      RowBox[{"{", "1", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "]"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"TraceSchreier", "::", "trace"}], "MessageName"], ":", 
  " ", "\<\"Cannot trace \[NoBreak]\\!\\(0\\)\[NoBreak] with orbit \[NoBreak]\
\\!\\(Schreier[\\(\\(\\(\\({1}\\)\\), \\(\\({0, 0, 0}\\)\\), \\(\\({0, 0, \
0}\\)\\)\\)\\)]\\)\[NoBreak] \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/trace\\\", ButtonNote -> \
\\\"xAct`xPerm`TraceSchreier::trace\\\"]\\)\"\>"}]], "Message", "MSG"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["4.2. StabilizerChain", "Subsection"],

Cell[CellGroupData[{

Cell["4.2.0. Comments", "Subsubsection"],

Cell["\<\
In the MathLink connection section we shall give a definition for \
StrongGenSet with three arguments.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"StrongGenSet", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "StrongGenSet", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
Now we deal with the stabilizing part of the SGSs. The key idea is that a SGS \
allows the construction of a hierarchy of subgroups: the stabilizers of \
consecutive points in the base.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["4.2.1. StabilizerChain", "Subsubsection"],

Cell["\<\
This function gives the chain of stabilizers associated to a SGS. There is no \
check of validity of the initial pair (base, GS):\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "StabilizerChain"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"StabilizerChain[SGS] gives a list of strong generating sets \
corresponding to the chain of stabilizers of the group generated by SGS. The \
first one is SGS and the last one is the generating set of Group[ID].\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977994-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"StabilizerChain", "[", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{"base_List", ",", "GS_GenSet"}], "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"DeleteCases", "[", 
        RowBox[{"base", ",", 
         RowBox[{"Alternatives", "@@", "#"}]}], "]"}], ",", 
       RowBox[{"Stabilizer", "[", 
        RowBox[{"#", ",", "GS"}], "]"}]}], "]"}], "&"}], "/@", 
    RowBox[{"FoldList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Append", "[", 
        RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
      RowBox[{"{", "}"}], ",", "base"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StabilizerChain", "[", 
    RowBox[{"sym", ":", 
     RowBox[{"(", 
      RowBox[{"_Symmetric", "|", "_Antisymmetric"}], ")"}]}], "]"}], ":=", 
   RowBox[{"StabilizerChain", "[", 
    RowBox[{"SchreierSims", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "sym"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"StabilizerChain", ",", "1"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "StabilizerChain", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
If there are no generators, the orbits have trivial structure:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StabilizerChain", "[", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"GenSet", "[", "]"}]}], "]"}], "]"}], "//", 
  "ColumnForm"}]], "Input"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "2", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{
    xAct`xPerm`StrongGenSet[{1, 2}, 
     xAct`xPerm`GenSet[]], 
    xAct`xPerm`StrongGenSet[{2}, 
     xAct`xPerm`GenSet[]], 
    xAct`xPerm`StrongGenSet[{}, 
     xAct`xPerm`GenSet[]]}],
  Editable->False]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StabilizerChain", "[", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"GenSet", "[", "]"}]}], "]"}], "]"}], "//", 
  "ColumnForm"}]], "Input"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{
    xAct`xPerm`StrongGenSet[{}, 
     xAct`xPerm`GenSet[]]}],
  Editable->False]], "Output"]
}, Open  ]],

Cell["\<\
Note that the first SGS is the original SGS and the last one is the empty SGS \
(generating Group[ID]):\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StabilizerChain", "[", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "6", ",", "5"}], 
         "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "6", ",", "5"}], 
         "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4", ",", "1", ",", "2", ",", "5", ",", "6"}], 
         "}"}], "]"}]}], "]"}]}], "]"}], "]"}], "//", 
  "ColumnForm"}]], "Input"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{"Perm", "[", 
          RowBox[{"{", 
           RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "6", ",", "5"}], 
           "}"}], "]"}], ",", 
         RowBox[{"Perm", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "6", ",", "5"}], 
           "}"}], "]"}], ",", 
         RowBox[{"Perm", "[", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4", ",", "1", ",", "2", ",", "5", ",", "6"}], 
           "}"}], "]"}]}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "3", "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "6", ",", "5"}], 
          "}"}], "]"}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{
    xAct`xPerm`StrongGenSet[{1, 3}, 
     xAct`xPerm`GenSet[
      xAct`xPerm`Perm[{2, 1, 3, 4, 6, 5}], 
      xAct`xPerm`Perm[{1, 2, 4, 3, 6, 5}], 
      xAct`xPerm`Perm[{3, 4, 1, 2, 5, 6}]]], 
    xAct`xPerm`StrongGenSet[{3}, 
     xAct`xPerm`GenSet[
      xAct`xPerm`Perm[{1, 2, 4, 3, 6, 5}]]], 
    xAct`xPerm`StrongGenSet[{}, 
     xAct`xPerm`GenSet[]]}],
  Editable->False]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StabilizerChain", "[", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "6", ",", "5"}], 
         "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "6", ",", "5"}], 
         "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4", ",", "1", ",", "2", ",", "5", ",", "6"}], 
         "}"}], "]"}]}], "]"}]}], "]"}], "]"}], "//", 
  "ColumnForm"}]], "Input"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{"Perm", "[", 
          RowBox[{"{", 
           RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "6", ",", "5"}], 
           "}"}], "]"}], ",", 
         RowBox[{"Perm", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "6", ",", "5"}], 
           "}"}], "]"}], ",", 
         RowBox[{"Perm", "[", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4", ",", "1", ",", "2", ",", "5", ",", "6"}], 
           "}"}], "]"}]}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "6", ",", "5"}], 
          "}"}], "]"}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "6", ",", "5"}], 
          "}"}], "]"}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "4", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{
    xAct`xPerm`StrongGenSet[{1, 2, 3, 4}, 
     xAct`xPerm`GenSet[
      xAct`xPerm`Perm[{2, 1, 3, 4, 6, 5}], 
      xAct`xPerm`Perm[{1, 2, 4, 3, 6, 5}], 
      xAct`xPerm`Perm[{3, 4, 1, 2, 5, 6}]]], 
    xAct`xPerm`StrongGenSet[{2, 3, 4}, 
     xAct`xPerm`GenSet[
      xAct`xPerm`Perm[{1, 2, 4, 3, 6, 5}]]], 
    xAct`xPerm`StrongGenSet[{3, 4}, 
     xAct`xPerm`GenSet[
      xAct`xPerm`Perm[{1, 2, 4, 3, 6, 5}]]], 
    xAct`xPerm`StrongGenSet[{4}, 
     xAct`xPerm`GenSet[]], 
    xAct`xPerm`StrongGenSet[{}, 
     xAct`xPerm`GenSet[]]}],
  Editable->False]], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["4.3. Inductive foundation", "Subsection"],

Cell[CellGroupData[{

Cell["4.3.0. Comments", "Subsubsection"],

Cell["\<\
Here we construct a number of commands which perform simple tasks using \
strong generating sets.

This is essentially chapter 10 of Butler's book. There are lots of examples \
there, which have been repeated (and some of them corrected) in the companion \
notebook ButlerExamples.nb.\
\>", "Text"],

Cell["\<\
Recall that given the SGS of a group G with base {b1, b2, ..., bk} we can \
construct a hierarchy of stabilizers
\t\t\t{id} = Gk+1 < Gk < ... < G2 < G1 = G
where Gi is the stabilizer of the points {b1, ..., bi-1}. The notation is \
horrible because it should have been G0 = G and Gk = {id}, etc.

The group G1=G is divided in the subroup G2 (the stabilizer of b1) and its \
cosets. There is a one-to-one correspondence between those cosets and the \
points of the orbit b1^G. We select the smallest permutation u of those \
cosets, that will represent the coset in all of the following computations. \
Given any permutation g in G we compute b1^g; if we get b1 then that means \
that g is in G2 (the stabilizer of b1), but if we get another point in the \
orbit of b1 then we know that the permutation g belongs to the corresponding \
right coset G2 x g. If u is the representant of that coset, then h = g x u^-1 \
belongs to G2. Note that b1^g = b1^(h x u) = (b1^h)^u = b1^u. Now we can \
repeat the same process starting with the permutation h and the group G2, for \
which we have a SGS with base {b2, b3, ..., bk}. The length of the orbit b1^G \
is the number of cosets G:G2. Then the length of the orbit b2^G2 is the \
number of cosets G2:G3, etc. Finally the length of the orbit bk^Gk is the \
number of cosets Gk:{id}, which is the order of Gk. The orbit Delta^(i) = \
bi^Gi is called the basic orbit i and its length is called the basic index i.\
\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["4.3.1. OrderOfGroup", "Subsubsection"],

Cell["\<\
This recursive function just multiplies the lengths of the basic orbits of \
the SGSs in the chain of stabilizers:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "OrderOfGroup"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"OrderOfGroup[SGS] gives the order of the group generated by \
SGS.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977995-5455693"]
}, Open  ]],

Cell["\<\
Note that there are no options in OrderOfGroup, but we can pass the MathLink \
option to Orbit:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"OrderOfGroup", "::", "nobase"}], "=", 
   "\"\<Found strong generating set with empty base but generators `1`. \
Assigning ficticious order 0.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OrderOfGroup", "[", 
    RowBox[{
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "___", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}], ",", "options___"}], "]"}], ":=",
    "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OrderOfGroup", "[", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "GS_GenSet"}], "]"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{
       RowBox[{"OrderOfGroup", "::", "nobase"}], ",", "GS"}], "]"}], ";", 
     "0"}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OrderOfGroup", "[", 
    RowBox[{
     RowBox[{"StrongGenSet", "[", 
      RowBox[{"base_List", ",", "GS_GenSet"}], "]"}], ",", "options___"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{"Length", "[", 
     RowBox[{"Orbit", "[", 
      RowBox[{
       RowBox[{"First", "[", "base", "]"}], ",", "GS", ",", "options"}], 
      "]"}], "]"}], 
    RowBox[{"OrderOfGroup", "[", 
     RowBox[{
      RowBox[{"StrongGenSet", "[", 
       RowBox[{
        RowBox[{"Rest", "[", "base", "]"}], ",", 
        RowBox[{"Stabilizer", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"First", "[", "base", "]"}], "}"}], ",", "GS"}], "]"}]}], 
       "]"}], ",", "options"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OrderOfGroup", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"Symmetric", "|", "Antisymmetric"}], ")"}], "[", "list_List", 
     "]"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Length", "[", "list", "]"}], "!"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"OrderOfGroup", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "Infinity"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "OrderOfGroup", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Examples:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OrderOfGroup", ",", "\[IndentingNewLine]", 
   RowBox[{"OrderOfGroup", "[", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"GenSet", "[", 
       RowBox[{
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "6", ",", "5"}], 
          "}"}], "]"}], ",", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "6", ",", "5"}], 
          "}"}], "]"}], ",", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"3", ",", "4", ",", "1", ",", "2", ",", "5", ",", "6"}], 
          "}"}], "]"}]}], "]"}]}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
   "8"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OrderOfGroup", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["If there are no generators the group is just {ID}:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OrderOfGroup", ",", "\[IndentingNewLine]", 
   RowBox[{"OrderOfGroup", "[", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"GenSet", "[", "]"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "1"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OrderOfGroup", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Note that redundant points in the base do not change the result:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OrderOfGroup", ",", "\[IndentingNewLine]", 
   RowBox[{"OrderOfGroup", "[", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
      RowBox[{"GenSet", "[", 
       RowBox[{
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "6", ",", "5"}], 
          "}"}], "]"}], ",", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "6", ",", "5"}], 
          "}"}], "]"}], ",", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"3", ",", "4", ",", "1", ",", "2", ",", "5", ",", "6"}], 
          "}"}], "]"}]}], "]"}]}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
   "8"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OrderOfGroup", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"OrderOfGroup", ",", "\[IndentingNewLine]", 
   RowBox[{"OrderOfGroup", "[", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"GenSet", "[", "]"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "1"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"OrderOfGroup", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
These are the SGSs involved in the canonicalization of products of n \
(anti)symmetric 2-tensors:\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sgs", "[", "n_", "]"}], ":=", 
  RowBox[{"StrongGenSet", "[", 
   RowBox[{
    RowBox[{"Range", "[", 
     RowBox[{"1", ",", 
      RowBox[{
       RowBox[{"2", "n"}], "-", "1"}], ",", "2"}], "]"}], ",", 
    RowBox[{"GenSet", "@@", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"i", "+", "1"}]}], "}"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{
            RowBox[{"2", "n"}], "-", "1"}], ",", "2"}], "}"}]}], "]"}], ",", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Cycles", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"i", "+", "2"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"i", "+", "1"}], ",", 
             RowBox[{"i", "+", "3"}]}], "}"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{
            RowBox[{"2", "n"}], "-", "3"}], ",", "2"}], "}"}]}], "]"}]}], 
      "]"}]}]}], "]"}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sgs", "[", "3", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"5", ",", "6"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "6"}], "}"}]}], "]"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"OrderOfGroup", "[", 
    RowBox[{"sgs", "[", "#", "]"}], "]"}], "&"}], "/@", 
  RowBox[{"Range", "[", "25", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "8", ",", "48", ",", "384", ",", "3840", ",", "46080", ",", 
   "645120", ",", "10321920", ",", "185794560", ",", "3715891200", ",", 
   "81749606400", ",", "1961990553600", ",", "51011754393600", ",", 
   "1428329123020800", ",", "42849873690624000", ",", "1371195958099968000", 
   ",", "46620662575398912000", ",", "1678343852714360832000", ",", 
   "63777066403145711616000", ",", "2551082656125828464640000", ",", 
   "107145471557284795514880000", ",", "4714400748520531002654720000", ",", 
   "216862434431944426122117120000", ",", "10409396852733332453861621760000", 
   ",", "520469842636666622693081088000000"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "//", "N"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2.`", ",", "8.`", ",", "48.`", ",", "384.`", ",", "3840.`", ",", "46080.`",
    ",", "645120.`", ",", "1.032192`*^7", ",", "1.8579456`*^8", ",", 
   "3.7158912`*^9", ",", "8.17496064`*^10", ",", "1.9619905536`*^12", ",", 
   "5.10117543936`*^13", ",", "1.4283291230208`*^15", ",", 
   "4.2849873690624`*^16", ",", "1.371195958099968`*^18", ",", 
   "4.662066257539891`*^19", ",", "1.6783438527143608`*^21", ",", 
   "6.377706640314571`*^22", ",", "2.5510826561258285`*^24", ",", 
   "1.071454715572848`*^26", ",", "4.714400748520531`*^27", ",", 
   "2.1686243443194444`*^29", ",", "1.0409396852733332`*^31", ",", 
   "5.204698426366666`*^32"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["4.3.2. Membership. PermMemberQ, PermWord", "Subsubsection"],

Cell["\<\
Recursive function that checks membership of a permutation in a group \
generated by a SGS:\
\>", "Text"],

Cell["\<\
This is algorithm 10.2 of Butler. Algorithms 10.1 and 10.3 (which produce the \
same output) have not been implemented in xPerm.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "PermMemberQ"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"PermMemberQ[perm, SGS] gives True if permutation perm belongs \
to the group generated by SGS, and False otherwise.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977998-5455693"]
}, Open  ]],

Cell["\<\
This function is iterative, with output {residue, word}, and needs to store \
the previous stages of the computation, in the third argument.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "PermWord"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"PermWord[perm, SGS] decompose the permutation perm as {pk, \
..., p0} where each of the permutations pi belong to the stabilizer subgroup \
of the first i points of the base of SGS. If pk == ID then perm belongs to \
the group and not otherwise. There is a third argument, used internally for \
iteration.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977998-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PermWord", "[", 
    RowBox[{"perm_", ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{"base_List", ",", "GS_GenSet"}], "]"}], ",", 
     RowBox[{"word_List:", 
      RowBox[{"{", "}"}]}]}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "base", "]"}], "===", "0"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Prepend", "[", 
      RowBox[{"word", ",", "perm"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Sorbit", "=", 
          RowBox[{"SchreierOrbit", "[", 
           RowBox[{
            RowBox[{"First", "[", "base", "]"}], ",", "GS", ",", 
            RowBox[{"Max", "[", 
             RowBox[{
              RowBox[{"PermDeg", "[", "perm", "]"}], ",", 
              RowBox[{"PermDeg", "[", "GS", "]"}]}], "]"}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"point", "=", 
          RowBox[{"OnPoints", "[", 
           RowBox[{
            RowBox[{"First", "[", "base", "]"}], ",", "perm"}], "]"}]}], ",", 
         "\[IndentingNewLine]", "u"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"First", "[", "Sorbit", "]"}], ",", "point"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"u", "=", 
           RowBox[{"TraceSchreier", "[", 
            RowBox[{"point", ",", "Sorbit"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"PermWord", "[", 
           RowBox[{
            RowBox[{"PermProduct", "[", 
             RowBox[{"perm", ",", 
              RowBox[{"InversePerm", "[", "u", "]"}]}], "]"}], ",", 
            RowBox[{"StrongGenSet", "[", 
             RowBox[{
              RowBox[{"Rest", "[", "base", "]"}], ",", 
              RowBox[{"Stabilizer", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"First", "[", "base", "]"}], "}"}], ",", "GS"}], 
               "]"}]}], "]"}], ",", 
            RowBox[{"Prepend", "[", 
             RowBox[{"word", ",", "u"}], "]"}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Prepend", "[", 
          RowBox[{"word", ",", "perm"}], "]"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermMemberQ", "[", 
    RowBox[{"perm_", ",", 
     RowBox[{"sym", ":", 
      RowBox[{"(", 
       RowBox[{"_Symmetric", "|", "_Antisymmetric"}], ")"}]}]}], "]"}], ":=", 
   
   RowBox[{"PermMemberQ", "[", 
    RowBox[{"perm", ",", 
     RowBox[{"SchreierSims", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "sym"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PermMemberQ", "[", 
    RowBox[{"perm_", ",", "SGS_"}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"id", "=", 
        RowBox[{"ID", "[", "perm", "]"}]}], ",", 
       RowBox[{"first", "=", 
        RowBox[{"First", "@", 
         RowBox[{"PermWord", "[", 
          RowBox[{"perm", ",", "SGS"}], "]"}]}]}]}], "}"}], ",", 
     RowBox[{"Or", "[", 
      RowBox[{
       RowBox[{"PermEqual", "[", 
        RowBox[{"first", ",", "id"}], "]"}], ",", 
       RowBox[{
        RowBox[{"PermEqual", "[", 
         RowBox[{"first", "===", 
          RowBox[{"-", "id"}]}], "]"}], "&&", 
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"SGS", "[", 
           RowBox[{"[", "2", "]"}], "]"}], ",", "first"}], "]"}]}]}], "]"}]}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"PermWord", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"PermMemberQ", ",", "2"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", 
   RowBox[{"PermWord", ",", "PermMemberQ"}], "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Special cases:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermMemberQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermMemberQ", "[", 
    RowBox[{"ID", ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermMemberQ", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermMemberQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermMemberQ", "[", 
    RowBox[{"ID", ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermMemberQ", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermMemberQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermMemberQ", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1"}], "}"}], "]"}], ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "False"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermMemberQ", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermMemberQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermMemberQ", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1"}], "}"}], "]"}], ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "False"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermMemberQ", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermMemberQ", ",", "\[IndentingNewLine]", 
   RowBox[{"PermMemberQ", "[", 
    RowBox[{
     RowBox[{"Rules", "[", "]"}], ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermMemberQ", ",", "5", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermWord", ",", "\[IndentingNewLine]", 
   RowBox[{"PermWord", "[", 
    RowBox[{"ID", ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"ID", ",", "ID"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermWord", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermWord", ",", "\[IndentingNewLine]", 
   RowBox[{"PermWord", "[", 
    RowBox[{"ID", ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", "ID", "}"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermWord", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermWord", ",", "\[IndentingNewLine]", 
   RowBox[{"PermWord", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1"}], "}"}], "]"}], ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], "]"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermWord", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermWord", ",", "\[IndentingNewLine]", 
   RowBox[{"PermWord", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1"}], "}"}], "]"}], ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], "]"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermWord", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"PermWord", ",", "\[IndentingNewLine]", 
   RowBox[{"PermWord", "[", 
    RowBox[{
     RowBox[{"Rules", "[", "]"}], ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"Rules", "[", "]"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"PermWord", ",", "5", ",", "True"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["4.3.3. FromBaseImage", "Subsubsection"],

Cell["\<\
We know that a permutation is uniquely defined by the images of a base under \
that permutation. This function finds the permutation corresponding to a \
given list of images and a SGS.\
\>", "Text"],

Cell["This is algorithm 10.5 of Butler.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FromBaseImage"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"FromBaseImage[list, SGS] gives the permutation in the group \
described by SGS such that the images of the points in the base are the \
points in list (assumed to have the length of the base of the SGS). If no \
permutation in the group gives the list of points then an error message is \
thrown. A third argument can be given with the length of the internal \
Schreier vectors used.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567977999-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"FromBaseImage", "::", "noimgs"}], "=", 
   "\"\<Invalid list of images `1`.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FromBaseImage", "[", 
    RowBox[{"images_List", ",", 
     RowBox[{"sym", ":", 
      RowBox[{"(", 
       RowBox[{"_Symmetric", "|", "_Antisymmetric"}], ")"}]}], ",", 
     "len___"}], "]"}], ":=", 
   RowBox[{"FromBaseImage", "[", 
    RowBox[{"images", ",", 
     RowBox[{"SchreierSims", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "sym"}], "]"}], ",", "len"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FromBaseImage", "[", 
    RowBox[{"images_List", ",", "SGS_StrongGenSet"}], "]"}], ":=", 
   RowBox[{"FromBaseImage", "[", 
    RowBox[{"images", ",", "SGS", ",", 
     RowBox[{"PermLength", "[", "SGS", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FromBaseImage", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}], ",", "0"}], "]"}], ":=", "ID"}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FromBaseImage", "[", 
    RowBox[{"images_List", ",", 
     RowBox[{"SGS", ":", 
      RowBox[{"StrongGenSet", "[", 
       RowBox[{"base_List", ",", "GS_GenSet"}], "]"}]}], ",", "len_Integer"}],
     "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i", ",", "u", ",", 
       RowBox[{"g", "=", "ID"}], ",", 
       RowBox[{"schvecs", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"SchreierOrbits", "[", 
           RowBox[{"#", ",", "len"}], "]"}], "&"}], "/@", 
         RowBox[{"StabilizerChain", "[", "SGS", "]"}]}]}], ",", 
       RowBox[{"imgs", "=", "images"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "images", "]"}], "=!=", 
         RowBox[{"Length", "[", "base", "]"}]}], ",", 
        RowBox[{"Throw", "[", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"FromBaseImage", "::", "noimgs"}], ",", "images"}], "]"}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "\[LessEqual]", 
         RowBox[{"Length", "[", "imgs", "]"}]}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"schvecs", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", 
             RowBox[{"imgs", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ","}]}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"u", "=", 
          RowBox[{"TraceSchreier", "[", 
           RowBox[{
            RowBox[{"imgs", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", 
            RowBox[{"schvecs", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"g", "=", 
          RowBox[{"PermProduct", "[", 
           RowBox[{"u", ",", "g"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"imgs", "=", 
          RowBox[{"OnPoints", "[", 
           RowBox[{"imgs", ",", 
            RowBox[{"InversePerm", "[", "u", "]"}]}], "]"}]}]}]}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{" ", 
         RowBox[{",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Throw", "[", 
            RowBox[{"Message", "[", 
             RowBox[{
              RowBox[{"FromBaseImage", "::", "noimgs"}], ",", "images"}], 
             "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], "*)"}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"imgs", "\[Equal]", "base"}], ",", "g", ",", 
        RowBox[{"Throw", "[", 
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"FromBaseImage", "::", "noimgs"}], ",", "images"}], "]"}], 
         "]"}]}], "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"FromBaseImage", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "FromBaseImage", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Example:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"GS", "=", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"7", ",", "8"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"9", ",", "10"}], "}"}], "]"}]}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "6"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"5", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"6", ",", "8"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"7", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"8", ",", "10"}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"base", "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SGS", "=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{"base", ",", "GS"}], "]"}]}], ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"perm", "=", 
  RowBox[{"PermProduct", "@@", "GS"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Cycles", "[", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "10", ",", "7", ",", "6", ",", "3", ",", "2", ",", "9", ",", 
     "8", ",", "5", ",", "4"}], "}"}], "]"}]}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OnPoints", "[", 
  RowBox[{"base", ",", "perm"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"10", ",", "2", ",", "4", ",", "6", ",", "8"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"FromBaseImage", ",", "\[IndentingNewLine]", 
   RowBox[{"FromBaseImage", "[", 
    RowBox[{"%", ",", "SGS"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "10", ",", "7", ",", "6", ",", "3", ",", "2", ",", "9", ",", 
       "8", ",", "5", ",", "4"}], "}"}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"FromBaseImage", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"word", "=", 
  RowBox[{"PermWord", "[", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "10", ",", "7", ",", "6", ",", "3", ",", "2", ",", "9", ",", 
        "8", ",", "5", ",", "4"}], "}"}], "]"}]}], "\[IndentingNewLine]", ",",
     "SGS"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Cycles", "[", "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"9", ",", "10"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "10", ",", "8", ",", "6", ",", "4", ",", "2", ",", "9", ",", 
       "7", ",", "5", ",", "3"}], "}"}], "]"}]}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermProduct", "@@", "word"}]], "Input"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Cycles", "[", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "10", ",", "7", ",", "6", ",", "3", ",", "2", ",", "9", ",", 
     "8", ",", "5", ",", "4"}], "}"}], "]"}]}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "===", "perm"}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell["\<\
Let us have a closer look at that example. The SGS gives the following chain \
of stabilizers:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"chain", "=", 
    RowBox[{"StabilizerChain", "[", "SGS", "]"}]}], ")"}], "//", 
  "ColumnForm"}]], "Input"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"Cycles", "[", 
           RowBox[{"{", 
            RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ",", 
         RowBox[{"-", 
          RowBox[{"Cycles", "[", 
           RowBox[{"{", 
            RowBox[{"3", ",", "4"}], "}"}], "]"}]}], ",", 
         RowBox[{"-", 
          RowBox[{"Cycles", "[", 
           RowBox[{"{", 
            RowBox[{"5", ",", "6"}], "}"}], "]"}]}], ",", 
         RowBox[{"-", 
          RowBox[{"Cycles", "[", 
           RowBox[{"{", 
            RowBox[{"7", ",", "8"}], "}"}], "]"}]}], ",", 
         RowBox[{"-", 
          RowBox[{"Cycles", "[", 
           RowBox[{"{", 
            RowBox[{"9", ",", "10"}], "}"}], "]"}]}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "3"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"2", ",", "4"}], "}"}]}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"3", ",", "5"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"4", ",", "6"}], "}"}]}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"5", ",", "7"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"6", ",", "8"}], "}"}]}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"7", ",", "9"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"8", ",", "10"}], "}"}]}], "]"}]}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "5", ",", "7", ",", "9"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"Cycles", "[", 
           RowBox[{"{", 
            RowBox[{"3", ",", "4"}], "}"}], "]"}]}], ",", 
         RowBox[{"-", 
          RowBox[{"Cycles", "[", 
           RowBox[{"{", 
            RowBox[{"5", ",", "6"}], "}"}], "]"}]}], ",", 
         RowBox[{"-", 
          RowBox[{"Cycles", "[", 
           RowBox[{"{", 
            RowBox[{"7", ",", "8"}], "}"}], "]"}]}], ",", 
         RowBox[{"-", 
          RowBox[{"Cycles", "[", 
           RowBox[{"{", 
            RowBox[{"9", ",", "10"}], "}"}], "]"}]}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"3", ",", "5"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"4", ",", "6"}], "}"}]}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"5", ",", "7"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"6", ",", "8"}], "}"}]}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"7", ",", "9"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"8", ",", "10"}], "}"}]}], "]"}]}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"5", ",", "7", ",", "9"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"Cycles", "[", 
           RowBox[{"{", 
            RowBox[{"5", ",", "6"}], "}"}], "]"}]}], ",", 
         RowBox[{"-", 
          RowBox[{"Cycles", "[", 
           RowBox[{"{", 
            RowBox[{"7", ",", "8"}], "}"}], "]"}]}], ",", 
         RowBox[{"-", 
          RowBox[{"Cycles", "[", 
           RowBox[{"{", 
            RowBox[{"9", ",", "10"}], "}"}], "]"}]}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"5", ",", "7"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"6", ",", "8"}], "}"}]}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"7", ",", "9"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"8", ",", "10"}], "}"}]}], "]"}]}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"7", ",", "9"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"Cycles", "[", 
           RowBox[{"{", 
            RowBox[{"7", ",", "8"}], "}"}], "]"}]}], ",", 
         RowBox[{"-", 
          RowBox[{"Cycles", "[", 
           RowBox[{"{", 
            RowBox[{"9", ",", "10"}], "}"}], "]"}]}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"7", ",", "9"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"8", ",", "10"}], "}"}]}], "]"}]}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "9", "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"-", 
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"9", ",", "10"}], "}"}], "]"}]}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{
    xAct`xPerm`StrongGenSet[{1, 3, 5, 7, 9}, 
     xAct`xPerm`GenSet[-xAct`xPerm`Cycles[{1, 2}], -
      xAct`xPerm`Cycles[{3, 4}], -xAct`xPerm`Cycles[{5, 6}], -
      xAct`xPerm`Cycles[{7, 8}], -xAct`xPerm`Cycles[{9, 10}], 
      xAct`xPerm`Cycles[{1, 3}, {2, 4}], 
      xAct`xPerm`Cycles[{3, 5}, {4, 6}], 
      xAct`xPerm`Cycles[{5, 7}, {6, 8}], 
      xAct`xPerm`Cycles[{7, 9}, {8, 10}]]], 
    xAct`xPerm`StrongGenSet[{3, 5, 7, 9}, 
     xAct`xPerm`GenSet[-xAct`xPerm`Cycles[{3, 4}], -
      xAct`xPerm`Cycles[{5, 6}], -xAct`xPerm`Cycles[{7, 8}], -
      xAct`xPerm`Cycles[{9, 10}], 
      xAct`xPerm`Cycles[{3, 5}, {4, 6}], 
      xAct`xPerm`Cycles[{5, 7}, {6, 8}], 
      xAct`xPerm`Cycles[{7, 9}, {8, 10}]]], 
    xAct`xPerm`StrongGenSet[{5, 7, 9}, 
     xAct`xPerm`GenSet[-xAct`xPerm`Cycles[{5, 6}], -
      xAct`xPerm`Cycles[{7, 8}], -xAct`xPerm`Cycles[{9, 10}], 
      xAct`xPerm`Cycles[{5, 7}, {6, 8}], 
      xAct`xPerm`Cycles[{7, 9}, {8, 10}]]], 
    xAct`xPerm`StrongGenSet[{7, 9}, 
     xAct`xPerm`GenSet[-xAct`xPerm`Cycles[{7, 8}], -
      xAct`xPerm`Cycles[{9, 10}], 
      xAct`xPerm`Cycles[{7, 9}, {8, 10}]]], 
    xAct`xPerm`StrongGenSet[{9}, 
     xAct`xPerm`GenSet[-xAct`xPerm`Cycles[{9, 10}]]], 
    xAct`xPerm`StrongGenSet[{}, 
     xAct`xPerm`GenSet[]]}],
  Editable->False]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrderOfGroup", "/@", "chain"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3840", ",", "384", ",", "48", ",", "8", ",", "2", ",", "1"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\<\
The last permutation in the word is a permutation of the group, but not the \
first stabilizer. Previous perms in the word belong to more stabilizers. The \
last line shows simply the fact that the first element of the word (ID) \
belongs to the last stabilizer (the identity group).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Outer", "[", 
   RowBox[{"PermMemberQ", ",", 
    RowBox[{"Reverse", "[", "word", "]"}], ",", "chain"}], "]"}], "//", 
  "MatrixForm"}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"True", "False", "False", "False", "False", "False"},
     {"True", "True", "False", "False", "False", "False"},
     {"True", "True", "True", "False", "False", "False"},
     {"True", "True", "True", "True", "False", "False"},
     {"True", "True", "True", "True", "True", "False"},
     {"True", "True", "True", "True", "True", "True"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
If the list of images does not correspond to an element of the group, then we \
get an error message:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Catch", "@", 
  RowBox[{"FromBaseImage", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5", ",", "2", ",", "3", ",", "9", ",", "4"}], "}"}], ",", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{"base", ",", "GS"}], "]"}], ",", "10"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"FromBaseImage", "::", "noimgs"}], "MessageName"], ":", 
  " ", "\<\"Invalid list of images \[NoBreak]\\!\\({5, 2, 3, 9, 4}\\)\
\[NoBreak].\"\>"}]], "Message", "MSG"]
}, Open  ]],

Cell["We can get a residue:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"perm", "=", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7"}], "}"}],
     "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermWord", "[", 
  RowBox[{"perm", ",", "SGS"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "6", ",", "7"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], "]"}]}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermProduct", "@@", "%"}]], "Input"],

Cell[BoxData[
 RowBox[{"Cycles", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7"}], 
   "}"}], "]"}]], "Output"]
}, Open  ]],

Cell["such that next permutation does belong to the group:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermProduct", "@@", 
  RowBox[{"Rest", "[", "%%", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Cycles", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "6"}], "}"}]}], "]"}]}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermMemberQ", "[", 
  RowBox[{"%", ",", "SGS"}], "]"}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"perm", "=."}], "\[IndentingNewLine]", 
 RowBox[{"GS", "=."}], "\[IndentingNewLine]", 
 RowBox[{"base", "=."}], "\[IndentingNewLine]", 
 RowBox[{"SGS", "=."}], "\[IndentingNewLine]", 
 RowBox[{"word", "=."}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["4.3.4. Enumeration of all base images", "Subsubsection"],

Cell["This is algorithm 10.8 of Butler.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AllBaseImages"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"AllBaseImages[SGS] gives a complete list of rules baseimages \
-> perm, where baseimages is a list of images of the base of SGS and perm is \
its corresponding permutation, as would be given by FromBaseImage[baseimages, \
SGS]. A second argument can be given with the length of the Schreier vectors \
used.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567978001-5455693"]
}, Open  ]],

Cell["\<\
This function lists all elements of a group. Note that we use PermDeg and not \
PermLength because it produces shorter or equal Schreier vectors.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"AllBaseImages", "[", 
    RowBox[{"sym", ":", 
     RowBox[{"(", 
      RowBox[{"_Symmetric", "|", "_Antisymmetric"}], ")"}]}], "]"}], ":=", 
   RowBox[{"AllBaseImages", "[", 
    RowBox[{"SchreierSims", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "sym"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"AllBaseImages", "[", 
    RowBox[{"SGS", ":", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{"base_List", ",", "GS_GenSet"}], "]"}]}], "]"}], ":=", 
   RowBox[{"AllBaseImages", "[", 
    RowBox[{"SGS", ",", 
     RowBox[{"PermDeg", "[", "SGS", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"AllBaseImages", "[", 
    RowBox[{
     RowBox[{"SGS", ":", 
      RowBox[{"StrongGenSet", "[", 
       RowBox[{"base_List", ",", "GS_GenSet"}], "]"}]}], ",", "len_Integer"}],
     "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"BaseImage", "[", 
    RowBox[{"1", ",", 
     RowBox[{"Length", "[", "base", "]"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "ID", "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"SchreierOrbits", "[", 
        RowBox[{"#", ",", "len"}], "]"}], "&"}], "/@", 
      RowBox[{"StabilizerChain", "[", "SGS", "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"AllBaseImages", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "AllBaseImages", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Internal recursive part:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BaseImage", "[", 
    RowBox[{
    "i_", ",", "k_", ",", "points_List", ",", "word_List", ",", "schvecs_"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"g", "=", 
        RowBox[{"PermProduct", "@@", "word"}]}], ",", "ig", ",", "j", ",", 
       "u", ",", "Deltab"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"i", "\[Equal]", 
        RowBox[{"k", "+", "1"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"Rule", "[", 
         RowBox[{"points", ",", "g"}], "]"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ig", "=", 
         RowBox[{"InversePerm", "[", "g", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Deltab", "=", 
         RowBox[{"OnPoints", "[", 
          RowBox[{
           RowBox[{"schvecs", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", "g"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"u", "=", 
             RowBox[{"TraceSchreier", "[", 
              RowBox[{
               RowBox[{"OnPoints", "[", 
                RowBox[{
                 RowBox[{"Deltab", "[", 
                  RowBox[{"[", "j", "]"}], "]"}], ",", "ig"}], "]"}], ",", 
               RowBox[{"schvecs", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"BaseImage", "[", 
             RowBox[{
              RowBox[{"i", "+", "1"}], ",", "k", ",", 
              RowBox[{"Append", "[", 
               RowBox[{"points", ",", 
                RowBox[{"Deltab", "[", 
                 RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"u", ",", "g"}], "}"}], ",", "schvecs"}], "]"}]}], ",",
            "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"j", ",", "1", ",", 
             RowBox[{"Length", "[", "Deltab", "]"}]}], "}"}]}], "]"}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["\<\
Examples. Note that not all combinations of images are allowed. For instance \
images {1,2} do not identify a valid permutation:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"AllBaseImages", "[", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ",", 
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"3", ",", "4"}], "}"}], "]"}]}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "3"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], "]"}], "]"}], "//",
   "ColumnForm"}]], "Input"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", "ID"}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "4"}], "}"}], "\[Rule]", 
      RowBox[{"-", 
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4"}], "}"}], "]"}]}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", 
      RowBox[{"-", 
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], "]"}]}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}], "\[Rule]", 
      RowBox[{"Cycles", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4"}], "}"}]}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"Cycles", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "2"}], "}"}], "\[Rule]", 
      RowBox[{"-", 
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}]}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"4", ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"-", 
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}]}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"4", ",", "2"}], "}"}], "\[Rule]", 
      RowBox[{"Cycles", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "4"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{{1, 3} -> 
    xAct`xPerm`ID, {1, 4} -> -xAct`xPerm`Cycles[{3, 4}], {2, 3} -> -
     xAct`xPerm`Cycles[{1, 2}], {2, 4} -> 
    xAct`xPerm`Cycles[{1, 2}, {3, 4}], {3, 1} -> 
    xAct`xPerm`Cycles[{1, 3}, {2, 4}], {3, 2} -> -
     xAct`xPerm`Cycles[{1, 3, 2, 4}], {4, 1} -> -
     xAct`xPerm`Cycles[{1, 4, 2, 3}], {4, 2} -> 
    xAct`xPerm`Cycles[{1, 4}, {2, 3}]}],
  Editable->False]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"AllBaseImages", "[", 
   RowBox[{"Antisymmetric", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}], "//", 
  "Column"}]], "Input"],

Cell[BoxData[
 RowBox[{"Column", "[", 
  RowBox[{"AllBaseImages", "[", 
   RowBox[{"SchreierSims", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"Antisymmetric", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}]}], "]"}], "]"}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Catch", "@", 
  RowBox[{"FromBaseImage", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"GenSet", "[", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ",", 
        RowBox[{"-", 
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}], "]"}]}], ",", 
        RowBox[{"Cycles", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], "]"}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"FromBaseImage", "::", "noimgs"}], "MessageName"], ":", 
  " ", "\<\"Invalid list of images \[NoBreak]\\!\\({1, \
2}\\)\[NoBreak].\"\>"}]], "Message", "MSG"]
}, Open  ]],

Cell["\<\
Note the order of the permutations. Ordering the bases with normal ordering, \
as we have just done produces also normal ordering in the group:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"group", "=", 
  RowBox[{"Dimino", "[", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], "]"}]}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}], "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"Group", "[", 
  RowBox[{
   RowBox[{"Cycles", "[", "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "3"}], "}"}], "]"}]}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "3"}], "}"}]}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2"}], "}"}]}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2", ",", "3", ",", "1"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "4", ",", "1"}], "}"}], "]"}]}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2"}], "}"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermSort", "[", "group", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Group", "[", 
  RowBox[{
   RowBox[{"Cycles", "[", "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "3"}], "}"}]}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2"}], "}"}]}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2"}], "}"}]}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "3"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "4", ",", "1"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2", ",", "3", ",", "1"}], "}"}], "]"}]}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell["However, sorting with the base produces a different output:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermSort", "[", 
  RowBox[{"group", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Group", "[", 
  RowBox[{
   RowBox[{"Cycles", "[", "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "3"}], "}"}], "]"}]}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2"}], "}"}]}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "4", ",", "1"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], "]"}]}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "3"}], "}"}]}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2", ",", "3", ",", "1"}], "}"}], "]"}]}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2"}], "}"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["\<\
v9 note : I have the impression that the ordering is not correct now...\
\>", "Text"],

Cell["Special cases:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"AllBaseImages", "[", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"GenSet", "[", "]"}]}], "]"}], "]"}], "//", 
  "ColumnForm"}]], "Input"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{
      RowBox[{"{", "}"}], "\[Rule]", "ID"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{{} -> xAct`xPerm`ID}],
  Editable->False]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AllBaseImages", "[", 
  RowBox[{"StrongGenSet", "[", 
   RowBox[{
    RowBox[{"{", "1", "}"}], ",", 
    RowBox[{"GenSet", "[", "]"}]}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output"]
}, Open  ]],

Cell["The symmetric group. Here all base images are allowed:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SGS", "=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}], "]"}]}],
     "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"AllBaseImages", "[", "SGS", "]"}], "//", "ColumnForm"}]], "Input"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3"}], "}"}], "\[Rule]", "ID"}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "2"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "4"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "4", ",", "2"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "4", ",", "3"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "4"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "4", ",", "3"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "1", ",", "2", ",", "4"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "4"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "4", ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "1", ",", "4", ",", "2"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "4", ",", "3"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"4", ",", "1", ",", "3", ",", "2"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "1", ",", "2"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "1", ",", "4"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4", ",", "1", ",", "3"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "2", ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "2", ",", "1", ",", "4"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "2", ",", "4"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"4", ",", "2", ",", "1", ",", "3"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "2"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"4", ",", "3", ",", "1", ",", "2"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"4", ",", "1", ",", "2"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"4", ",", "1", ",", "3"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4", ",", "3", ",", "1"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"4", ",", "2", ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "2", ",", "4", ",", "1"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"4", ",", "2", ",", "3"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"4", ",", "2", ",", "3", ",", "1"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"4", ",", "3", ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"4", ",", "3", ",", "2"}], "}"}], "\[Rule]", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"4", ",", "3", ",", "2", ",", "1"}], "}"}], "]"}]}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{{1, 2, 3} -> xAct`xPerm`ID, {1, 2, 4} -> 
    xAct`xPerm`Perm[{1, 2, 4, 3}], {1, 3, 2} -> 
    xAct`xPerm`Perm[{1, 3, 2, 4}], {1, 3, 4} -> 
    xAct`xPerm`Perm[{1, 4, 2, 3}], {1, 4, 2} -> 
    xAct`xPerm`Perm[{1, 3, 4, 2}], {1, 4, 3} -> 
    xAct`xPerm`Perm[{1, 4, 3, 2}], {2, 1, 3} -> 
    xAct`xPerm`Perm[{2, 1, 3, 4}], {2, 1, 4} -> 
    xAct`xPerm`Perm[{2, 1, 4, 3}], {2, 3, 1} -> 
    xAct`xPerm`Perm[{3, 1, 2, 4}], {2, 3, 4} -> 
    xAct`xPerm`Perm[{4, 1, 2, 3}], {2, 4, 1} -> 
    xAct`xPerm`Perm[{3, 1, 4, 2}], {2, 4, 3} -> 
    xAct`xPerm`Perm[{4, 1, 3, 2}], {3, 1, 2} -> 
    xAct`xPerm`Perm[{2, 3, 1, 4}], {3, 1, 4} -> 
    xAct`xPerm`Perm[{2, 4, 1, 3}], {3, 2, 1} -> 
    xAct`xPerm`Perm[{3, 2, 1, 4}], {3, 2, 4} -> 
    xAct`xPerm`Perm[{4, 2, 1, 3}], {3, 4, 1} -> 
    xAct`xPerm`Perm[{3, 4, 1, 2}], {3, 4, 2} -> 
    xAct`xPerm`Perm[{4, 3, 1, 2}], {4, 1, 2} -> 
    xAct`xPerm`Perm[{2, 3, 4, 1}], {4, 1, 3} -> 
    xAct`xPerm`Perm[{2, 4, 3, 1}], {4, 2, 1} -> 
    xAct`xPerm`Perm[{3, 2, 4, 1}], {4, 2, 3} -> 
    xAct`xPerm`Perm[{4, 2, 3, 1}], {4, 3, 1} -> 
    xAct`xPerm`Perm[{3, 4, 2, 1}], {4, 3, 2} -> 
    xAct`xPerm`Perm[{4, 3, 2, 1}]}],
  Editable->False]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromBaseImage", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "1", ",", "3"}], "}"}], ",", "SGS"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Perm", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "4", ",", "3", ",", "1"}], "}"}], "]"}]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"SGS", "=."}]], "Input"],

Cell["Let us now compare timings of Dimino and AllBaseImages:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SGS", "=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
     ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "2", ",", "1", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7"}], 
         "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "3", ",", "2", ",", "4", ",", "5", ",", "6", ",", "7"}], 
         "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "4", ",", "3", ",", "5", ",", "6", ",", "7"}], 
         "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "3", ",", "5", ",", "4", ",", "6", ",", "7"}], 
         "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "3", ",", "4", ",", "6", ",", "5", ",", "7"}], 
         "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "7", ",", "6"}], 
         "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "7", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "1"}], 
         "}"}], "]"}]}], "]"}]}], "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"permsMathematica", "=", 
    RowBox[{"Permutations", "[", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7"}], 
      "}"}], "]"}]}], ";"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.00011799999999999999508379366908172869`2.0924819205857492", ",", 
   "Null"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"permsDimino", "=", 
    RowBox[{"Dimino", "[", 
     RowBox[{"SGS", "[", 
      RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.24029100000000000458832971617084695026`5.401337418067984", ",", "Null"}],
   "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"permsAllBases", "=", 
    RowBox[{"AllBaseImages", "[", "SGS", "]"}]}], ";"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.01197099999999995389998730388469994068`6.025767980407482", ",", "Null"}],
   "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Length", "[", "permsMathematica", "]"}], ",", 
   RowBox[{"Length", "[", "permsDimino", "]"}], ",", 
   RowBox[{"Length", "[", "permsAllBases", "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5040", ",", "5040", ",", "5040"}], "}"}]], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["4.4. Reordering points. Base-based ordering", "Subsection"],

Cell["Example:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"GS", "=", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "4", ",", "3", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6", ",", "9", ",", "8"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "5", ",", "3", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "8", ",", "7", ",", "6"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "10"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"6", ",", "8"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "9"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "11"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "6"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "8"}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"base", "=", 
   RowBox[{"{", 
    RowBox[{"11", ",", "10", ",", "1", ",", "2"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SGS", "=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{"base", ",", "GS"}], "]"}]}], ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrderOfGroup", "[", "SGS", "]"}]], "Input"],

Cell[BoxData["7920"], "Output"]
}, Open  ]],

Cell["Take two permutations and their base images:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"perm1", "=", 
  RowBox[{"PermProduct", "@@", "GS"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"Cycles", "[", 
  RowBox[{"{", 
   RowBox[{
   "1", ",", "4", ",", "9", ",", "6", ",", "8", ",", "5", ",", "2", ",", "7", 
    ",", "3", ",", "10", ",", "11"}], "}"}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"baseimages1", "=", 
  RowBox[{"OnPoints", "[", 
   RowBox[{"base", ",", "perm1"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "11", ",", "4", ",", "7"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"perm2", "=", 
  RowBox[{"PermProduct", "@@", 
   RowBox[{"GS", "[", 
    RowBox[{"[", 
     RowBox[{"First", "@", 
      RowBox[{"RandomPerm", "[", "5", "]"}]}], "]"}], "]"}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{"Cycles", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "10", ",", "6", ",", "5", ",", "11"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "3", ",", "9", ",", "8"}], "}"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"baseimages2", "=", 
  RowBox[{"OnPoints", "[", 
   RowBox[{"base", ",", "perm2"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "6", ",", "10", ",", "4"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Now we can decide whether the permutations are sorted or not:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"comp", "[", 
    RowBox[{"i_", ",", "i_"}], "]"}], ":=", "Null"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"comp", "[", 
    RowBox[{"i_", ",", "j_"}], "]"}], ":=", 
   RowBox[{"Throw", "[", 
    RowBox[{"i", "<", "j"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Catch", "@", 
  RowBox[{"Inner", "[", 
   RowBox[{"comp", ",", "baseimages1", ",", "baseimages2", ",", "List"}], 
   "]"}]}]}], "Input"],

Cell[BoxData["False"], "Output"]
}, Open  ]],

Cell["\<\
This is equivalent to lexicographic order of the permutations if we reorder \
the points so that the beginning of the set is given by the base:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"points", "=", 
  RowBox[{"Join", "[", 
   RowBox[{"base", ",", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{
       RowBox[{"Range", "[", "11", "]"}], ",", "base"}], "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"First", "@", 
       RowBox[{"RandomPerm", "[", "7", "]"}]}], "]"}], "]"}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "11", ",", "10", ",", "1", ",", "2", ",", "5", ",", "3", ",", "4", ",", "6",
    ",", "7", ",", "8", ",", "9"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"images1", "=", 
  RowBox[{"OnPoints", "[", 
   RowBox[{"points", ",", "perm1"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "11", ",", "4", ",", "7", ",", "2", ",", "10", ",", "9", ",", "8",
    ",", "3", ",", "5", ",", "6"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"images2", "=", 
  RowBox[{"OnPoints", "[", 
   RowBox[{"points", ",", "perm2"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "6", ",", "10", ",", "4", ",", "11", ",", "9", ",", "3", ",", "5",
    ",", "7", ",", "2", ",", "8"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Catch", "@", 
  RowBox[{"Inner", "[", 
   RowBox[{"comp", ",", "images1", ",", "images2", ",", "List"}], 
   "]"}]}]], "Input"],

Cell[BoxData["False"], "Output"]
}, Open  ]],

Cell["\<\
Note that the ordering of the points before mapping is independent of the \
order of points after mapping. In this example, for instance, we have used \
the ordering given by the base before mapping, and then the usual numeric \
order for integers.\
\>", "Text"],

Cell["\<\
However, the question is whether any ordering of the points after mapping has \
the identity as first element of a set of sorted permutations. We see that in \
our example that is false:\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"perm0", "=", "ID"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"baseimages0", "=", 
  RowBox[{"OnPoints", "[", 
   RowBox[{"base", ",", "perm0"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"11", ",", "10", ",", "1", ",", "2"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Now we can decide whether the permutations are sorted or not:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Catch", "@", 
  RowBox[{"Inner", "[", 
   RowBox[{"comp", ",", "baseimages0", ",", "baseimages1", ",", "List"}], 
   "]"}]}]], "Input"],

Cell[BoxData["False"], "Output"]
}, Open  ]],

Cell["\<\
This is equivalent to lexicographic order of the permutations if we reorder \
the points so that the beginning of the set is given by the base:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"images0", "=", 
  RowBox[{"OnPoints", "[", 
   RowBox[{"points", ",", "perm0"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "11", ",", "10", ",", "1", ",", "2", ",", "5", ",", "3", ",", "4", ",", "6",
    ",", "7", ",", "8", ",", "9"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Catch", "@", 
  RowBox[{"Inner", "[", 
   RowBox[{"comp", ",", "images0", ",", "images1", ",", "List"}], 
   "]"}]}]], "Input"],

Cell[BoxData["False"], "Output"]
}, Open  ]],

Cell["\<\
Now we change to a new ordering based on the base, and now the identity is \
first:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"compB", "[", 
    RowBox[{"i_", ",", "i_"}], "]"}], ":=", "Null"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"compB", "[", 
    RowBox[{"i_", ",", "j_"}], "]"}], ":=", 
   RowBox[{"Throw", "[", 
    RowBox[{"LessB", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"i", ",", "j"}], "}"}], ",", "base"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Catch", "@", 
  RowBox[{"Inner", "[", 
   RowBox[{"compB", ",", "baseimages0", ",", "baseimages1", ",", "List"}], 
   "]"}]}]}], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Catch", "@", 
  RowBox[{"Inner", "[", 
   RowBox[{"compB", ",", "images0", ",", "images1", ",", "List"}], 
   "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["4.5. Backtrack search", "Subsection"],

Cell[CellGroupData[{

Cell["4.5.0. Comments", "Subsubsection"],

Cell["\<\
Given a group G with a SGS we want to construct a subgroup H of G identifying \
another sgs for H with the same base. The subgroup H is identified by the \
decidable property P. The algorithm proceeds constructing subgroups Hi of the \
stabilizers Gi from the smallest stabilizers Gk, Gk-1, etc towards the \
largest stabilizers G2, G1. We first take the whole Gk-1 and construct Hk-1, \
checking P on all permutations of Gk-1. Now we go to Gk-2. The key point is \
that we do not have to check all permutations in Gk-2 \\ Gk-1 because we can \
use the cosets formed from the subgroup Hk-1. For example, if g is a \
permutation of Gk-2 obeying (or not obeying) the property P then it is clear \
that all permutations in Hk-1 x g will obey it too (or will not obey it \
either). This can be easily implemented through the use of base images.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["4.5.1. Search and Generate", "Subsubsection"],

Cell["\<\
The group G is described by its stabilizer-chain. The procedure is divided in \
two parts: there is a first routine constructing each stabilizer of the group \
K (function Search) and a recursive routine finding new permutations of their \
generating sets (funtion Generate). The \"property\" argument is a Boolean \
function acting on a permutation of G.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Search"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"Search[SGS, P, s, SGSK] returns the s-th stabilizer in the \
stabilizer-chain of the subgroup K of permutations obeying the property P in \
the group G (described by the strong generating set SGS). It is assumed \
P[perm] returns True or False on any permutation of the group G. The fourth \
argument is a strong generating set for a subgroup of K, possibly a deeper \
stabilizer in its stabilizer-chain.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567978004-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "Search", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"xPermVerbose", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Search", "[", 
    RowBox[{
    "SGS_StrongGenSet", ",", "property_", ",", "s_Integer", ",", "SGSK_", ",",
      "options___"}], "]"}], ":=", 
   RowBox[{"Search", "[", 
    RowBox[{
     RowBox[{"StabilizerChain", "[", "SGS", "]"}], ",", "property", ",", "s", 
     ",", "SGSK", ",", "options"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Search", "[", 
    RowBox[{
    "chain_List", ",", "property_", ",", "s_Integer", ",", "SGSK_", ",", 
     RowBox[{"options", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"base", "=", 
        RowBox[{"chain", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ",", 
       RowBox[{"newSGSK", "=", "SGSK"}], ",", 
       RowBox[{"k", "=", 
        RowBox[{
         RowBox[{"Length", "[", "chain", "]"}], "-", "1"}]}], ",", "Deltas", 
       ",", "gammas", ",", "Korbit", ",", "verb"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"verb", "=", 
       RowBox[{"OptionValue", "[", "xPermVerbose", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"s", "\[Equal]", 
         RowBox[{"k", "+", "1"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"newSGSK", "=", 
         RowBox[{"StrongGenSet", "[", 
          RowBox[{"base", ",", 
           RowBox[{"GenSet", "[", "]"}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"newSGSK", "=", 
          RowBox[{"Search", "[", 
           RowBox[{"chain", ",", "property", ",", 
            RowBox[{"s", "+", "1"}], ",", "SGSK", ",", "options"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"Deltas", "=", 
          RowBox[{"Orbit", "[", 
           RowBox[{
            RowBox[{"base", "[", 
             RowBox[{"[", "s", "]"}], "]"}], ",", 
            RowBox[{"chain", "[", 
             RowBox[{"[", 
              RowBox[{"s", ",", "2"}], "]"}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"verb", ",", 
           RowBox[{"Print", "[", 
            RowBox[{"\"\<Branching over points \>\"", ",", "Deltas"}], 
            "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Avoid", " ", "rechecking", " ", 
           RowBox[{"permutations", ".", " ", "Not"}], " ", "in", " ", 
           RowBox[{"Butler", "'"}], "s", " ", "algorithm"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"s", "=!=", "k"}], ",", 
           RowBox[{"Deltas", "=", 
            RowBox[{"Drop", "[", 
             RowBox[{"Deltas", ",", "1"}], "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Do", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"gammas", "=", 
             RowBox[{"Deltas", "[", 
              RowBox[{"[", "j", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"Korbit", "=", 
             RowBox[{"Orbit", "[", 
              RowBox[{"gammas", ",", 
               RowBox[{"newSGSK", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"gammas", "===", 
               RowBox[{"MinB", "[", 
                RowBox[{"Korbit", ",", "base"}], "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"newSGSK", "=", 
                RowBox[{"Generate", "[", 
                 RowBox[{"chain", ",", "property", ",", "s", ",", 
                  RowBox[{"s", "+", "1"}], ",", 
                  RowBox[{"Append", "[", 
                   RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"base", ",", 
                    RowBox[{"s", "-", "1"}]}], "]"}], ",", "gammas"}], "]"}], 
                  ",", "newSGSK", ",", "verb"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Head", "[", "newSGSK", "]"}], "===", "Times"}], 
                 ",", 
                 RowBox[{"newSGSK", "=", 
                  RowBox[{"-", "newSGSK"}]}]}], "]"}]}]}], "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "1", ",", 
             RowBox[{"Length", "[", "Deltas", "]"}]}], "}"}]}], "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "newSGSK"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"Search", ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "Infinity"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "Search", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
When a new permutation is added to the SGS of K then we must return to \
Search, independently from the recursion level of Generate. To do that we use \
a dirty trick: marking the SGS of K with a minus sign in front.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Generate", "[", 
    RowBox[{
    "chain_List", ",", "property_", ",", "s_", ",", "i_", ",", "list_", ",", 
     "SGSK_", ",", "verb_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"base", "=", 
        RowBox[{"chain", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ",", 
       RowBox[{"k", "=", 
        RowBox[{
         RowBox[{"Length", "[", "chain", "]"}], "-", "1"}]}], ",", "g", ",", 
       RowBox[{"newSGSK", "=", "SGSK"}], ",", "Deltag", ",", "gammai", ",", 
       "otherSGSK"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"g", "=", 
       RowBox[{"FromBaseImage", "[", 
        RowBox[{"list", ",", 
         RowBox[{"ReplacePart", "[", 
          RowBox[{
           RowBox[{"chain", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"Take", "[", 
            RowBox[{"base", ",", 
             RowBox[{"Length", "[", "list", "]"}]}], "]"}], ",", "1"}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"i", "\[Equal]", 
         RowBox[{"k", "+", "1"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"verb", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
            "\"\<Generate at level \>\"", ",", "s", ",", "\"\< with i=\>\"", 
             ",", "i", ",", "\"\<. We have list \>\"", ",", "list", ",", 
             "\"\< and permutation \>\"", ",", "g"}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Not", "@", 
             RowBox[{"PermEqual", "[", 
              RowBox[{"g", ",", "ID"}], "]"}]}], "&&", 
            RowBox[{"property", "[", "g", "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"newSGSK", "=", 
             RowBox[{"-", 
              RowBox[{"StrongGenSet", "[", 
               RowBox[{
                RowBox[{"First", "@", "SGSK"}], ",", 
                RowBox[{"Append", "[", 
                 RowBox[{
                  RowBox[{"Last", "[", "SGSK", "]"}], ",", "g"}], "]"}]}], 
               "]"}]}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{"verb", ",", 
              RowBox[{"Print", "[", 
               RowBox[{"\"\<  Added permutation \>\"", ",", "g"}], "]"}]}], 
             "]"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Deltag", "=", 
          RowBox[{"OnPoints", "[", 
           RowBox[{
            RowBox[{"Orbit", "[", 
             RowBox[{
              RowBox[{"base", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", 
              RowBox[{"chain", "[", 
               RowBox[{"[", 
                RowBox[{"i", ",", "2"}], "]"}], "]"}]}], "]"}], ",", "g"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"verb", ",", 
           RowBox[{"Print", "[", 
            RowBox[{"\"\<Generating over points \>\"", ",", "Deltag"}], 
            "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Do", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"gammai", "=", 
             RowBox[{"Deltag", "[", 
              RowBox[{"[", "j", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"newSGSK", "=", 
             RowBox[{"Generate", "[", 
              RowBox[{"chain", ",", "property", ",", "s", ",", 
               RowBox[{"i", "+", "1"}], ",", 
               RowBox[{"Append", "[", 
                RowBox[{"list", ",", "gammai"}], "]"}], ",", "newSGSK", ",", 
               "verb"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Head", "[", "newSGSK", "]"}], "===", "Times"}], ",", 
              RowBox[{"Break", "[", "]"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"j", ",", "1", ",", 
             RowBox[{"Length", "[", "Deltag", "]"}]}], "}"}]}], "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "newSGSK"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["\<\
Butler has additional improvements based on restrictions on image points, but \
we do not implement that here.\
\>", "Text"],

Cell["Example: All permutations:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Search", "[", 
  RowBox[{
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "5", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "2", ",", "3", ",", "4", ",", "1"}], "}"}], 
        "]"}]}], "]"}]}], "]"}], ",", 
   RowBox[{"True", "&"}], ",", "1", ",", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"GenSet", "[", "]"}]}], "]"}], ",", 
   RowBox[{"xPermVerbose", "\[Rule]", "True"}]}], "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Branching over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5"}], "}"}]}],
  SequenceForm["Branching over points ", {4, 5}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "5", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   "ID"}],
  SequenceForm[
  "Generate at level ", 4, " with i=", 5, ". We have list ", {1, 2, 3, 4}, 
   " and permutation ", xAct`xPerm`ID],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "5", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "5"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "5", ",", "4"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 4, " with i=", 5, ". We have list ", {1, 2, 3, 5}, 
   " and permutation ", 
   xAct`xPerm`Perm[{1, 2, 3, 5, 4}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"  Added permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "5", ",", "4"}], "}"}], "]"}]}],
  SequenceForm["  Added permutation ", 
   xAct`xPerm`Perm[{1, 2, 3, 5, 4}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Branching over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "5"}], "}"}]}],
  SequenceForm["Branching over points ", {3, 4, 5}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generating over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}]}],
  SequenceForm["Generating over points ", {3, 5}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "5", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "5"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 3, " with i=", 5, ". We have list ", {1, 2, 4, 3}, 
   " and permutation ", 
   xAct`xPerm`Perm[{1, 2, 4, 3, 5}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"  Added permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "5"}], "}"}], "]"}]}],
  SequenceForm["  Added permutation ", 
   xAct`xPerm`Perm[{1, 2, 4, 3, 5}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Branching over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4", ",", "5"}], "}"}]}],
  SequenceForm["Branching over points ", {2, 3, 4, 5}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generating over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "5"}], "}"}]}],
  SequenceForm["Generating over points ", {2, 4, 5}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generating over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5"}], "}"}]}],
  SequenceForm["Generating over points ", {4, 5}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "5", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 2, " with i=", 5, ". We have list ", {1, 3, 2, 4}, 
   " and permutation ", 
   xAct`xPerm`Perm[{1, 3, 2, 4, 5}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"  Added permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}]}],
  SequenceForm["  Added permutation ", 
   xAct`xPerm`Perm[{1, 3, 2, 4, 5}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Branching over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "5", ",", "3", ",", "4"}], "}"}]}],
  SequenceForm["Branching over points ", {1, 2, 5, 3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generating over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4", ",", "5"}], "}"}]}],
  SequenceForm["Generating over points ", {1, 3, 4, 5}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generating over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "5"}], "}"}]}],
  SequenceForm["Generating over points ", {3, 4, 5}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generating over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5"}], "}"}]}],
  SequenceForm["Generating over points ", {4, 5}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "5", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 1, " with i=", 5, ". We have list ", {2, 1, 3, 4}, 
   " and permutation ", 
   xAct`xPerm`Perm[{2, 1, 3, 4, 5}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"  Added permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}]}],
  SequenceForm["  Added permutation ", 
   xAct`xPerm`Perm[{2, 1, 3, 4, 5}]],
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "5", ",", "4"}], "}"}], "]"}], 
     ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "5"}], "}"}], "]"}], 
     ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}], 
     ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}]}], 
    "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrderOfGroup", "[", "%", "]"}]], "Input"],

Cell[BoxData["120"], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["4.5.2. Examples: Centralizer", "Subsubsection"],

Cell["There are two examples given by Butler in pages 100 and 101:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"z", "=", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGS", "=", 
  RowBox[{"Search", "[", 
   RowBox[{
    RowBox[{"StrongGenSet", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
      RowBox[{"GenSet", "[", 
       RowBox[{
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"2", ",", "3"}], "}"}], "]"}], ",", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"3", ",", "4"}], "}"}], "]"}], ",", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "4"}], "}"}], "]"}]}], "]"}]}], "]"}], ",", 
    RowBox[{
     RowBox[{"PermEqual", "[", 
      RowBox[{
       RowBox[{"PermProduct", "[", 
        RowBox[{"z", ",", "#"}], "]"}], ",", 
       RowBox[{"PermProduct", "[", 
        RowBox[{"#", ",", "z"}], "]"}]}], "]"}], "&"}], ",", "1", ",", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"GenSet", "[", "]"}]}], "]"}], ",", 
    RowBox[{"xPermVerbose", "\[Rule]", "True"}]}], "]"}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Branching over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}]}],
  SequenceForm["Branching over points ", {3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   "ID"}],
  SequenceForm[
  "Generate at level ", 3, " with i=", 4, ". We have list ", {1, 2, 3}, 
   " and permutation ", xAct`xPerm`ID],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 3, " with i=", 4, ". We have list ", {1, 2, 4}, 
   " and permutation ", 
   xAct`xPerm`Cycles[{3, 4}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Branching over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4"}], "}"}]}],
  SequenceForm["Branching over points ", {2, 3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generating over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}]}],
  SequenceForm["Generating over points ", {2, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "2"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 2, " with i=", 4, ". We have list ", {1, 3, 2}, 
   " and permutation ", 
   xAct`xPerm`Cycles[{2, 3}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "4"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 2, " with i=", 4, ". We have list ", {1, 3, 4}, 
   " and permutation ", 
   xAct`xPerm`Cycles[{2, 3, 4}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generating over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}]}],
  SequenceForm["Generating over points ", {2, 3}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "2"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "3"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 2, " with i=", 4, ". We have list ", {1, 4, 2}, 
   " and permutation ", 
   xAct`xPerm`Cycles[{2, 4, 3}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "3"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 2, " with i=", 4, ". We have list ", {1, 4, 3}, 
   " and permutation ", 
   xAct`xPerm`Cycles[{2, 4}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"  Added permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4"}], "}"}], "]"}]}],
  SequenceForm["  Added permutation ", 
   xAct`xPerm`Cycles[{2, 4}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Branching over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}]}],
  SequenceForm["Branching over points ", {1, 2, 4, 3}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generating over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4"}], "}"}]}],
  SequenceForm["Generating over points ", {1, 3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generating over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}]}],
  SequenceForm["Generating over points ", {3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "3"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 1, " with i=", 4, ". We have list ", {2, 1, 3}, 
   " and permutation ", 
   xAct`xPerm`Cycles[{1, 2}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "4"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "]"}]}],
  SequenceForm[
  "Generate at level ", 1, " with i=", 4, ". We have list ", {2, 1, 4}, 
   " and permutation ", 
   xAct`xPerm`Cycles[{1, 2}, {3, 4}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"  Added permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "]"}]}],
  SequenceForm["  Added permutation ", 
   xAct`xPerm`Cycles[{1, 2}, {3, 4}]],
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StabilizerChain", "[", "SGS", "]"}], "//", 
  "ColumnForm"}]], "Input"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"2", ",", "4"}], "}"}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "2"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"3", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"2", ",", "4"}], "}"}], "]"}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "3", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{
    xAct`xPerm`StrongGenSet[{1, 2, 3}, 
     xAct`xPerm`GenSet[
      xAct`xPerm`Cycles[{2, 4}], 
      xAct`xPerm`Cycles[{1, 2}, {3, 4}]]], 
    xAct`xPerm`StrongGenSet[{2, 3}, 
     xAct`xPerm`GenSet[
      xAct`xPerm`Cycles[{2, 4}]]], 
    xAct`xPerm`StrongGenSet[{3}, 
     xAct`xPerm`GenSet[]], 
    xAct`xPerm`StrongGenSet[{}, 
     xAct`xPerm`GenSet[]]}],
  Editable->False]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrderOfGroup", "[", "SGS", "]"}]], "Input"],

Cell[BoxData["8"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimino", "[", 
  RowBox[{"SGS", "[", 
   RowBox[{"[", "2", "]"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Group", "[", 
  RowBox[{
   RowBox[{"Cycles", "[", "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "3"}], "}"}]}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "2", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2"}], "}"}]}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2"}], "}"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "//", "Length"}]], "Input"],

Cell[BoxData["8"], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"z", "=", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGS", "=", 
  RowBox[{"Search", "[", 
   RowBox[{
    RowBox[{"StrongGenSet", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
      RowBox[{"GenSet", "[", 
       RowBox[{
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"2", ",", "3"}], "}"}], "]"}], ",", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"3", ",", "4"}], "}"}], "]"}], ",", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "4"}], "}"}], "]"}]}], "]"}]}], "]"}], ",", 
    RowBox[{
     RowBox[{"PermEqual", "[", 
      RowBox[{
       RowBox[{"PermProduct", "[", 
        RowBox[{"z", ",", "#"}], "]"}], ",", 
       RowBox[{"PermProduct", "[", 
        RowBox[{"#", ",", "z"}], "]"}]}], "]"}], "&"}], ",", "1", ",", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"GenSet", "[", "]"}]}], "]"}], ",", 
    RowBox[{"xPermVerbose", "\[Rule]", "True"}]}], "]"}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Branching over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}]}],
  SequenceForm["Branching over points ", {3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   "ID"}],
  SequenceForm[
  "Generate at level ", 3, " with i=", 4, ". We have list ", {1, 2, 3}, 
   " and permutation ", xAct`xPerm`ID],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 3, " with i=", 4, ". We have list ", {1, 2, 4}, 
   " and permutation ", 
   xAct`xPerm`Cycles[{3, 4}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"  Added permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}], "]"}]}],
  SequenceForm["  Added permutation ", 
   xAct`xPerm`Cycles[{3, 4}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Branching over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4"}], "}"}]}],
  SequenceForm["Branching over points ", {2, 3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generating over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}]}],
  SequenceForm["Generating over points ", {2, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "2"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 2, " with i=", 4, ". We have list ", {1, 3, 2}, 
   " and permutation ", 
   xAct`xPerm`Cycles[{2, 3}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "4"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 2, " with i=", 4, ". We have list ", {1, 3, 4}, 
   " and permutation ", 
   xAct`xPerm`Cycles[{2, 3, 4}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Branching over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}]}],
  SequenceForm["Branching over points ", {1, 2, 4, 3}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generating over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4"}], "}"}]}],
  SequenceForm["Generating over points ", {1, 3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generating over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}]}],
  SequenceForm["Generating over points ", {3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "3"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 1, " with i=", 4, ". We have list ", {2, 1, 3}, 
   " and permutation ", 
   xAct`xPerm`Cycles[{1, 2}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"  Added permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], "]"}]}],
  SequenceForm["  Added permutation ", 
   xAct`xPerm`Cycles[{1, 2}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generating over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}]}],
  SequenceForm["Generating over points ", {1, 2, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generating over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}]}],
  SequenceForm["Generating over points ", {2, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "2"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 1, " with i=", 4, ". We have list ", {3, 1, 2}, 
   " and permutation ", 
   xAct`xPerm`Cycles[{1, 3, 2}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "4"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 1, " with i=", 4, ". We have list ", {3, 1, 4}, 
   " and permutation ", 
   xAct`xPerm`Cycles[{1, 3, 4, 2}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generating over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}]}],
  SequenceForm["Generating over points ", {1, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "1"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 1, " with i=", 4, ". We have list ", {3, 2, 1}, 
   " and permutation ", 
   xAct`xPerm`Cycles[{1, 3}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "4"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "4"}], "}"}], "]"}]}],
  SequenceForm[
  "Generate at level ", 1, " with i=", 4, ". We have list ", {3, 2, 4}, 
   " and permutation ", 
   xAct`xPerm`Cycles[{1, 3, 4}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generating over points \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}],
  SequenceForm["Generating over points ", {1, 2}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Generate at level \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" with i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\". We have list \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "1"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}],
  SequenceForm[
  "Generate at level ", 1, " with i=", 4, ". We have list ", {3, 4, 1}, 
   " and permutation ", 
   xAct`xPerm`Cycles[{1, 3}, {2, 4}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"  Added permutation \"\>", "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}],
  SequenceForm["  Added permutation ", 
   xAct`xPerm`Cycles[{1, 3}, {2, 4}]],
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StabilizerChain", "[", "SGS", "]"}], "//", 
  "ColumnForm"}]], "Input"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "3"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"3", ",", "4"}], "}"}], "]"}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "3", "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"3", ",", "4"}], "}"}], "]"}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{
    xAct`xPerm`StrongGenSet[{1, 2, 3}, 
     xAct`xPerm`GenSet[
      xAct`xPerm`Cycles[{3, 4}], 
      xAct`xPerm`Cycles[{1, 2}], 
      xAct`xPerm`Cycles[{1, 3}, {2, 4}]]], 
    xAct`xPerm`StrongGenSet[{2, 3}, 
     xAct`xPerm`GenSet[
      xAct`xPerm`Cycles[{3, 4}]]], 
    xAct`xPerm`StrongGenSet[{3}, 
     xAct`xPerm`GenSet[
      xAct`xPerm`Cycles[{3, 4}]]], 
    xAct`xPerm`StrongGenSet[{}, 
     xAct`xPerm`GenSet[]]}],
  Editable->False]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrderOfGroup", "[", "SGS", "]"}]], "Input"],

Cell[BoxData["8"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimino", "[", 
  RowBox[{"SGS", "[", 
   RowBox[{"[", "2", "]"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Group", "[", 
  RowBox[{
   RowBox[{"Cycles", "[", "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "3"}], "}"}]}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2"}], "}"}]}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2"}], "}"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "//", "Length"}]], "Input"],

Cell[BoxData["8"], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["4.6. BaseChange, DeleteRedundantGenerators", "Subsection"],

Cell["\<\
We want to return a new SGS with points j and j+1 exchanged in base.\
\>", "Text"],

Cell["Generalized basic orbit:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BasicOrbit", "[", 
    RowBox[{"j_Integer", ",", "k_Integer", ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{"base_List", ",", "GS_GenSet"}], "]"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Orbit", "[", 
     RowBox[{
      RowBox[{"base", "[", 
       RowBox[{"[", "j", "]"}], "]"}], ",", 
      RowBox[{"Stabilizer", "[", 
       RowBox[{
        RowBox[{"Take", "[", 
         RowBox[{"base", ",", "k"}], "]"}], ",", "GS"}], "]"}]}], "]"}], "/;", 
    RowBox[{"k", "<", "j"}]}]}], ";"}]], "Input",
 InitializationCell->True],

Cell[TextData[{
 "This is algorithm 12.3 of Butler. Algorithms 12.1 and 12.2 are not \
programmed in ",
 StyleBox["xPerm",
  FontSlant->"Italic"],
 ". It is private:"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Interchange", "[", 
   RowBox[{
    RowBox[{"SGS", ":", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{"base_List", ",", "GS_GenSet"}], "]"}]}], ",", "j_Integer", ",",
     "len_Integer"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "Deltaj", ",", "Deltajp1", ",", "LDeltaBarjp1", ",", "T", ",", "Gamma", 
      ",", "Delta", ",", "gamma", ",", "p", ",", "g1", ",", "g2"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Deltaj", "=", 
      RowBox[{"BasicOrbit", "[", 
       RowBox[{"j", ",", 
        RowBox[{"j", "-", "1"}], ",", "SGS"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Deltajp1", "=", 
      RowBox[{"BasicOrbit", "[", 
       RowBox[{
        RowBox[{"j", "+", "1"}], ",", "j", ",", "SGS"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"LDeltaBarjp1", "=", 
      RowBox[{
       RowBox[{"Length", "[", "Deltajp1", "]"}], 
       RowBox[{
        RowBox[{"Length", "[", "Deltaj", "]"}], "/", 
        RowBox[{"Length", "[", 
         RowBox[{"BasicOrbit", "[", 
          RowBox[{
           RowBox[{"j", "+", "1"}], ",", 
           RowBox[{"j", "-", "1"}], ",", "SGS"}], "]"}], "]"}]}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"T", "=", 
      RowBox[{"Stabilizer", "[", 
       RowBox[{
        RowBox[{"Take", "[", 
         RowBox[{"base", ",", 
          RowBox[{"j", "+", "1"}]}], "]"}], ",", "GS"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Gamma", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{"Deltaj", ",", 
        RowBox[{"base", "[", 
         RowBox[{"[", 
          RowBox[{"{", 
           RowBox[{"j", ",", 
            RowBox[{"j", "+", "1"}]}], "}"}], "]"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Delta", "=", 
      RowBox[{"{", 
       RowBox[{"base", "[", 
        RowBox[{"[", "j", "]"}], "]"}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "Delta", "]"}], "\[NotEqual]", 
        "LDeltaBarjp1"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"gamma", "=", 
         RowBox[{"First", "[", "Gamma", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"g1", "=", 
         RowBox[{"TraceSchreier", "[", 
          RowBox[{"gamma", ",", 
           RowBox[{"SchreierOrbit", "[", 
            RowBox[{
             RowBox[{"base", "[", 
              RowBox[{"[", "j", "]"}], "]"}], ",", 
             RowBox[{"StrongGenSet", "[", 
              RowBox[{
               RowBox[{"base", "[", 
                RowBox[{"[", 
                 RowBox[{"Range", "[", 
                  RowBox[{"j", ",", 
                   RowBox[{"Length", "[", "base", "]"}]}], "]"}], "]"}], 
                "]"}], ",", 
               RowBox[{"Stabilizer", "[", 
                RowBox[{
                 RowBox[{"base", "[", 
                  RowBox[{"[", 
                   RowBox[{"Range", "[", 
                    RowBox[{"j", "-", "1"}], "]"}], "]"}], "]"}], ",", "GS"}],
                 "]"}]}], "]"}], ",", "len"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"p", "=", 
         RowBox[{"OnPoints", "[", 
          RowBox[{
           RowBox[{"base", "[", 
            RowBox[{"[", 
             RowBox[{"j", "+", "1"}], "]"}], "]"}], ",", 
           RowBox[{"InversePerm", "[", "g1", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"Deltajp1", ",", "p"}], "]"}], ",", "\[IndentingNewLine]", 
          
          RowBox[{
           RowBox[{"g2", "=", 
            RowBox[{"TraceSchreier", "[", 
             RowBox[{"p", ",", 
              RowBox[{"SchreierOrbit", "[", 
               RowBox[{
                RowBox[{"base", "[", 
                 RowBox[{"[", 
                  RowBox[{"j", "+", "1"}], "]"}], "]"}], ",", 
                RowBox[{"StrongGenSet", "[", 
                 RowBox[{
                  RowBox[{"base", "[", 
                   RowBox[{"[", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"j", "+", "1"}], ",", 
                    RowBox[{"Length", "[", "base", "]"}]}], "]"}], "]"}], 
                   "]"}], ",", 
                  RowBox[{"Stabilizer", "[", 
                   RowBox[{
                    RowBox[{"base", "[", 
                    RowBox[{"[", 
                    RowBox[{"Range", "[", "j", "]"}], "]"}], "]"}], ",", 
                    "GS"}], "]"}]}], "]"}], ",", "len"}], "]"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"T", ",", 
             RowBox[{"PermProduct", "[", 
              RowBox[{"g2", ",", "g1"}], "]"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Delta", "=", 
            RowBox[{"Orbit", "[", 
             RowBox[{
              RowBox[{"base", "[", 
               RowBox[{"[", "j", "]"}], "]"}], ",", "T"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Gamma", "=", 
            RowBox[{"Complement", "[", 
             RowBox[{"Gamma", ",", "Delta"}], "]"}]}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Gamma", "=", 
           RowBox[{"Complement", "[", 
            RowBox[{"Gamma", ",", 
             RowBox[{"Orbit", "[", 
              RowBox[{"gamma", ",", "T"}], "]"}]}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"base", "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"base", "[", 
            RowBox[{"[", "j", "]"}], "]"}], "\[Rule]", 
           RowBox[{"base", "[", 
            RowBox[{"[", 
             RowBox[{"j", "+", "1"}], "]"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"base", "[", 
            RowBox[{"[", 
             RowBox[{"j", "+", "1"}], "]"}], "]"}], "\[Rule]", 
           RowBox[{"base", "[", 
            RowBox[{"[", "j", "]"}], "]"}]}]}], "}"}]}], ",", 
       RowBox[{"Union", "[", 
        RowBox[{"GS", ",", "T"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True],

Cell["Example (page 121 of Butler):", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"base", "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", "9", ",", "8", ",", "10", ",", "2", ",", "12"}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"GS", "=", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "8", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "11", ",", "15"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "10", ",", "12"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "14", ",", "19"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "16", ",", "17"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"6", ",", "21", ",", "20"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "13", ",", "18"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"9", ",", "18", ",", "20"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"12", ",", "19", ",", "17"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"10", ",", "21", ",", "11"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"13", ",", "16", ",", "14"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"8", ",", "13", ",", "21"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"10", ",", "14", ",", "16"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "6", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "5", ",", "7"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"12", ",", "20", ",", "15"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"17", ",", "19", ",", "18"}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SGS", "=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{"base", ",", "GS"}], "]"}]}], ";"}]}], "Input"],

Cell["There are six elements in the base:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BasicOrbit", "[", 
    RowBox[{"#", ",", 
     RowBox[{"#", "-", "1"}], ",", "SGS"}], "]"}], "&"}], "/@", 
  RowBox[{"Range", "[", "6", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "8", ",", "9", ",", "13", ",", "18", ",", "16", ",", "21", ",", 
     "7", ",", "20", ",", "17", ",", "14", ",", "10", ",", "11", ",", "4", 
     ",", "6", ",", "15", ",", "5", ",", "12", ",", "19", ",", "3", ",", 
     "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "9", ",", "18", ",", "20", ",", "17", ",", "15", ",", "12", ",", "19"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "8", ",", "13", ",", "16", ",", "21", ",", "14", ",", "10", ",", "11"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "21", ",", "11"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "6", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "20", ",", "15"}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "/@", "%"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"21", ",", "7", ",", "7", ",", "3", ",", "3", ",", "3"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Times", "@@", "%"}]], "Input"],

Cell[BoxData["27783"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrderOfGroup", "[", "SGS", "]"}]], "Input"],

Cell[BoxData["27783"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"newSGS", "=", 
  RowBox[{"Interchange", "[", 
   RowBox[{"SGS", ",", "1", ",", "21"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"9", ",", "1", ",", "8", ",", "10", ",", "2", ",", "12"}], "}"}], 
   ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "2", ",", "3", ",", "4", ",", "6", ",", "5", ",", "7"}], 
       "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "6", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "5", ",", "7"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"8", ",", "13", ",", "21"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"10", ",", "14", ",", "16"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"9", ",", "18", ",", "20"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"12", ",", "19", ",", "17"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"10", ",", "21", ",", "11"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"13", ",", "16", ",", "14"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"12", ",", "20", ",", "15"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"17", ",", "19", ",", "18"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "8", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "11", ",", "15"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "10", ",", "12"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "14", ",", "19"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "16", ",", "17"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"6", ",", "21", ",", "20"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "13", ",", "18"}], "}"}]}], "]"}]}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Complement", "[", 
  RowBox[{
   RowBox[{"Last", "[", "newSGS", "]"}], ",", "GS"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"GenSet", "[", 
  RowBox[{"Cycles", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "6", ",", "5", ",", "7"}],
     "}"}], "]"}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"newSGS", "=", 
  RowBox[{"Interchange", "[", 
   RowBox[{"newSGS", ",", "2", ",", "21"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"9", ",", "8", ",", "1", ",", "10", ",", "2", ",", "12"}], "}"}], 
   ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "2", ",", "3", ",", "4", ",", "6", ",", "5", ",", "7"}], 
       "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "6", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "5", ",", "7"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"8", ",", "13", ",", "21"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"10", ",", "14", ",", "16"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"9", ",", "18", ",", "20"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"12", ",", "19", ",", "17"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"10", ",", "21", ",", "11"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"13", ",", "16", ",", "14"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"12", ",", "20", ",", "15"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"17", ",", "19", ",", "18"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "8", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "11", ",", "15"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "10", ",", "12"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "14", ",", "19"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "16", ",", "17"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"6", ",", "21", ",", "20"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "13", ",", "18"}], "}"}]}], "]"}]}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrderOfGroup", "[", "newSGS", "]"}]], "Input"],

Cell[BoxData["27783"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Complement", "[", 
  RowBox[{
   RowBox[{"Last", "[", "newSGS", "]"}], ",", "GS"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"GenSet", "[", 
  RowBox[{"Cycles", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "6", ",", "5", ",", "7"}],
     "}"}], "]"}], "]"}]], "Output"]
}, Open  ]],

Cell["\<\
This is the complete algorithm. This is 12.5 of Butler. Note that the new \
base is not necessarily a simple reordering of the old base. It can have new \
points.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "BaseChange"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"BaseChange[SGS, newbase] gives a new strong generating set for \
the group described by SGS, having newbase as the first elements of its base. \
A third argument can be given specifying the length of the internal Schreier \
vectors used.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567978007-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BaseChange", "[", 
    RowBox[{"SGS_", ",", "base_"}], "]"}], ":=", 
   RowBox[{"BaseChange", "[", 
    RowBox[{"SGS", ",", "base", ",", 
     RowBox[{"PermLength", "[", "SGS", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"BaseChange", "[", 
    RowBox[{
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}], ",", "base_", ",", "len_"}], 
    "]"}], ":=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{"base", ",", 
     RowBox[{"GenSet", "[", "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"BaseChange", "[", 
    RowBox[{
     RowBox[{"SGS", ":", 
      RowBox[{"StrongGenSet", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"b_", ",", "___"}], "}"}], ",", "_"}], "]"}]}], ",", 
     RowBox[{"{", "b_", "}"}], ",", "len_"}], "]"}], ":=", "SGS"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"BaseChange", "[", 
    RowBox[{
     RowBox[{"SGS", ":", 
      RowBox[{"StrongGenSet", "[", 
       RowBox[{"base_List", ",", "GS_GenSet"}], "]"}]}], ",", "newbase_List", 
     ",", "len_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"i", "=", "0"}], ",", "j", ",", 
       RowBox[{"g", "=", "ID"}], ",", "more", ",", 
       RowBox[{"B", "=", "base"}], ",", 
       RowBox[{"gs", "=", "GS"}], ",", "pos", ",", "newSGS"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"more", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "newbase", "]"}], ">", "0"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"BasicOrbit", "[", 
            RowBox[{"1", ",", "0", ",", "SGS"}], "]"}], ",", 
           RowBox[{"newbase", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", "False"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{"more", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"i", "=", 
          RowBox[{"i", "+", "1"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"g", "=", 
          RowBox[{"PermProduct", "[", 
           RowBox[{
            RowBox[{"TraceSchreier", "[", 
             RowBox[{
              RowBox[{"OnPoints", "[", 
               RowBox[{
                RowBox[{"newbase", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{"InversePerm", "[", "g", "]"}]}], "]"}], ",", 
              RowBox[{"SchreierOrbits", "[", 
               RowBox[{"SGS", ",", "len"}], "]"}]}], "]"}], ",", "g"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"more", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"i", "+", "1"}], ")"}], "\[LessEqual]", 
           RowBox[{"Min", "[", 
            RowBox[{
             RowBox[{"Length", "[", "B", "]"}], ",", 
             RowBox[{"Length", "[", "newbase", "]"}]}], "]"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"more", ",", 
           RowBox[{"more", "=", 
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"OnPoints", "[", 
               RowBox[{
                RowBox[{"newbase", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", "+", "1"}], "]"}], "]"}], ",", 
                RowBox[{"InversePerm", "[", "g", "]"}]}], "]"}], ",", 
              RowBox[{"BasicOrbit", "[", 
               RowBox[{
                RowBox[{"i", "+", "1"}], ",", "i", ",", "SGS"}], "]"}]}], 
             "]"}]}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"PermEqual", "[", 
          RowBox[{"g", ",", "ID"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"B", "=", 
          RowBox[{"OnPoints", "[", 
           RowBox[{"B", ",", "g"}], "]"}]}], ";", 
         RowBox[{"gs", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"PermProduct", "[", 
              RowBox[{
               RowBox[{"InversePerm", "[", "g", "]"}], ",", "#", ",", "g"}], 
              "]"}], "&"}], ",", "gs"}], "]"}]}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"j", "=", 
         RowBox[{"i", "+", "1"}]}], ",", 
        RowBox[{"j", "\[LessEqual]", 
         RowBox[{"Length", "[", "newbase", "]"}]}], ",", 
        RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"B", ",", 
             RowBox[{"newbase", "[", 
              RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ",", 
           RowBox[{"pos", "=", 
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{"B", ",", 
               RowBox[{"newbase", "[", 
                RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ",", 
           RowBox[{
            RowBox[{"AppendTo", "[", 
             RowBox[{"B", ",", 
              RowBox[{"newbase", "[", 
               RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ";", 
            RowBox[{"pos", "=", 
             RowBox[{"Length", "[", "B", "]"}]}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"While", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"pos", "\[NotEqual]", "j"}], " ", "&&", 
            RowBox[{"pos", ">", "1"}]}], ",", 
           RowBox[{
            RowBox[{"newSGS", "=", 
             RowBox[{"Interchange", "[", 
              RowBox[{
               RowBox[{"StrongGenSet", "[", 
                RowBox[{"B", ",", "gs"}], "]"}], ",", 
               RowBox[{"pos", "-", "1"}], ",", "len"}], "]"}]}], ";", 
            RowBox[{"B", "=", 
             RowBox[{"newSGS", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ";", 
            RowBox[{"gs", "=", 
             RowBox[{"newSGS", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ";", 
            RowBox[{"pos", "=", 
             RowBox[{"pos", "-", "1"}]}]}]}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"StrongGenSet", "[", 
       RowBox[{"B", ",", "gs"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"BaseChange", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "BaseChange", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"BaseChange", "[", 
   RowBox[{"SGS", ",", 
    RowBox[{"{", "1", "}"}], ",", "21"}], "]"}], "//", "Trace"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     TagBox["SGS",
      HoldForm], ",", 
     TagBox[
      RowBox[{"StrongGenSet", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "9", ",", "8", ",", "10", ",", "2", ",", "12"}], 
         "}"}], ",", 
        RowBox[{"GenSet", "[", 
         RowBox[{
          RowBox[{"Cycles", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"1", ",", "8", ",", "9"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"2", ",", "11", ",", "15"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"3", ",", "10", ",", "12"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"4", ",", "14", ",", "19"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"5", ",", "16", ",", "17"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"6", ",", "21", ",", "20"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"7", ",", "13", ",", "18"}], "}"}]}], "]"}], ",", 
          RowBox[{"Cycles", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"9", ",", "18", ",", "20"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"12", ",", "19", ",", "17"}], "}"}]}], "]"}], ",", 
          RowBox[{"Cycles", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"10", ",", "21", ",", "11"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"13", ",", "16", ",", "14"}], "}"}]}], "]"}], ",", 
          RowBox[{"Cycles", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"8", ",", "13", ",", "21"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"10", ",", "14", ",", "16"}], "}"}]}], "]"}], ",", 
          RowBox[{"Cycles", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"2", ",", "6", ",", "3"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"4", ",", "5", ",", "7"}], "}"}]}], "]"}], ",", 
          RowBox[{"Cycles", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"12", ",", "20", ",", "15"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"17", ",", "19", ",", "18"}], "}"}]}], "]"}]}], "]"}]}], 
       "]"}],
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"BaseChange", "[", 
     RowBox[{
      RowBox[{"StrongGenSet", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "9", ",", "8", ",", "10", ",", "2", ",", "12"}], 
         "}"}], ",", 
        RowBox[{"GenSet", "[", 
         RowBox[{
          RowBox[{"Cycles", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"1", ",", "8", ",", "9"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"2", ",", "11", ",", "15"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"3", ",", "10", ",", "12"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"4", ",", "14", ",", "19"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"5", ",", "16", ",", "17"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"6", ",", "21", ",", "20"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"7", ",", "13", ",", "18"}], "}"}]}], "]"}], ",", 
          RowBox[{"Cycles", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"9", ",", "18", ",", "20"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"12", ",", "19", ",", "17"}], "}"}]}], "]"}], ",", 
          RowBox[{"Cycles", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"10", ",", "21", ",", "11"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"13", ",", "16", ",", "14"}], "}"}]}], "]"}], ",", 
          RowBox[{"Cycles", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"8", ",", "13", ",", "21"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"10", ",", "14", ",", "16"}], "}"}]}], "]"}], ",", 
          RowBox[{"Cycles", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"2", ",", "6", ",", "3"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"4", ",", "5", ",", "7"}], "}"}]}], "]"}], ",", 
          RowBox[{"Cycles", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"12", ",", "20", ",", "15"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"17", ",", "19", ",", "18"}], "}"}]}], "]"}]}], "]"}]}], 
       "]"}], ",", 
      RowBox[{"{", "1", "}"}], ",", "21"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"StrongGenSet", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "9", ",", "8", ",", "10", ",", "2", ",", "12"}], 
       "}"}], ",", 
      RowBox[{"GenSet", "[", 
       RowBox[{
        RowBox[{"Cycles", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "8", ",", "9"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "11", ",", "15"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "10", ",", "12"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "14", ",", "19"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "16", ",", "17"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"6", ",", "21", ",", "20"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"7", ",", "13", ",", "18"}], "}"}]}], "]"}], ",", 
        RowBox[{"Cycles", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"9", ",", "18", ",", "20"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"12", ",", "19", ",", "17"}], "}"}]}], "]"}], ",", 
        RowBox[{"Cycles", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"10", ",", "21", ",", "11"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"13", ",", "16", ",", "14"}], "}"}]}], "]"}], ",", 
        RowBox[{"Cycles", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"8", ",", "13", ",", "21"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"10", ",", "14", ",", "16"}], "}"}]}], "]"}], ",", 
        RowBox[{"Cycles", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "6", ",", "3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "5", ",", "7"}], "}"}]}], "]"}], ",", 
        RowBox[{"Cycles", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"12", ",", "20", ",", "15"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"17", ",", "19", ",", "18"}], "}"}]}], "]"}]}], "]"}]}], 
     "]"}],
    HoldForm]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BaseChange", "[", 
  RowBox[{"SGS", ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "8"}], "}"}], ",", "21"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"9", ",", "8", ",", "1", ",", "3", ",", "15", ",", "10"}], "}"}], 
   ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "8", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "11", ",", "15"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "10", ",", "12"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "14", ",", "19"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "16", ",", "17"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"6", ",", "21", ",", "20"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "13", ",", "18"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"8", ",", "13", ",", "21"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"10", ",", "14", ",", "16"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "3", ",", "6"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "7", ",", "5"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "7", ",", "6"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4", ",", "5"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"12", ",", "15", ",", "20"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"17", ",", "18", ",", "19"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"10", ",", "21", ",", "11"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"13", ",", "16", ",", "14"}], "}"}]}], "]"}]}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrderOfGroup", "[", "%", "]"}]], "Input"],

Cell[BoxData["27783"], "Output"]
}, Open  ]],

Cell["\<\
The solution given by Butler is wrong because he gives a permutation which is \
not in the original group:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermMemberQ", "[", 
  RowBox[{
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "7", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "11"}], "}"}]}], "]"}], ",", "SGS"}], 
  "]"}]], "Input"],

Cell[BoxData["False"], "Output"]
}, Open  ]],

Cell["\<\
This is essentially algorithm 12.4 of Butler.  It is more complicated because \
Butler's algorithm's efficiency depends on the order of the generators in GS. \
We introduce a Permutations structure to consider all possible orderings of \
generators and take the most convenient case.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "DeleteRedundantGenerators"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"DeleteRedundantGenerators[SGS] returns an equivalent strong \
generating set removing redundant generators from the generating set.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567978008-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"DeleteRedundantGenerators", "[", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{"base_", ",", "GS_GenSet"}], "]"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Si", ",", "Sip1", ",", "i", ",", 
       RowBox[{"T", "=", 
        RowBox[{"GenSet", "[", "]"}]}], ",", "orbit", ",", "gens", ",", 
       "pgens", ",", "check", ",", "toadd"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Sip1", "=", 
       RowBox[{"GenSet", "[", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"check", "[", 
        RowBox[{"i_", ",", "gen_", ",", "t_"}], "]"}], ":=", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"Orbit", "[", 
          RowBox[{
           RowBox[{"base", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", "t"}], "]"}], ",", 
         RowBox[{"OnPoints", "[", 
          RowBox[{
           RowBox[{"base", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", "gen"}], "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"toadd", "[", 
        RowBox[{"i_", ",", "gs_", ",", "T_"}], "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"TT", "=", "T"}], "}"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"check", "[", 
               RowBox[{"i", ",", "#", ",", "TT"}], "]"}], ",", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"TT", ",", "#"}], "]"}]}], "]"}], "&"}], "/@", "gs"}], 
          ";", 
          RowBox[{"Complement", "[", 
           RowBox[{"TT", ",", "T"}], "]"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", 
         RowBox[{"Length", "[", "base", "]"}]}], ",", 
        RowBox[{"i", "\[GreaterEqual]", "1"}], ",", 
        RowBox[{"i", "--"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Si", "=", 
          RowBox[{"Stabilizer", "[", 
           RowBox[{
            RowBox[{"Take", "[", 
             RowBox[{"base", ",", 
              RowBox[{"i", "-", "1"}]}], "]"}], ",", "GS"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"gens", "=", 
          RowBox[{"Complement", "[", 
           RowBox[{"Si", ",", "Sip1"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"pgens", "=", 
          RowBox[{"Permutations", "[", "gens", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"T", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"T", ",", 
            RowBox[{"First", "@", 
             RowBox[{"Sort", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"toadd", "[", 
                 RowBox[{"i", ",", "#", ",", "T"}], "]"}], "&"}], "/@", 
               "pgens"}], "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Sip1", "=", "Si"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"StrongGenSet", "[", 
       RowBox[{"base", ",", "T"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"DeleteRedundantGenerators", ",", "1"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "DeleteRedundantGenerators", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Examples:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Complement", "[", 
  RowBox[{
   RowBox[{"Last", "[", "newSGS", "]"}], ",", 
   RowBox[{"Last", "[", 
    RowBox[{"DeleteRedundantGenerators", "[", "newSGS", "]"}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"GenSet", "[", 
  RowBox[{"Cycles", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9", ",", "18", ",", "20"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"12", ",", "19", ",", "17"}], "}"}]}], "]"}], "]"}]], "Output"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"base", "=."}], "\[IndentingNewLine]", 
 RowBox[{"GS", "=."}], "\[IndentingNewLine]", 
 RowBox[{"SGS", "=."}], "\[IndentingNewLine]", 
 RowBox[{"newSGS", "=."}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["4.7. Schreier-Sims methods 3 and 4", "Subsection"],

Cell["\<\
Notations changed from Butler's book:
\tcurrent_gens : Si
\told_gens : oldSi\
\>", "Text"],

Cell["\<\
Assuming that S^(i) is a GS for H^(i) and that B,S^(i+1) are base and SGS for \
H^(i+1), find base and SGS for H^(i). T is the set of additional generators \
in S^(i) since the previous call to the procedure with the present value of \
i. Assume that a base and SGS set of <S^(i)-T>, (the previous value of H^(i)) \
are included in B and S. The present value of nu^(i) must be an extension of \
the previous value. This function is private.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SchreierSimsStep", "[", 
    RowBox[{
    "B_List", ",", "S_GenSet", ",", "len_Integer", ",", "i_Integer", ",", 
     "T_GenSet", ",", 
     RowBox[{"options", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "Si", ",", "oldSi", ",", "genset", ",", "Deltai", ",", "oldDeltai", ",",
        "gn", ",", "j", ",", "k", ",", "gamma", ",", "sn", ",", "s", ",", "g",
        ",", "gbar", ",", "newB", ",", "newS", ",", "level", ",", "n", ",", 
       "rules", ",", "method", ",", "verb", ",", "word", ",", "junk"}], "}"}],
      ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"rules", ",", "method", ",", "verb"}], "}"}], "=", 
       RowBox[{"OptionValue", "[", 
        RowBox[{"SchreierSims", ",", 
         RowBox[{"{", "options", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"UseRules", ",", "Method", ",", "xPermVerbose"}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"newB", "=", "B"}], ";", 
      RowBox[{"newS", "=", "S"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"verb", ",", 
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<Schreier-Sims-Step called with B=\>\"", ",", "B", ",", 
          "\"\<, S=\>\"", ",", 
          RowBox[{"S", "/.", "rules"}], ",", "\"\<, i=\>\"", ",", "i", ",", 
          "\"\<, T=\>\"", ",", 
          RowBox[{"T", "/.", "rules"}]}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Original", " ", "generating", " ", "sets"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"Si", "=", 
       RowBox[{"Stabilizer", "[", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"B", ",", 
           RowBox[{"i", "-", "1"}]}], "]"}], ",", "S"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"oldSi", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"Si", ",", "T"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Basic", " ", "orbits"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"oldDeltai", "=", 
       RowBox[{"SchreierOrbit", "[", 
        RowBox[{
         RowBox[{"B", "[", 
          RowBox[{"[", "i", "]"}], "]"}], ",", "oldSi", ",", "len"}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"Deltai", "=", 
       RowBox[{"SchreierOrbit", "[", 
        RowBox[{
         RowBox[{"B", "[", 
          RowBox[{"[", "i", "]"}], "]"}], ",", "Si", ",", "len"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Check", " ", "that", " ", "Deltai", " ", "is", " ", "an", " ", 
        "extension", " ", "of", " ", "oldDeltai"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"n", "=", "1"}], ",", 
        RowBox[{"n", "\[LessEqual]", 
         RowBox[{"Length", "[", 
          RowBox[{"oldDeltai", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ",", 
        RowBox[{"++", "n"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Deltai", "[", 
              RowBox[{"[", 
               RowBox[{"2", ",", "n"}], "]"}], "]"}], "=!=", 
             RowBox[{"oldDeltai", "[", 
              RowBox[{"[", 
               RowBox[{"2", ",", "n"}], "]"}], "]"}]}], ")"}], "&&", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"oldDeltai", "[", 
              RowBox[{"[", 
               RowBox[{"2", ",", "n"}], "]"}], "]"}], "=!=", "0"}], ")"}]}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{"verb", ",", 
             RowBox[{
             "Print", "[", 
              "\"\<Modifying orbit Delta to extend previous value.\>\"", 
              "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Deltai", "[", 
             RowBox[{"[", 
              RowBox[{"2", ",", "n"}], "]"}], "]"}], "=", 
            RowBox[{"oldDeltai", "[", 
             RowBox[{"[", 
              RowBox[{"2", ",", "n"}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Deltai", "[", 
             RowBox[{"[", 
              RowBox[{"3", ",", "n"}], "]"}], "]"}], "=", 
            RowBox[{"oldDeltai", "[", 
             RowBox[{"[", 
              RowBox[{"3", ",", "n"}], "]"}], "]"}]}]}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Loop", " ", "over", " ", "elements", " ", "gamma", " ", "of", " ", 
        "basic", " ", "orbit"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"gn", "=", "1"}], ",", 
        RowBox[{"gn", "\[LessEqual]", 
         RowBox[{"Length", "[", 
          RowBox[{"Deltai", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
        RowBox[{"++", "gn"}], ",", 
        RowBox[{
         RowBox[{"gamma", "=", 
          RowBox[{"Deltai", "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "gn"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"First", "[", "oldDeltai", "]"}], ",", "gamma"}], "]"}], 
           ",", 
           RowBox[{"genset", "=", "T"}], ",", 
           RowBox[{"genset", "=", "Si"}]}], "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Loop", " ", "sn", " ", "over", " ", "generators", " ", "s", " ", 
           "in", " ", "genset"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"sn", "=", "1"}], ",", 
           RowBox[{"sn", "\[LessEqual]", 
            RowBox[{"Length", "[", "genset", "]"}]}], ",", 
           RowBox[{"++", "sn"}], ",", 
           RowBox[{
            RowBox[{"s", "=", 
             RowBox[{"genset", "[", 
              RowBox[{"[", "sn", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"Compute", " ", "Schreier", " ", "generator"}], " ", 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{"g", "=", 
             RowBox[{"PermProduct", "[", 
              RowBox[{
               RowBox[{"TraceSchreier", "[", 
                RowBox[{"gamma", ",", "Deltai"}], "]"}], ",", "s", ",", 
               RowBox[{"InversePerm", "[", 
                RowBox[{"TraceSchreier", "[", 
                 RowBox[{
                  RowBox[{"OnPoints", "[", 
                   RowBox[{"gamma", ",", "s"}], "]"}], ",", "Deltai"}], "]"}],
                 "]"}]}], "]"}]}], ";", 
            RowBox[{"++", "num"}], ";", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "If", " ", "g", " ", "is", " ", "not", " ", "in", " ", 
              "subgroup", " ", 
              RowBox[{"H", "^", 
               RowBox[{"(", 
                RowBox[{"i", "+", "1"}], ")"}]}]}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"Not", "@", 
               RowBox[{"PermMemberQ", "[", 
                RowBox[{"g", ",", 
                 RowBox[{"StrongGenSet", "[", 
                  RowBox[{
                   RowBox[{"Drop", "[", 
                    RowBox[{"newB", ",", "i"}], "]"}], ",", 
                   RowBox[{"Stabilizer", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"newB", ",", "i"}], "]"}], ",", "newS"}], "]"}]}],
                   "]"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"k", "=", 
                RowBox[{"Length", "[", "newB", "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"Switch", "[", 
                RowBox[{
                "method", ",", "\[IndentingNewLine]", "\"\<Butler3\>\"", ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"gbar", "=", "g"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"j", "=", "1"}], ";", 
                  RowBox[{"While", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"j", "\[LessEqual]", "k"}], "&&", 
                    RowBox[{
                    RowBox[{"OnPoints", "[", 
                    RowBox[{
                    RowBox[{"newB", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], ",", "gbar"}], "]"}], "===", 
                    RowBox[{"newB", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}]}], ",", 
                    RowBox[{"j", "++"}]}], "]"}]}], ",", 
                 "\[IndentingNewLine]", "\"\<Butler4\>\"", ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"word", "=", 
                   RowBox[{"PermWord", "[", 
                    RowBox[{"g", ",", 
                    RowBox[{"StrongGenSet", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"newB", ",", "i"}], "]"}], ",", 
                    RowBox[{"Stabilizer", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"newB", ",", "i"}], "]"}], ",", "newS"}], "]"}]}],
                     "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"gbar", "=", 
                   RowBox[{"First", "[", "word", "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"j", "=", 
                   RowBox[{"i", "+", 
                    RowBox[{"Length", "[", "word", "]"}]}]}]}], ",", 
                 "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
                 RowBox[{"Throw", " ", "@", 
                  RowBox[{"Print", "[", 
                   RowBox[{
                   "\"\<Unknown Schreier-Sims variant method: \>\"", ",", 
                    "method"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"Extend", " ", "GS"}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"newS", ",", "gbar"}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{"verb", ",", 
                 RowBox[{"Print", "[", 
                  RowBox[{"\"\<Appended S[[\>\"", ",", 
                   RowBox[{"Length", "[", "newS", "]"}], ",", "\"\<]]=\>\"", 
                   ",", 
                   RowBox[{"gbar", "/.", "rules"}]}], "]"}]}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"Extend", " ", "base"}], ",", " ", 
                 RowBox[{"if", " ", "necessary"}], ",", " ", 
                 RowBox[{
                 "so", " ", "that", " ", "no", " ", "strong", " ", 
                  "generator", " ", "fixes", " ", "all", " ", "base", " ", 
                  "points"}]}], " ", "*)"}], "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"j", "===", 
                  RowBox[{"k", "+", "1"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"AppendTo", "[", 
                   RowBox[{"newB", ",", 
                    RowBox[{"Min", "[", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", "len", "]"}], ",", 
                    RowBox[{"StablePoints", "[", 
                    RowBox[{"gbar", ",", "len"}], "]"}], ",", "newB", ",", 
                    RowBox[{"{", "0", "}"}]}], "]"}], "]"}]}], "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{"verb", ",", 
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<Appended B[[\>\"", ",", 
                    RowBox[{"k", "+", "1"}], ",", "\"\<]]=\>\"", ",", 
                    RowBox[{"Last", "[", "newB", "]"}]}], "]"}]}], "]"}]}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                "Ensure", " ", "we", " ", "still", " ", "have", " ", "a", " ",
                  "base", " ", "and", " ", "SGS", " ", "for", " ", 
                 RowBox[{"H", "^", 
                  RowBox[{"(", 
                   RowBox[{"i", "+", "1"}], ")"}]}]}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"For", "[", 
                RowBox[{
                 RowBox[{"level", "=", "j"}], ",", 
                 RowBox[{"level", "\[GreaterEqual]", 
                  RowBox[{"i", "+", "1"}]}], ",", 
                 RowBox[{"--", "level"}], ",", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"newB", ",", "newS"}], "}"}], "=", 
                  RowBox[{"SchreierSimsStep", "[", 
                   RowBox[{"newB", ",", "newS", ",", "len", ",", "level", ",", 
                    RowBox[{"GenSet", "[", "gbar", "]"}], ",", "options"}], 
                   "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{"verb", ",", 
                 RowBox[{"Print", "[", 
                  RowBox[{"\"\<Finished check of H(\>\"", ",", 
                   RowBox[{"i", "+", "1"}], ",", "\"\<) with base \>\"", ",", 
                   
                   RowBox[{"Drop", "[", 
                    RowBox[{"newB", ",", "i"}], "]"}], ",", 
                   "\"\< and SGS \>\"", ",", 
                   RowBox[{
                    RowBox[{"Stabilizer", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"newB", ",", "i"}], "]"}], ",", "newS"}], "]"}], "/.",
                     "rules"}]}], "]"}]}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}], ";", 
      RowBox[{"{", 
       RowBox[{"newB", ",", "newS"}], "}"}]}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["Old computation of j in Butler3:", "Text"],

Cell[BoxData[
 RowBox[{"j", "=", 
  RowBox[{"Min", "[", 
   RowBox[{
    RowBox[{"Complement", "[", 
     RowBox[{
      RowBox[{"Range", "[", "k", "]"}], ",", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Position", "[", 
          RowBox[{"newB", ",", "#"}], "]"}], "&"}], "/@", 
        RowBox[{"StablePoints", "[", 
         RowBox[{"gbar", ",", "len"}], "]"}]}], "]"}]}], "]"}], "/.", 
    RowBox[{
     RowBox[{"{", "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"k", "+", "1"}], "}"}]}]}], "]"}]}]], "Input",
 Evaluatable->False],

Cell["\<\
This is the main driver for the Schreier-Sims algorithm. Note the ugly use of \
the global counter num:\
\>", "Text"],

Cell["\<\
TODO: The resulting base contains a zero if using MathLink\[Rule]False or \
Images notation (perhaps other notations too). Detected by Alfonso, March \
2011.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Main", " ", "driver"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "SchreierSims", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"MathLink", "\[RuleDelayed]", "$xpermQ"}], ",", 
       RowBox[{"UseRules", "\[RuleDelayed]", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"Method", "\[Rule]", "\"\<Butler3\>\""}], ",", 
       RowBox[{"xPermVerbose", "\[Rule]", "False"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SchreierSims", "[", 
      RowBox[{"n_Integer", ",", "other__"}], "]"}], ":=", 
     RowBox[{"SchreierSims", "[", 
      RowBox[{
       RowBox[{"Range", "[", "n", "]"}], ",", "other"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SchreierSims", "[", 
      RowBox[{"B_List", ",", 
       RowBox[{"Symmetric", "[", 
        RowBox[{"inds_List", ",", 
         RowBox[{"not_:", "xAct`xPerm`Cycles"}]}], "]"}], ",", "options___"}],
       "]"}], ":=", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"Sort", "@", "inds"}], ",", 
       RowBox[{"TranslatePerm", "[", 
        RowBox[{
         RowBox[{"GenSet", "@@", 
          RowBox[{"(", 
           RowBox[{"xAct`xPerm`Cycles", "/@", 
            RowBox[{"Partition", "[", 
             RowBox[{
              RowBox[{"Sort", "@", "inds"}], ",", "2", ",", "1"}], "]"}]}], 
           ")"}]}], ",", "not"}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SchreierSims", "[", 
      RowBox[{"B_List", ",", 
       RowBox[{"Antisymmetric", "[", 
        RowBox[{"inds_List", ",", 
         RowBox[{"not_:", "xAct`xPerm`Cycles"}]}], "]"}], ",", "options___"}],
       "]"}], ":=", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"Sort", "@", "inds"}], ",", 
       RowBox[{"TranslatePerm", "[", 
        RowBox[{
         RowBox[{"GenSet", "@@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"-", 
              RowBox[{"xAct`xPerm`Cycles", "[", "#", "]"}]}], "&"}], "/@", 
            RowBox[{"Partition", "[", 
             RowBox[{
              RowBox[{"Sort", "@", "inds"}], ",", "2", ",", "1"}], "]"}]}], 
           ")"}]}], ",", "not"}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SchreierSims", "[", 
      RowBox[{"_", ",", 
       RowBox[{"GenSet", "[", "]"}], ",", "len_Integer", ",", "options___"}], 
      "]"}], ":=", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{
     RowBox[{"SchreierSims", "[", 
      RowBox[{"B_List", ",", "GS_GenSet", ",", 
       RowBox[{"options___", "?", "OptionQ"}]}], "]"}], ":=", 
     RowBox[{"SchreierSims", "[", 
      RowBox[{"B", ",", "GS", ",", 
       RowBox[{"PermLength", "[", 
        RowBox[{"StrongGenSet", "[", 
         RowBox[{"B", ",", "GS"}], "]"}], "]"}], ",", "options"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SchreierSims", "[", 
      RowBox[{"B_List", ",", "GS_GenSet", ",", "len_Integer", ",", 
       RowBox[{"options", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "MathLink", "]"}], ",", 
        "MathLinkSchreierSims", ",", "MathSchreierSims"}], "]"}], "[", 
      RowBox[{"B", ",", "GS", ",", "len", ",", "options"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SetNumberOfArguments", "[", 
     RowBox[{"SchreierSims", ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "Infinity"}], "}"}]}], "]"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"Protect", "[", "SchreierSims", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Mathematica", " ", "code"}], " ", "*)"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{
     RowBox[{"MathSchreierSims", "[", 
      RowBox[{"B_List", ",", "GS_GenSet", ",", "len_Integer", ",", 
       RowBox[{"options", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"k", ",", 
         RowBox[{"base", "=", "B"}], ",", "PBQ", ",", "genset", ",", "i", ",",
          "rules", ",", "verb"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"rules", ",", "verb"}], "}"}], "=", 
         RowBox[{"OptionValue", "[", 
          RowBox[{"SchreierSims", ",", 
           RowBox[{"{", "options", "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"UseRules", ",", "xPermVerbose"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"num", "=", "0"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Eliminate", " ", "identity", " ", "from", " ", "GS"}], ",",
           " ", 
          RowBox[{"if", " ", "present"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"genset", "=", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{"GS", ",", 
           RowBox[{"ID", "[", 
            RowBox[{"First", "[", "GS", "]"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Check", " ", "initial", " ", "base"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"base", "=", 
         RowBox[{"NonStablePoints", "[", 
          RowBox[{"B", ",", "genset"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"k", "=", 
         RowBox[{"Length", "[", "base", "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Recursive", " ", "call", " ", "to", " ", "SchreierSims"}], 
         " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"i", "=", "k"}], ",", 
          RowBox[{"i", "\[GreaterEqual]", "1"}], ",", 
          RowBox[{"--", "i"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"base", ",", "genset"}], "}"}], "=", 
            RowBox[{"Evaluate", "[", 
             RowBox[{"SchreierSimsStep", "[", 
              RowBox[{"base", ",", "genset", ",", "len", ",", "i", ",", 
               RowBox[{"Stabilizer", "[", 
                RowBox[{
                 RowBox[{"Take", "[", 
                  RowBox[{"base", ",", 
                   RowBox[{"i", "-", "1"}]}], "]"}], ",", "genset"}], "]"}], 
               ",", "options"}], "]"}], "]"}]}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", "Results", " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"verb", ",", 
          RowBox[{"Print", "[", 
           RowBox[{
           "\"\<Checked \>\"", ",", "num", ",", 
            "\"\< generators and obtained group of order \>\"", ",", 
            RowBox[{"OrderOfGroup", "[", 
             RowBox[{"StrongGenSet", "[", 
              RowBox[{"base", ",", "genset"}], "]"}], "]"}]}], "]"}]}], "]"}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"StrongGenSet", "[", 
         RowBox[{
          RowBox[{"DeleteCases", "[", 
           RowBox[{"base", ",", "0"}], "]"}], ",", 
          RowBox[{"genset", "/.", "rules"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SchreierSims", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"GenSet", "[", "]"}], ",", "4"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"GenSet", "[", "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["RiemannSymmetric:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SchreierSims", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}]}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}]}], "]"}], 
   ",", "4"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}]}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}]}], 
    "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SchreierSims", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "6", ",", "5"}], "}"}],
       "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2", ",", "5", ",", "6"}], "}"}],
       "]"}]}], "]"}], ",", "6"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "6", ",", "5"}], "}"}],
       "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2", ",", "5", ",", "6"}], "}"}],
       "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "6", ",", "5"}], "}"}],
       "]"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SchreierSims", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"xAct`xPerm`Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], "]"}]}], ",", 
     RowBox[{"xAct`xPerm`Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}], "]"}], ",", "4"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], "]"}]}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], "]"}]}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SchreierSims", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"xAct`xPerm`Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6"}], "}"}]}], "]"}], ",", 
     RowBox[{"xAct`xPerm`Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}], "]"}], ",", "6"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6"}], "}"}]}], "]"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["A nontrivial example:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"a", "=", 
   RowBox[{"xAct`xPerm`Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "8", ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "11", ",", "15"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "10", ",", "12"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "14", ",", "19"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "16", ",", "17"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "21", ",", "20"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "13", ",", "18"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{"xAct`xPerm`Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "18", ",", "20"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"12", ",", "19", ",", "17"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"c", "=", 
   RowBox[{"xAct`xPerm`Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "21", ",", "11"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", "16", ",", "14"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"d", "=", 
   RowBox[{"xAct`xPerm`Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8", ",", "13", ",", "21"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "14", ",", "16"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"e", "=", 
   RowBox[{"xAct`xPerm`Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8", ",", "16", ",", "11"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", "14", ",", "21"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"f", "=", 
   RowBox[{"xAct`xPerm`Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "7", ",", "5"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"xAct`xPerm`Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "7", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "5"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"h", "=", 
   RowBox[{"xAct`xPerm`Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"12", ",", "20", ",", "15"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"17", ",", "19", ",", "18"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$xPermRules", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"a", "\[Rule]", "\"\<a\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"b", "\[Rule]", "\"\<b\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"c", "\[Rule]", "\"\<c\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"d", "\[Rule]", "\"\<d\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"e", "\[Rule]", "\"\<e\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"f", "\[Rule]", "\"\<f\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"g", "\[Rule]", "\"\<g\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"h", "\[Rule]", "\"\<h\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Perm", "[", 
       RowBox[{"Range", "[", "21", "]"}], "]"}], "\[Rule]", "\"\<id\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"a", ",", 
        RowBox[{"{", 
         RowBox[{"Perm", ",", "21"}], "}"}]}], "]"}], "\[Rule]", 
      "\"\<a\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"b", ",", 
        RowBox[{"{", 
         RowBox[{"Perm", ",", "21"}], "}"}]}], "]"}], "\[Rule]", 
      "\"\<b\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"c", ",", 
        RowBox[{"{", 
         RowBox[{"Perm", ",", "21"}], "}"}]}], "]"}], "\[Rule]", 
      "\"\<c\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"d", ",", 
        RowBox[{"{", 
         RowBox[{"Perm", ",", "21"}], "}"}]}], "]"}], "\[Rule]", 
      "\"\<d\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"e", ",", 
        RowBox[{"{", 
         RowBox[{"Perm", ",", "21"}], "}"}]}], "]"}], "\[Rule]", 
      "\"\<e\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"f", ",", 
        RowBox[{"{", 
         RowBox[{"Perm", ",", "21"}], "}"}]}], "]"}], "\[Rule]", 
      "\"\<f\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"g", ",", 
        RowBox[{"{", 
         RowBox[{"Perm", ",", "21"}], "}"}]}], "]"}], "\[Rule]", 
      "\"\<g\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"h", ",", 
        RowBox[{"{", 
         RowBox[{"Perm", ",", "21"}], "}"}]}], "]"}], "\[Rule]", 
      "\"\<h\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"a", ",", "Rules"}], "]"}], "\[Rule]", "\"\<a\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"b", ",", "Rules"}], "]"}], "\[Rule]", "\"\<b\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"c", ",", "Rules"}], "]"}], "\[Rule]", "\"\<c\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Sort", "[", 
       RowBox[{"TranslatePerm", "[", 
        RowBox[{"d", ",", "Rules"}], "]"}], "]"}], "\[Rule]", "\"\<d\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Sort", "[", 
       RowBox[{"TranslatePerm", "[", 
        RowBox[{"e", ",", "Rules"}], "]"}], "]"}], "\[Rule]", "\"\<e\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Sort", "[", 
       RowBox[{"TranslatePerm", "[", 
        RowBox[{"f", ",", "Rules"}], "]"}], "]"}], "\[Rule]", "\"\<f\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Sort", "[", 
       RowBox[{"TranslatePerm", "[", 
        RowBox[{"g", ",", "Rules"}], "]"}], "]"}], "\[Rule]", "\"\<g\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Sort", "[", 
       RowBox[{"TranslatePerm", "[", 
        RowBox[{"h", ",", "Rules"}], "]"}], "]"}], "\[Rule]", "\"\<h\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"a", ",", 
        RowBox[{"{", 
         RowBox[{"Images", ",", "21"}], "}"}]}], "]"}], "\[Rule]", 
      "\"\<a\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"b", ",", 
        RowBox[{"{", 
         RowBox[{"Images", ",", "21"}], "}"}]}], "]"}], "\[Rule]", 
      "\"\<b\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"c", ",", 
        RowBox[{"{", 
         RowBox[{"Images", ",", "21"}], "}"}]}], "]"}], "\[Rule]", 
      "\"\<c\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"d", ",", 
        RowBox[{"{", 
         RowBox[{"Images", ",", "21"}], "}"}]}], "]"}], "\[Rule]", 
      "\"\<d\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"e", ",", 
        RowBox[{"{", 
         RowBox[{"Images", ",", "21"}], "}"}]}], "]"}], "\[Rule]", 
      "\"\<e\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"f", ",", 
        RowBox[{"{", 
         RowBox[{"Images", ",", "21"}], "}"}]}], "]"}], "\[Rule]", 
      "\"\<f\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"g", ",", 
        RowBox[{"{", 
         RowBox[{"Images", ",", "21"}], "}"}]}], "]"}], "\[Rule]", 
      "\"\<g\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TranslatePerm", "[", 
       RowBox[{"h", ",", 
        RowBox[{"{", 
         RowBox[{"Images", ",", "21"}], "}"}]}], "]"}], "\[Rule]", 
      "\"\<h\>\""}]}], "}"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SchreierSims", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"GenSet", "[", 
      RowBox[{"a", ",", "b", ",", "c"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"Perm", ",", "21"}], "}"}]}], "]"}], ",", "21", ",", 
   RowBox[{"xPermVerbose", "\[Rule]", "True"}], ",", 
   RowBox[{"UseRules", "\[Rule]", "$xPermRules"}]}], "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Schreier-Sims-Step called with B=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10"}], "}"}], "\[InvisibleSpace]", "\<\", S=\"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "]"}], 
   "\[InvisibleSpace]", "\<\", i=\"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\", T=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", "\<\"c\"\>", "]"}]}],
  SequenceForm["Schreier-Sims-Step called with B=", {9, 10}, ", S=", 
   xAct`xPerm`GenSet["a", "b", "c"], ", i=", 2, ", T=", 
   xAct`xPerm`GenSet["c"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Schreier-Sims-Step called with B=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10"}], "}"}], "\[InvisibleSpace]", "\<\", S=\"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "]"}], 
   "\[InvisibleSpace]", "\<\", i=\"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\", T=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "]"}]}],
  SequenceForm["Schreier-Sims-Step called with B=", {9, 10}, ", S=", 
   xAct`xPerm`GenSet["a", "b", "c"], ", i=", 1, ", T=", 
   xAct`xPerm`GenSet["a", "b", "c"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Appended S[[\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\"]]=\"\>", "\[InvisibleSpace]", "\<\"d\"\>"}],
  SequenceForm["Appended S[[", 4, "]]=", "d"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Schreier-Sims-Step called with B=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10"}], "}"}], "\[InvisibleSpace]", "\<\", S=\"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"d\"\>"}], "]"}], "\[InvisibleSpace]", "\<\", i=\"\>", 
   "\[InvisibleSpace]", "2", "\[InvisibleSpace]", "\<\", T=\"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", "\<\"d\"\>", "]"}]}],
  SequenceForm["Schreier-Sims-Step called with B=", {9, 10}, ", S=", 
   xAct`xPerm`GenSet["a", "b", "c", "d"], ", i=", 2, ", T=", 
   xAct`xPerm`GenSet["d"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Appended S[[\"\>", "\[InvisibleSpace]", "5", 
   "\[InvisibleSpace]", "\<\"]]=\"\>", "\[InvisibleSpace]", "\<\"e\"\>"}],
  SequenceForm["Appended S[[", 5, "]]=", "e"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Appended B[[\"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\"]]=\"\>", "\[InvisibleSpace]", "8"}],
  SequenceForm["Appended B[[", 3, "]]=", 8],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Schreier-Sims-Step called with B=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "8"}], "}"}], 
   "\[InvisibleSpace]", "\<\", S=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>",
      ",", "\<\"e\"\>"}], "]"}], "\[InvisibleSpace]", "\<\", i=\"\>", 
   "\[InvisibleSpace]", "3", "\[InvisibleSpace]", "\<\", T=\"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", "\<\"e\"\>", "]"}]}],
  SequenceForm["Schreier-Sims-Step called with B=", {9, 10, 8}, ", S=", 
   xAct`xPerm`GenSet["a", "b", "c", "d", "e"], ", i=", 3, ", T=", 
   xAct`xPerm`GenSet["e"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Finished check of H(\"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\") with base \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", "8", "}"}], "\[InvisibleSpace]", "\<\" and SGS \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", "\<\"e\"\>", "]"}]}],
  SequenceForm["Finished check of H(", 3, ") with base ", {8}, " and SGS ", 
   xAct`xPerm`GenSet["e"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Finished check of H(\"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\") with base \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"10", ",", "8"}], "}"}], "\[InvisibleSpace]", "\<\" and SGS \"\>",
    "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"c\"\>", ",", "\<\"d\"\>", ",", "\<\"e\"\>"}], "]"}]}],
  SequenceForm[
  "Finished check of H(", 2, ") with base ", {10, 8}, " and SGS ", 
   xAct`xPerm`GenSet["c", "d", "e"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Appended S[[\"\>", "\[InvisibleSpace]", "6", 
   "\[InvisibleSpace]", "\<\"]]=\"\>", "\[InvisibleSpace]", "\<\"f\"\>"}],
  SequenceForm["Appended S[[", 6, "]]=", "f"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Appended B[[\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\"]]=\"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Appended B[[", 4, "]]=", 2],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Schreier-Sims-Step called with B=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "8", ",", "2"}], "}"}], 
   "\[InvisibleSpace]", "\<\", S=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>",
      ",", "\<\"e\"\>", ",", "\<\"f\"\>"}], "]"}], 
   "\[InvisibleSpace]", "\<\", i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\", T=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", "\<\"f\"\>", "]"}]}],
  SequenceForm["Schreier-Sims-Step called with B=", {9, 10, 8, 2}, ", S=", 
   xAct`xPerm`GenSet["a", "b", "c", "d", "e", "f"], ", i=", 4, ", T=", 
   xAct`xPerm`GenSet["f"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Schreier-Sims-Step called with B=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "8", ",", "2"}], "}"}], 
   "\[InvisibleSpace]", "\<\", S=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>",
      ",", "\<\"e\"\>", ",", "\<\"f\"\>"}], "]"}], 
   "\[InvisibleSpace]", "\<\", i=\"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\", T=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", "\<\"f\"\>", "]"}]}],
  SequenceForm["Schreier-Sims-Step called with B=", {9, 10, 8, 2}, ", S=", 
   xAct`xPerm`GenSet["a", "b", "c", "d", "e", "f"], ", i=", 3, ", T=", 
   xAct`xPerm`GenSet["f"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Schreier-Sims-Step called with B=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "8", ",", "2"}], "}"}], 
   "\[InvisibleSpace]", "\<\", S=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>",
      ",", "\<\"e\"\>", ",", "\<\"f\"\>"}], "]"}], 
   "\[InvisibleSpace]", "\<\", i=\"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\", T=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", "\<\"f\"\>", "]"}]}],
  SequenceForm["Schreier-Sims-Step called with B=", {9, 10, 8, 2}, ", S=", 
   xAct`xPerm`GenSet["a", "b", "c", "d", "e", "f"], ", i=", 2, ", T=", 
   xAct`xPerm`GenSet["f"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Finished check of H(\"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\") with base \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"10", ",", "8", ",", "2"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and SGS \"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"c\"\>", ",", "\<\"d\"\>", ",", "\<\"e\"\>", 
     ",", "\<\"f\"\>"}], "]"}]}],
  SequenceForm[
  "Finished check of H(", 2, ") with base ", {10, 8, 2}, " and SGS ", 
   xAct`xPerm`GenSet["c", "d", "e", "f"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Appended S[[\"\>", "\[InvisibleSpace]", "7", 
   "\[InvisibleSpace]", "\<\"]]=\"\>", "\[InvisibleSpace]", "\<\"g\"\>"}],
  SequenceForm["Appended S[[", 7, "]]=", "g"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Appended B[[\"\>", "\[InvisibleSpace]", "5", 
   "\[InvisibleSpace]", "\<\"]]=\"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Appended B[[", 5, "]]=", 1],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Schreier-Sims-Step called with B=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "8", ",", "2", ",", "1"}], "}"}], 
   "\[InvisibleSpace]", "\<\", S=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>",
      ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>"}], "]"}], 
   "\[InvisibleSpace]", "\<\", i=\"\>", "\[InvisibleSpace]", "5", 
   "\[InvisibleSpace]", "\<\", T=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", "\<\"g\"\>", "]"}]}],
  SequenceForm[
  "Schreier-Sims-Step called with B=", {9, 10, 8, 2, 1}, ", S=", 
   xAct`xPerm`GenSet["a", "b", "c", "d", "e", "f", "g"], ", i=", 5, ", T=", 
   xAct`xPerm`GenSet["g"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Schreier-Sims-Step called with B=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "8", ",", "2", ",", "1"}], "}"}], 
   "\[InvisibleSpace]", "\<\", S=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>",
      ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>"}], "]"}], 
   "\[InvisibleSpace]", "\<\", i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\", T=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", "\<\"g\"\>", "]"}]}],
  SequenceForm[
  "Schreier-Sims-Step called with B=", {9, 10, 8, 2, 1}, ", S=", 
   xAct`xPerm`GenSet["a", "b", "c", "d", "e", "f", "g"], ", i=", 4, ", T=", 
   xAct`xPerm`GenSet["g"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Schreier-Sims-Step called with B=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "8", ",", "2", ",", "1"}], "}"}], 
   "\[InvisibleSpace]", "\<\", S=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>",
      ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>"}], "]"}], 
   "\[InvisibleSpace]", "\<\", i=\"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\", T=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", "\<\"g\"\>", "]"}]}],
  SequenceForm[
  "Schreier-Sims-Step called with B=", {9, 10, 8, 2, 1}, ", S=", 
   xAct`xPerm`GenSet["a", "b", "c", "d", "e", "f", "g"], ", i=", 3, ", T=", 
   xAct`xPerm`GenSet["g"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Schreier-Sims-Step called with B=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "8", ",", "2", ",", "1"}], "}"}], 
   "\[InvisibleSpace]", "\<\", S=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>",
      ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>"}], "]"}], 
   "\[InvisibleSpace]", "\<\", i=\"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\", T=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", "\<\"g\"\>", "]"}]}],
  SequenceForm[
  "Schreier-Sims-Step called with B=", {9, 10, 8, 2, 1}, ", S=", 
   xAct`xPerm`GenSet["a", "b", "c", "d", "e", "f", "g"], ", i=", 2, ", T=", 
   xAct`xPerm`GenSet["g"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Finished check of H(\"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\") with base \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"10", ",", "8", ",", "2", ",", "1"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and SGS \"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"c\"\>", ",", "\<\"d\"\>", ",", "\<\"e\"\>", ",", "\<\"f\"\>",
      ",", "\<\"g\"\>"}], "]"}]}],
  SequenceForm[
  "Finished check of H(", 2, ") with base ", {10, 8, 2, 1}, " and SGS ", 
   xAct`xPerm`GenSet["c", "d", "e", "f", "g"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Appended S[[\"\>", "\[InvisibleSpace]", "8", 
   "\[InvisibleSpace]", "\<\"]]=\"\>", "\[InvisibleSpace]", "\<\"h\"\>"}],
  SequenceForm["Appended S[[", 8, "]]=", "h"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Appended B[[\"\>", "\[InvisibleSpace]", "6", 
   "\[InvisibleSpace]", "\<\"]]=\"\>", "\[InvisibleSpace]", "12"}],
  SequenceForm["Appended B[[", 6, "]]=", 12],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Schreier-Sims-Step called with B=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "8", ",", "2", ",", "1", ",", "12"}], "}"}], 
   "\[InvisibleSpace]", "\<\", S=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>",
      ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>", 
     ",", "\<\"h\"\>"}], "]"}], "\[InvisibleSpace]", "\<\", i=\"\>", 
   "\[InvisibleSpace]", "6", "\[InvisibleSpace]", "\<\", T=\"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", "\<\"h\"\>", "]"}]}],
  SequenceForm[
  "Schreier-Sims-Step called with B=", {9, 10, 8, 2, 1, 12}, ", S=", 
   xAct`xPerm`GenSet["a", "b", "c", "d", "e", "f", "g", "h"], ", i=", 6, 
   ", T=", 
   xAct`xPerm`GenSet["h"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Schreier-Sims-Step called with B=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "8", ",", "2", ",", "1", ",", "12"}], "}"}], 
   "\[InvisibleSpace]", "\<\", S=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>",
      ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>", 
     ",", "\<\"h\"\>"}], "]"}], "\[InvisibleSpace]", "\<\", i=\"\>", 
   "\[InvisibleSpace]", "5", "\[InvisibleSpace]", "\<\", T=\"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", "\<\"h\"\>", "]"}]}],
  SequenceForm[
  "Schreier-Sims-Step called with B=", {9, 10, 8, 2, 1, 12}, ", S=", 
   xAct`xPerm`GenSet["a", "b", "c", "d", "e", "f", "g", "h"], ", i=", 5, 
   ", T=", 
   xAct`xPerm`GenSet["h"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Schreier-Sims-Step called with B=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "8", ",", "2", ",", "1", ",", "12"}], "}"}], 
   "\[InvisibleSpace]", "\<\", S=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>",
      ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>", 
     ",", "\<\"h\"\>"}], "]"}], "\[InvisibleSpace]", "\<\", i=\"\>", 
   "\[InvisibleSpace]", "4", "\[InvisibleSpace]", "\<\", T=\"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", "\<\"h\"\>", "]"}]}],
  SequenceForm[
  "Schreier-Sims-Step called with B=", {9, 10, 8, 2, 1, 12}, ", S=", 
   xAct`xPerm`GenSet["a", "b", "c", "d", "e", "f", "g", "h"], ", i=", 4, 
   ", T=", 
   xAct`xPerm`GenSet["h"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Schreier-Sims-Step called with B=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "8", ",", "2", ",", "1", ",", "12"}], "}"}], 
   "\[InvisibleSpace]", "\<\", S=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>",
      ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>", 
     ",", "\<\"h\"\>"}], "]"}], "\[InvisibleSpace]", "\<\", i=\"\>", 
   "\[InvisibleSpace]", "3", "\[InvisibleSpace]", "\<\", T=\"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", "\<\"h\"\>", "]"}]}],
  SequenceForm[
  "Schreier-Sims-Step called with B=", {9, 10, 8, 2, 1, 12}, ", S=", 
   xAct`xPerm`GenSet["a", "b", "c", "d", "e", "f", "g", "h"], ", i=", 3, 
   ", T=", 
   xAct`xPerm`GenSet["h"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Schreier-Sims-Step called with B=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "8", ",", "2", ",", "1", ",", "12"}], "}"}], 
   "\[InvisibleSpace]", "\<\", S=\"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>",
      ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>", 
     ",", "\<\"h\"\>"}], "]"}], "\[InvisibleSpace]", "\<\", i=\"\>", 
   "\[InvisibleSpace]", "2", "\[InvisibleSpace]", "\<\", T=\"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", "\<\"h\"\>", "]"}]}],
  SequenceForm[
  "Schreier-Sims-Step called with B=", {9, 10, 8, 2, 1, 12}, ", S=", 
   xAct`xPerm`GenSet["a", "b", "c", "d", "e", "f", "g", "h"], ", i=", 2, 
   ", T=", 
   xAct`xPerm`GenSet["h"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Finished check of H(\"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\") with base \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"10", ",", "8", ",", "2", ",", "1", ",", "12"}], "}"}], 
   "\[InvisibleSpace]", "\<\" and SGS \"\>", "\[InvisibleSpace]", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"c\"\>", ",", "\<\"d\"\>", ",", "\<\"e\"\>", ",", "\<\"f\"\>",
      ",", "\<\"g\"\>", ",", "\<\"h\"\>"}], "]"}]}],
  SequenceForm[
  "Finished check of H(", 2, ") with base ", {10, 8, 2, 1, 12}, " and SGS ", 
   xAct`xPerm`GenSet["c", "d", "e", "f", "g", "h"]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Checked \"\>", "\[InvisibleSpace]", "140", 
   "\[InvisibleSpace]", "\<\" generators and obtained group of order \"\>", 
   "\[InvisibleSpace]", "27783"}],
  SequenceForm[
  "Checked ", 140, " generators and obtained group of order ", 27783],
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "8", ",", "2", ",", "1", ",", "12"}], "}"}], 
   ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>",
      ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>", 
     ",", "\<\"h\"\>"}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["Note the influence of the notation:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"SchreierSims", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"TranslatePerm", "[", 
     RowBox[{
      RowBox[{"GenSet", "[", 
       RowBox[{"a", ",", "b", ",", "c"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"Perm", ",", "21"}], "}"}]}], "]"}]}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.47895999999999999685584839426155667752`5.700899158417253", ",", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "10", ",", "8", ",", "2", ",", "1", ",", "12"}], 
      "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "9", ",", "15", ",", "12", ",", "19", ",", "17", ",", "20", ",", 
          "18", ",", "1", ",", "8", ",", "3", ",", "2", ",", "10", ",", "7", 
          ",", "4", ",", "11", ",", "5", ",", "16", ",", "13", ",", "14", ",",
           "21", ",", "6"}], "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",",
           "8", ",", "20", ",", "10", ",", "11", ",", "17", ",", "13", ",", 
          "14", ",", "15", ",", "16", ",", "19", ",", "9", ",", "12", ",", 
          "18", ",", "21"}], "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",",
           "8", ",", "9", ",", "11", ",", "21", ",", "12", ",", "14", ",", 
          "16", ",", "15", ",", "13", ",", "17", ",", "18", ",", "19", ",", 
          "20", ",", "10"}], "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",",
           "21", ",", "9", ",", "16", ",", "11", ",", "12", ",", "8", ",", 
          "10", ",", "15", ",", "14", ",", "17", ",", "18", ",", "19", ",", 
          "20", ",", "13"}], "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",",
           "11", ",", "9", ",", "10", ",", "16", ",", "12", ",", "21", ",", 
          "13", ",", "15", ",", "8", ",", "17", ",", "18", ",", "19", ",", 
          "20", ",", "14"}], "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "6", ",", "2", ",", "5", ",", "7", ",", "3", ",", "4", ",",
           "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", 
          "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", 
          "20", ",", "21"}], "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "6", ",", "2", ",", "5", ",", "3", ",", "4", ",", "7", ",", "1", ",",
           "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", 
          "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", 
          "20", ",", "21"}], "}"}], "]"}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",",
           "8", ",", "9", ",", "10", ",", "11", ",", "15", ",", "13", ",", 
          "14", ",", "20", ",", "16", ",", "18", ",", "19", ",", "17", ",", 
          "12", ",", "21"}], "}"}], "]"}]}], "]"}]}], "]"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"SchreierSims", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"GenSet", "[", 
     RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.27445300000000000251176857091195415705`5.459067895623801", ",", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "10", ",", "8", ",", "2", ",", "1", ",", "12"}], 
      "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "8", ",", "9"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "11", ",", "15"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "10", ",", "12"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", "14", ",", "19"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"5", ",", "16", ",", "17"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"6", ",", "21", ",", "20"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"7", ",", "13", ",", "18"}], "}"}]}], "]"}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"9", ",", "18", ",", "20"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"12", ",", "19", ",", "17"}], "}"}]}], "]"}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"10", ",", "21", ",", "11"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"13", ",", "16", ",", "14"}], "}"}]}], "]"}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"8", ",", "13", ",", "21"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"10", ",", "14", ",", "16"}], "}"}]}], "]"}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"8", ",", "16", ",", "11"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"13", ",", "14", ",", "21"}], "}"}]}], "]"}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"2", ",", "3", ",", "6"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", "7", ",", "5"}], "}"}]}], "]"}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "7", ",", "6"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "4", ",", "5"}], "}"}]}], "]"}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"12", ",", "20", ",", "15"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"17", ",", "19", ",", "18"}], "}"}]}], "]"}]}], "]"}]}], 
    "]"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"SchreierSims", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"TranslatePerm", "[", 
     RowBox[{
      RowBox[{"GenSet", "[", 
       RowBox[{"a", ",", "b", ",", "c"}], "]"}], ",", "Rules"}], "]"}]}], 
   "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.31047799999999997622168734778824727982`5.512630745434407", ",", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "10", ",", "8", ",", "2", ",", "1", ",", "12"}], 
      "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "8"}], ",", 
         RowBox[{"8", "\[Rule]", "9"}], ",", 
         RowBox[{"9", "\[Rule]", "1"}], ",", 
         RowBox[{"2", "\[Rule]", "11"}], ",", 
         RowBox[{"11", "\[Rule]", "15"}], ",", 
         RowBox[{"15", "\[Rule]", "2"}], ",", 
         RowBox[{"3", "\[Rule]", "10"}], ",", 
         RowBox[{"10", "\[Rule]", "12"}], ",", 
         RowBox[{"12", "\[Rule]", "3"}], ",", 
         RowBox[{"4", "\[Rule]", "14"}], ",", 
         RowBox[{"14", "\[Rule]", "19"}], ",", 
         RowBox[{"19", "\[Rule]", "4"}], ",", 
         RowBox[{"5", "\[Rule]", "16"}], ",", 
         RowBox[{"16", "\[Rule]", "17"}], ",", 
         RowBox[{"17", "\[Rule]", "5"}], ",", 
         RowBox[{"6", "\[Rule]", "21"}], ",", 
         RowBox[{"21", "\[Rule]", "20"}], ",", 
         RowBox[{"20", "\[Rule]", "6"}], ",", 
         RowBox[{"7", "\[Rule]", "13"}], ",", 
         RowBox[{"13", "\[Rule]", "18"}], ",", 
         RowBox[{"18", "\[Rule]", "7"}]}], "]"}], ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"9", "\[Rule]", "18"}], ",", 
         RowBox[{"18", "\[Rule]", "20"}], ",", 
         RowBox[{"20", "\[Rule]", "9"}], ",", 
         RowBox[{"12", "\[Rule]", "19"}], ",", 
         RowBox[{"19", "\[Rule]", "17"}], ",", 
         RowBox[{"17", "\[Rule]", "12"}]}], "]"}], ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"10", "\[Rule]", "21"}], ",", 
         RowBox[{"21", "\[Rule]", "11"}], ",", 
         RowBox[{"11", "\[Rule]", "10"}], ",", 
         RowBox[{"13", "\[Rule]", "16"}], ",", 
         RowBox[{"16", "\[Rule]", "14"}], ",", 
         RowBox[{"14", "\[Rule]", "13"}]}], "]"}], ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"8", "\[Rule]", "13"}], ",", 
         RowBox[{"10", "\[Rule]", "14"}], ",", 
         RowBox[{"13", "\[Rule]", "21"}], ",", 
         RowBox[{"14", "\[Rule]", "16"}], ",", 
         RowBox[{"16", "\[Rule]", "10"}], ",", 
         RowBox[{"21", "\[Rule]", "8"}]}], "]"}], ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"8", "\[Rule]", "16"}], ",", 
         RowBox[{"11", "\[Rule]", "8"}], ",", 
         RowBox[{"13", "\[Rule]", "14"}], ",", 
         RowBox[{"14", "\[Rule]", "21"}], ",", 
         RowBox[{"16", "\[Rule]", "11"}], ",", 
         RowBox[{"21", "\[Rule]", "13"}]}], "]"}], ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "3"}], ",", 
         RowBox[{"3", "\[Rule]", "6"}], ",", 
         RowBox[{"4", "\[Rule]", "7"}], ",", 
         RowBox[{"5", "\[Rule]", "4"}], ",", 
         RowBox[{"6", "\[Rule]", "2"}], ",", 
         RowBox[{"7", "\[Rule]", "5"}]}], "]"}], ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "7"}], ",", 
         RowBox[{"3", "\[Rule]", "4"}], ",", 
         RowBox[{"4", "\[Rule]", "5"}], ",", 
         RowBox[{"5", "\[Rule]", "3"}], ",", 
         RowBox[{"6", "\[Rule]", "1"}], ",", 
         RowBox[{"7", "\[Rule]", "6"}]}], "]"}], ",", 
       RowBox[{"Rules", "[", 
        RowBox[{
         RowBox[{"12", "\[Rule]", "20"}], ",", 
         RowBox[{"15", "\[Rule]", "12"}], ",", 
         RowBox[{"17", "\[Rule]", "19"}], ",", 
         RowBox[{"18", "\[Rule]", "17"}], ",", 
         RowBox[{"19", "\[Rule]", "18"}], ",", 
         RowBox[{"20", "\[Rule]", "15"}]}], "]"}]}], "]"}]}], "]"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"SchreierSims", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"TranslatePerm", "[", 
     RowBox[{
      RowBox[{"GenSet", "[", 
       RowBox[{"a", ",", "b", ",", "c"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"Images", ",", "21"}], "}"}]}], "]"}]}], "]"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.44436199999999997922728312005347106606`5.668336826068854", ",", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "10", ",", "8", ",", "2", ",", "1", ",", "12"}], 
      "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{
         "8", ",", "11", ",", "10", ",", "14", ",", "16", ",", "21", ",", 
          "13", ",", "9", ",", "1", ",", "12", ",", "15", ",", "3", ",", "18",
           ",", "19", ",", "2", ",", "17", ",", "5", ",", "7", ",", "4", ",", 
          "6", ",", "20"}], "}"}], "]"}], ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",",
           "8", ",", "18", ",", "10", ",", "11", ",", "19", ",", "13", ",", 
          "14", ",", "15", ",", "16", ",", "12", ",", "20", ",", "17", ",", 
          "9", ",", "21"}], "}"}], "]"}], ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",",
           "8", ",", "9", ",", "21", ",", "10", ",", "12", ",", "16", ",", 
          "13", ",", "15", ",", "14", ",", "17", ",", "18", ",", "19", ",", 
          "20", ",", "11"}], "}"}], "]"}], ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",",
           "13", ",", "9", ",", "14", ",", "11", ",", "12", ",", "21", ",", 
          "16", ",", "15", ",", "10", ",", "17", ",", "18", ",", "19", ",", 
          "20", ",", "8"}], "}"}], "]"}], ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",",
           "16", ",", "9", ",", "10", ",", "8", ",", "12", ",", "14", ",", 
          "21", ",", "15", ",", "11", ",", "17", ",", "18", ",", "19", ",", 
          "20", ",", "13"}], "}"}], "]"}], ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "3", ",", "6", ",", "7", ",", "4", ",", "2", ",", "5", ",",
           "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", 
          "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", 
          "20", ",", "21"}], "}"}], "]"}], ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{
         "7", ",", "2", ",", "4", ",", "5", ",", "3", ",", "1", ",", "6", ",",
           "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", 
          "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", 
          "20", ",", "21"}], "}"}], "]"}], ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",",
           "8", ",", "9", ",", "10", ",", "11", ",", "20", ",", "13", ",", 
          "14", ",", "12", ",", "16", ",", "19", ",", "17", ",", "18", ",", 
          "15", ",", "21"}], "}"}], "]"}]}], "]"}]}], "]"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["Another example (Butler p. 133):", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"a", "=", 
   RowBox[{"xAct`xPerm`Cycles", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "4", ",", "5", ",", "7", ",", "3", ",", "6"}], "}"}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{"xAct`xPerm`Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"g1", "=", 
   RowBox[{"xAct`xPerm`Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "6", ",", "3", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"g2", "=", 
   RowBox[{"xAct`xPerm`Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"g3", "=", 
   RowBox[{"xAct`xPerm`Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "7"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$xPermRules", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "->", "\"\<a\>\""}], ",", 
     RowBox[{"b", "->", "\"\<b\>\""}], ",", 
     RowBox[{"g1", "->", "\"\<g1\>\""}], ",", 
     RowBox[{"g2", "->", "\"\<g2\>\""}], ",", 
     RowBox[{"g3", "->", "\"\<g3\>\""}]}], "}"}]}], ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SchreierSims", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{"a", ",", "b"}], "]"}], ",", 
   RowBox[{"UseRules", "\[Rule]", "$xPermRules"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"g1\"\>", 
     ",", "\<\"g3\"\>", ",", "\<\"g2\"\>"}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["\<\
The solution given by Butler is slightly different, because he is using \
algorithm \"Butler2\", which we have not encoded. We simply check that his \
permutation g3 is in our group:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SchreierSims", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{"a", ",", "b"}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "2", ",", "4", ",", "5", ",", "7", ",", "3", ",", "6"}], 
       "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "5"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "6", ",", "3", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "5"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"4", ",", "6"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "7"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"4", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6"}], "}"}]}], "]"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermMemberQ", "[", 
  RowBox[{
   RowBox[{"xAct`xPerm`Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", "%"}], "]"}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
4.8. Some important SGS. Symmetric, Antisymmetric, PairSymmetric\
\>", "Subsection"],

Cell["Strong generating sets for important groups:", "Text"],

Cell[TextData[{
 "These two are now (from xPerm 1.2.0) inert heads, as ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " v9 contains them as well in inert form:"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Unprotect", "[", "Symmetric", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Symmetric", "[", 
    RowBox[{"inds_List", ",", "not_"}], "]"}], ":=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"Sort", "@", "inds"}], ",", 
     RowBox[{"TranslatePerm", "[", 
      RowBox[{
       RowBox[{"GenSet", "@@", 
        RowBox[{"(", 
         RowBox[{"Cycles", "/@", 
          RowBox[{"Partition", "[", 
           RowBox[{
            RowBox[{"Sort", "@", "inds"}], ",", "2", ",", "1"}], "]"}]}], 
         ")"}]}], ",", "not"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Symmetric", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "_"}], "]"}], ":=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"GenSet", "[", "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "Symmetric", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierSims", ",", "\[IndentingNewLine]", 
   RowBox[{"SchreierSims", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"Symmetric", "[", 
      RowBox[{"{", 
       RowBox[{"5", ",", "3", ",", "6"}], "}"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "5"}], "}"}], "]"}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "6"}], "}"}], "]"}]}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierSims", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Symmetric", ",", "\[IndentingNewLine]", 
   RowBox[{"Symmetric", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "3", ",", "6"}], "}"}], ",", "Cycles"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "5"}], "}"}], "]"}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "6"}], "}"}], "]"}]}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Symmetric", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Unprotect", "[", "Antisymmetric", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Antisymmetric", "[", 
    RowBox[{"inds_List", ",", "not_"}], "]"}], ":=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"Sort", "@", "inds"}], ",", 
     RowBox[{"TranslatePerm", "[", 
      RowBox[{
       RowBox[{"GenSet", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"-", 
            RowBox[{"Cycles", "[", "#", "]"}]}], "&"}], "/@", 
          RowBox[{"Partition", "[", 
           RowBox[{
            RowBox[{"Sort", "@", "inds"}], ",", "2", ",", "1"}], "]"}]}], 
         ")"}]}], ",", "not"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Antisymmetric", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "_"}], "]"}], ":=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{"-", "ID"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "Antisymmetric", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"SchreierSims", ",", "\[IndentingNewLine]", 
   RowBox[{"SchreierSims", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"Antisymmetric", "[", 
      RowBox[{"{", 
       RowBox[{"5", ",", "3", ",", "6"}], "}"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"3", ",", "5"}], "}"}], "]"}]}], ",", 
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"5", ",", "6"}], "}"}], "]"}]}]}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SchreierSims", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"Antisymmetric", ",", "\[IndentingNewLine]", 
   RowBox[{"Antisymmetric", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "3", ",", "6"}], "}"}], ",", "Cycles"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"3", ",", "5"}], "}"}], "]"}]}], ",", 
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"5", ",", "6"}], "}"}], "]"}]}]}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Antisymmetric", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Here we are including the four points in the base, instead of only the two \
needed, just for aesthetics of the results when sorting indices:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"RiemannSymmetric", "[", 
   RowBox[{
    RowBox[{"inds", ":", 
     RowBox[{"{", 
      RowBox[{"i1_", ",", "i2_", ",", "i3_", ",", "i4_"}], "}"}]}], ",", 
    RowBox[{"not_:", "Cycles"}]}], "]"}], ":=", 
  RowBox[{"StrongGenSet", "[", 
   RowBox[{
    RowBox[{"Sort", "@", "inds"}], ",", 
    RowBox[{"TranslatePerm", "[", 
     RowBox[{
      RowBox[{"GenSet", "[", 
       RowBox[{
        RowBox[{"Cycles", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"i1", ",", "i3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"i2", ",", "i4"}], "}"}]}], "]"}], ",", 
        RowBox[{"-", 
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"i1", ",", "i2"}], "}"}], "]"}]}], ",", 
        RowBox[{"-", 
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"i3", ",", "i4"}], "}"}], "]"}]}]}], "]"}], ",", "not"}], 
     "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RiemannSymmetry", "=", "RiemannSymmetric"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"addperm", "[", 
    RowBox[{"sign", ":", 
     RowBox[{"(", 
      RowBox[{"1", "|", 
       RowBox[{"-", "1"}]}], ")"}]}], "]"}], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"p1a_", ",", "p1b_"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"p2a_", ",", "p2b_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"GenSet", "[", 
   RowBox[{"sign", " ", 
    RowBox[{"Cycles", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"p1a", ",", "p2a"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"p1b", ",", "p2b"}], "}"}]}], "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addperm", "[", 
    RowBox[{"sign", ":", 
     RowBox[{"(", 
      RowBox[{"1", "|", 
       RowBox[{"-", "1"}]}], ")"}]}], "]"}], "[", 
   RowBox[{"pair_List", ",", "pairs__List"}], "]"}], ":=", 
  RowBox[{"GenSet", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"sign", "^", 
      RowBox[{"Length", "[", 
       RowBox[{"{", "pairs", "}"}], "]"}]}], " ", 
     RowBox[{"Cycles", "@@", 
      RowBox[{"Transpose", "@", 
       RowBox[{"RotateRight", "[", 
        RowBox[{"{", 
         RowBox[{"pair", ",", "pairs"}], "}"}], "]"}]}]}]}], ",", 
    RowBox[{
     RowBox[{"addperm", "[", "sign", "]"}], "[", "pairs", "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addperm", "[", "_", "]"}], "[", "__", "]"}], ":=", 
  RowBox[{"GenSet", "[", "]"}]}]}], "Input",
 InitializationCell->True],

Cell["Again, now we add all points in the base:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PairSymmetric", "[", 
    RowBox[{
     RowBox[{"pairs", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_", ",", "_"}], "}"}], "..."}], "}"}]}], ",", "sym1_", ",", 
     "sym2_", ",", 
     RowBox[{"not_:", "Cycles"}]}], "]"}], ":=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"Sort", "[", 
      RowBox[{"Flatten", "@", "pairs"}], "]"}], ",", 
     RowBox[{"TranslatePerm", "[", 
      RowBox[{
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"addperm", "[", "sym1", "]"}], "@@", "pairs"}], ",", 
         RowBox[{"Switch", "[", 
          RowBox[{"sym2", ",", "1", ",", 
           RowBox[{"GenSet", "@@", 
            RowBox[{"Map", "[", 
             RowBox[{"Cycles", ",", "pairs"}], "]"}]}], ",", 
           RowBox[{"-", "1"}], ",", 
           RowBox[{"GenSet", "@@", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"-", 
                RowBox[{"Cycles", "[", "#", "]"}]}], "&"}], ",", "pairs"}], 
             "]"}]}], ",", "_", ",", 
           RowBox[{"GenSet", "[", "]"}]}], "]"}]}], "]"}], ",", "not"}], 
      "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PairSymmetric", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "12"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", "14"}], "}"}]}], "}"}], ",", "1", ",", 
   RowBox[{"-", "1"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8",
      ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14"}], 
    "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "1", ",", "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13"}], 
        "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "2", ",", "4", ",", "6", ",", "8", ",", "10", ",", "12", ",", "14"}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13"}], 
        "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "6", ",", "8", ",", "10", ",", "12", ",", "14"}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"5", ",", "7", ",", "9", ",", "11", ",", "13"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"6", ",", "8", ",", "10", ",", "12", ",", "14"}], "}"}]}], 
      "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"7", ",", "9", ",", "11", ",", "13"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"8", ",", "10", ",", "12", ",", "14"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"9", ",", "11", ",", "13"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"10", ",", "12", ",", "14"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"11", ",", "13"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"12", ",", "14"}], "}"}]}], "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"7", ",", "8"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"9", ",", "10"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"11", ",", "12"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"13", ",", "14"}], "}"}], "]"}]}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PairSymmetric", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "12"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", "14"}], "}"}]}], "}"}], ",", "0", ",", 
   RowBox[{"-", "1"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8",
      ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14"}], 
    "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"7", ",", "8"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"9", ",", "10"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"11", ",", "12"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"13", ",", "14"}], "}"}], "]"}]}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["\<\
Note there is no difference in the base between these two results:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PairSymmetric", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "1", ",", 
   RowBox[{"-", "1"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], "]"}]}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RiemannSymmetric", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], "]"}]}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["More examples:", "Text"],

Cell["S2:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGS", "=", 
  RowBox[{"SchreierSims", "[", 
   RowBox[{
    RowBox[{"{", "1", "}"}], ",", 
    RowBox[{"GenSet", "[", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrderOfGroup", "[", "SGS", "]"}]], "Input"],

Cell[BoxData["2"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StabilizerChain", "[", "SGS", "]"}], "//", 
  "ColumnForm"}]], "Input"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{
    xAct`xPerm`StrongGenSet[{1}, 
     xAct`xPerm`GenSet[
      xAct`xPerm`Cycles[{1, 2}]]], 
    xAct`xPerm`StrongGenSet[{}, 
     xAct`xPerm`GenSet[]]}],
  Editable->False]], "Output"]
}, Open  ]],

Cell["S3:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGS", "=", 
  RowBox[{"SchreierSims", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}], "]"}]}], "]"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], "]"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrderOfGroup", "[", "SGS", "]"}]], "Input"],

Cell[BoxData["6"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StabilizerChain", "[", "SGS", "]"}], "//", 
  "ColumnForm"}]], "Input"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3"}], "}"}], "]"}]}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "2", "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"2", ",", "3"}], "}"}], "]"}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{
    xAct`xPerm`StrongGenSet[{1, 2}, 
     xAct`xPerm`GenSet[
      xAct`xPerm`Cycles[{1, 2}], 
      xAct`xPerm`Cycles[{2, 3}]]], 
    xAct`xPerm`StrongGenSet[{2}, 
     xAct`xPerm`GenSet[
      xAct`xPerm`Cycles[{2, 3}]]], 
    xAct`xPerm`StrongGenSet[{}, 
     xAct`xPerm`GenSet[]]}],
  Editable->False]], "Output"]
}, Open  ]],

Cell["S4:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGS", "=", 
  RowBox[{"SchreierSims", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}], "]"}], ",", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], "]"}]}], "]"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], "]"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrderOfGroup", "[", "SGS", "]"}]], "Input"],

Cell[BoxData["24"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StabilizerChain", "[", "SGS", "]"}], "//", 
  "ColumnForm"}]], "Input"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3"}], "}"}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}], "]"}]}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3"}], "}"}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}], "]"}]}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "3", "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"3", ",", "4"}], "}"}], "]"}], "]"}]}], "]"}]},
    {
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{
    xAct`xPerm`StrongGenSet[{1, 2, 3}, 
     xAct`xPerm`GenSet[
      xAct`xPerm`Cycles[{1, 2}], 
      xAct`xPerm`Cycles[{2, 3}], 
      xAct`xPerm`Cycles[{3, 4}]]], 
    xAct`xPerm`StrongGenSet[{2, 3}, 
     xAct`xPerm`GenSet[
      xAct`xPerm`Cycles[{2, 3}], 
      xAct`xPerm`Cycles[{3, 4}]]], 
    xAct`xPerm`StrongGenSet[{3}, 
     xAct`xPerm`GenSet[
      xAct`xPerm`Cycles[{3, 4}]]], 
    xAct`xPerm`StrongGenSet[{}, 
     xAct`xPerm`GenSet[]]}],
  Editable->False]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["4.9. Stabilization II", "Subsection"],

Cell[CellGroupData[{

Cell["4.9.1. Stabilizer", "Subsubsection"],

Cell["\<\
Given a group, this function gives the stabilizer subgroup of a list of \
points. It first constructs a new SGS with those points at the beginning of \
the base. Then it is trivial to compute the stabilizer:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Stabilizer", "[", 
    RowBox[{"points_List", ",", "SGS_"}], "]"}], ":=", 
   RowBox[{"Stabilizer", "[", 
    RowBox[{"points", ",", "SGS", ",", 
     RowBox[{"PermLength", "[", "SGS", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Stabilizer", "[", 
    RowBox[{"points_List", ",", 
     RowBox[{"SGS", ":", 
      RowBox[{"StrongGenSet", "[", 
       RowBox[{"base_", ",", "GS_"}], "]"}]}], ",", "len_Integer"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"DeleteCases", "[", 
        RowBox[{"#1", ",", 
         RowBox[{"Alternatives", "@@", "points"}]}], "]"}], ",", 
       RowBox[{"Stabilizer", "[", 
        RowBox[{"points", ",", "#2"}], "]"}]}], "]"}], "&"}], "@@", 
    RowBox[{"BaseChange", "[", 
     RowBox[{"SGS", ",", 
      RowBox[{"points", "~", "Join", "~", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{"base", ",", 
         RowBox[{"Alternatives", "@@", "points"}]}], "]"}]}], ",", "len"}], 
     "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"Stabilizer", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "Stabilizer", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Compare:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SGS", "=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3"}], "}"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGS", "==", 
  RowBox[{"SchreierSims", "[", 
   RowBox[{
    RowBox[{"SGS", "[", 
     RowBox[{"[", "1", "]"}], "]"}], ",", 
    RowBox[{"SGS", "[", 
     RowBox[{"[", "2", "]"}], "]"}], ",", "3"}], "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Stabilizer", "[", 
  RowBox[{
   RowBox[{"{", "2", "}"}], ",", "SGS", ",", "3"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], "]"}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Stabilizer", "[", 
  RowBox[{
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"SGS", "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"GenSet", "[", "]"}]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"SGS", "=."}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["4.9.2. SetStabilizer", "Subsubsection"],

Cell["\<\
Set-stabilization with strong generating sets is a simple application of the \
backtrack algorithm. See the Case Study 4 in page 113 of Butler's book.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SetStabilizerProperty", "[", 
    RowBox[{"points_List", ",", "perm_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Complement", "[", 
     RowBox[{
      RowBox[{"OnPoints", "[", 
       RowBox[{"points", ",", "perm"}], "]"}], ",", "points"}], "]"}], "===", 
    
    RowBox[{"{", "}"}]}]}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "SetStabilizer", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"MathLink", "\[RuleDelayed]", "$xpermQ"}], ",", 
     RowBox[{"xPermVerbose", "\[Rule]", "False"}], ",", 
     RowBox[{"OrderedBase", "\[Rule]", "False"}]}], "}"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SetStabilizer", "[", 
    RowBox[{"points_", ",", 
     RowBox[{"sgs", ":", 
      RowBox[{"StrongGenSet", "[", 
       RowBox[{"base_", ",", "GS_"}], "]"}]}], ",", 
     RowBox[{"options", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"OptionValue", "[", "MathLink", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MathLinkSetStabilizer", "[", 
      RowBox[{"points", ",", 
       RowBox[{"Max", "[", 
        RowBox[{"points", ",", "base", ",", 
         RowBox[{"PermLength", "[", "GS", "]"}]}], "]"}], ",", "sgs", ",", 
       "options"}], "]"}], ",", 
     RowBox[{"Search", "[", 
      RowBox[{
       RowBox[{"StrongGenSet", "[", 
        RowBox[{"base", ",", "GS"}], "]"}], ",", 
       RowBox[{
        RowBox[{"SetStabilizerProperty", "[", 
         RowBox[{"points", ",", "#"}], "]"}], "&"}], ",", "1", ",", 
       RowBox[{"StrongGenSet", "[", 
        RowBox[{"base", ",", 
         RowBox[{"GenSet", "[", "]"}]}], "]"}], ",", "options"}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"SetStabilizer", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "Infinity"}], "}"}]}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Protect", "[", "SetStabilizer", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Example:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGS", "=", 
  RowBox[{"StrongGenSet", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}], "]"}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrderOfGroup", "[", "%", "]"}]], "Input"],

Cell[BoxData["24"], "Output"]
}, Open  ]],

Cell["\<\
The stabilizer of a set of points is always a subgroup of the set-stabilizer \
of those points:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Stabilizer", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", "SGS"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimino", "[", 
  RowBox[{"Last", "[", "%", "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Group", "[", 
  RowBox[{
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetStabilizer", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", "SGS"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}]}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimino", "[", 
  RowBox[{"Last", "[", "%", "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Group", "[", 
  RowBox[{
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "4", ",", "3"}], "}"}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell["Another example:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Stabilizer", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "SGS"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"GenSet", "[", "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimino", "[", 
  RowBox[{"Last", "[", "%", "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Group", "[", "ID", "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetStabilizer", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "SGS"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}]}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimino", "[", 
  RowBox[{"Last", "[", "%", "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Group", "[", 
  RowBox[{
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "1", ",", "4"}], "}"}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["5. Canonicalization",
 FontColor->RGBColor[0, 0, 1]]], "Section",
 FontSize->24],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"**", "**", "**", "**", "**", "**", "**", "**", "**", "**", "**"}],
    "*", " ", "5.", " ", "Canonicalization"}], " ", 
  "***********************)"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"TimeUsed", "[", "]"}], ",", 
   RowBox[{"SessionTime", "[", "]"}], ",", 
   RowBox[{
    RowBox[{"TimeUsed", "[", "]"}], "/", 
    RowBox[{"SessionTime", "[", "]"}]}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "21.818566999999998`", ",", "67.350692`8.279887055770832", ",", 
   "0.3239549227657802`"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["5.0. Comments", "Subsection"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{"$ReadingVerbose", ",", 
   RowBox[{"Print", "[", "\"\<Reading section 5: Canonicalization\>\"", "]"}],
    ",", "Null", ",", "Null"}], "]"}]], "Input",
 InitializationCell->True],

Cell[TextData[{
 "The process of canonicalization is based on the use of two groups: the \
group S of slot-symmetries and the group D of dummy-symmetries. It is natural \
to send the information concerning S using slots, and the information \
concerning D using names (that is, positions in the canonical list) of \
indices, and we shall follow this convention here. However, the papers by \
Portugal et al. always use slots, having to use a permutation h which keeps \
track of the shifts of dummies. On the other hand each permutation can be \
given as it is or through its inverse. Unfortunately we use in ",
 StyleBox["xTensor",
  FontSlant->"Italic"],
 " precisely the opposite notation to that of Portugal et al, but still we \
want to use their algorithms as they are. We solve this conflict by having \
InversePerm at the input and at the output in the only CanonicalPerm call in ",
 StyleBox["xTensor",
  FontSlant->"Italic"],
 ". That means that in this package we shall use Portugal's notation \
everywhere: permutations map slots to indices: the image of a slot under a \
permutation is the index at that slot. In other words, sorting according to a \
basis of S means deciding the priorities of the different slots."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["5.1. RightCosetRepresentative", "Subsection"],

Cell[CellGroupData[{

Cell["5.1.0. Comments", "Subsubsection"],

Cell[TextData[{
 "From the point of view of tensor indices, we must distinguish two different \
numbered objects: slots and indices. We start from a given index \
configuration C={a, c, b, ...} which can be obtained from a standard \
configuration C0={a, b, c, ...} as C.g=C9 with a permutation g. On the other \
hand we have a symmetry group S of permutations of slots in the tensor, \
independently of which indices are in those slots. In this sense, two \
configurations C1 and C2 are equivalent if they can be related by C1=C2.s \
with s in S. If C1.g1=C0 and C2.g2=C0 then permutations g1 and g2 are \
equivalent if g2=s.g1. We see that S acts on the left on the permutations (we \
are working with right-cosets). In other words, s reshuffle the slots and \
then g maps slots to indices. In the RightCosetRepresentative we always use \
slots only.\n\nAs we said, this is the choice in the Portugal's papers: For \
instance, in page 5 of math-ph/0107031 he says that permutation (1,3,2,4) in \
cyclic notation converts T^{abcd} into T^{cdba}. To stress this point, \
starting version 0.6 (July 2007) of ",
 StyleBox["xPerm",
  FontSlant->"Italic"],
 " we have changed the name CosetRepresentative to RightCosetRepresentative."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["5.1.1. Code", "Subsubsection"],

Cell["\<\
September 2004. Important change: the subroutine is changed to imitate \
Canon's behaviour. This is not better or faster, I just want to facilitate \
comparison of both codes. There are two modifications:
\t1) new input: free. List of free slots. Only those slots need to be \
canonicalized. In our previous code all slots were canonicalized.
\t2) new output: apart from the canonical representative, we output the new \
list of free slots and the new SGS for the group S.\
\>", "Text"],

Cell["\<\
February 2008. The If[Delta1=={},Continue[]] statement requires some \
additional comments. When this is executed we are leaving a base point \
without stabilization, and hence we will later stabilize base points which \
are not first in the base. This is not dangerous because of the following \
reason: if Delta1 is empty that means that the bi point under analysis \
belongs to an orbit Delta with no intersection with the free slots. That \
means that the slots in that orbit are decoupled from the eventual moves of \
other slots to canonicalize the given permutation with respect to free \
indices. When we find an orbit in which our free slots participate then that \
orbit is arranged properly until we drop all free slots from it, and so we go \
back to the previous case.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RightCosetRepresentative"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"RightCosetRepresentative[perm, n, SGS] for an unsigned \
permutation perm of degree n and a SGS for group S gives a canonical \
representative of the right coset S.perm of perm with respect to subgroup S \
of the symmetric group Sn. The criterium is the minimization of images of \
points of the base of SGS under the elements of the coset, following the \
order given by the base. A fourth argument can be used to give additional \
priority to some points (the free slots in the tensorial context)..\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567978014-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "xAct`xPerm`RightCosetRepresentative", "]"}], "=", 
   
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"xPermVerbose", "\[Rule]", "False"}], ",", "\[IndentingNewLine]", 
     RowBox[{"BaseChangeCheck", "\[Rule]", "False"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MathLink", "\[RuleDelayed]", "$xpermQ"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"xAct`xPerm`RightCosetRepresentative", "[", 
    RowBox[{"p_", ",", "len_", ",", 
     RowBox[{"sym", ":", 
      RowBox[{"(", 
       RowBox[{"_Symmetric", "|", "_Antisymmetric"}], ")"}]}], ",", 
     "rest___"}], "]"}], ":=", 
   RowBox[{"xAct`xPerm`RightCosetRepresentative", "[", 
    RowBox[{"p", ",", "len", ",", 
     RowBox[{"SchreierSims", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "sym"}], "]"}], ",", "rest"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"xAct`xPerm`RightCosetRepresentative", "[", 
     RowBox[{
      RowBox[{"p_", "?", "PermQ"}], ",", "len_Integer", ",", 
      RowBox[{"StrongGenSet", "[", 
       RowBox[{"base_List", ",", "GS_GenSet"}], "]"}], ",", "free_List", ",", 
      
      RowBox[{"options", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"perm", "=", "p"}], ",", 
        RowBox[{"newGS", "=", "GS"}], ",", 
        RowBox[{"newbase", "=", "base"}], ",", "newbase2", ",", "newGS2", ",", 
        RowBox[{"newfree", "=", "free"}], ",", "Delta", ",", "Delta1", ",", 
        "Deltap", ",", "k", ",", "pk", ",", "pp", ",", "om", ",", "bi", ",", 
        RowBox[{"n", "=", "0"}], ",", "verb", ",", "bcc"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"verb", ",", "bcc"}], "}"}], "=", 
        RowBox[{"OptionValue", "[", 
         RowBox[{"{", 
          RowBox[{"xPermVerbose", ",", "BaseChangeCheck"}], "}"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"verb", ",", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<RIGHT-COSET-REPRESENTATIVE ALGORITHM for \>\"", ",", "p"}], 
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"verb", ",", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<which corresponds to the index list: \>\"", ",", 
           RowBox[{"TranslatePerm", "[", 
            RowBox[{
             RowBox[{"InversePerm", "[", "p", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"Perm", ",", "len"}], "}"}]}], "]"}]}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"verb", ",", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<base: \>\"", ",", "base"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Loop", " ", "over", " ", "elements", " ", "of", " ", "base"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", 
         RowBox[{
          RowBox[{"i", "\[LessEqual]", 
           RowBox[{"Length", "[", "base", "]"}]}], "&&", 
          RowBox[{"n", "<", 
           RowBox[{"Length", "[", "free", "]"}]}]}], ",", 
         RowBox[{"++", "i"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"bi", "=", 
           RowBox[{"base", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<****** Analysing element i=\>\"", ",", "i", ",", 
              "\"\< of base: slot \>\"", ",", "bi", ",", "\"\< ******\>\""}], 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Delta", "=", 
           RowBox[{"SchreierOrbit", "[", 
            RowBox[{"bi", ",", 
             RowBox[{"StrongGenSet", "[", 
              RowBox[{"newbase", ",", "newGS"}], "]"}], ",", "len"}], "]"}]}],
           ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<Symmetry orbit Delta of slots: \>\"", ",", 
              RowBox[{"First", "[", "Delta", "]"}]}], "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<Free slots: \>\"", ",", "newfree"}], "]"}]}], "]"}],
           ";", "\[IndentingNewLine]", 
          RowBox[{"Delta1", "=", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"First", "[", "Delta", "]"}], ",", 
             RowBox[{"Alternatives", "@@", "newfree"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Free slots that can go to that slot: \>\"", ",", "Delta1"}],
              "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Delta1", "\[Equal]", 
             RowBox[{"{", "}"}]}], ",", 
            RowBox[{"Continue", "[", "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Tensor", " ", 
            RowBox[{"notation", ":", " ", 
             RowBox[{
             "perm", " ", "acts", " ", "on", " ", "slots", " ", "giving", " ",
               "indices"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"Deltap", "=", 
           RowBox[{"OnPoints", "[", 
            RowBox[{"Delta1", ",", "perm"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<At those slots we respectively find indices Deltap: \>\"", 
              ",", "Deltap"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"k", "=", 
           RowBox[{"MinB", "[", 
            RowBox[{"Deltap", ",", "base"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"pk", "=", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{"Deltap", ",", "k"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<The least index is \>\"", ",", "k", ",", 
              "\"\<, found at position pk: \>\"", ",", "pk", ",", 
              "\"\< of Deltap\>\""}], "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"pp", "=", 
           RowBox[{"Delta1", "[", 
            RowBox[{"[", "pk", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<That index is found in tensor at slot pp: \>\"", ",", 
              "pp"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"om", "=", 
           RowBox[{"TraceSchreier", "[", 
            RowBox[{"pp", ",", "Delta"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<We can move slot \>\"", ",", "pp", ",", "\"\< to slot \>\"",
               ",", "bi", ",", "\"\< using permutation om: \>\"", ",", "om", 
              ",", " ", "\"\< in S\>\""}], "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"perm", "=", 
           RowBox[{"PermProduct", "[", 
            RowBox[{"om", ",", "perm"}], "]"}]}], ";", "\[IndentingNewLine]", 
          
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<New indices list: \>\"", ",", 
              RowBox[{"TranslatePerm", "[", 
               RowBox[{
                RowBox[{"InversePerm", "[", "perm", "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"Perm", ",", "len"}], "}"}]}], "]"}]}], "]"}]}], 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "New", " ", "position", " ", "of", " ", "free", " ", "indices"}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"newfree", "=", 
           RowBox[{"OnPoints", "[", 
            RowBox[{"newfree", ",", 
             RowBox[{"InversePerm", "[", "om", "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Computing stabilizer in S of slot \>\"", ",", "bi"}], 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Ensure", " ", "bi", " ", "is", " ", "the", " ", "first", " ", 
            "point", " ", "of", " ", "the", " ", "base"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<SGS before change: \>\"", ",", 
              RowBox[{"StrongGenSet", "[", 
               RowBox[{"newbase", ",", "newGS"}], "]"}]}], "]"}]}], "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"newbase2", ",", "newGS2"}], "}"}], "=", 
           RowBox[{"List", "@@", 
            RowBox[{"BaseChange", "[", 
             RowBox[{
              RowBox[{"StrongGenSet", "[", 
               RowBox[{"newbase", ",", "newGS"}], "]"}], ",", 
              RowBox[{"{", "bi", "}"}], ",", "len"}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<SGS after change: \>\"", ",", 
              RowBox[{"StrongGenSet", "[", 
               RowBox[{"newbase2", ",", "newGS2"}], "]"}]}], "]"}]}], "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"newbase2", "=", 
           RowBox[{"Drop", "[", 
            RowBox[{"newbase2", ",", "1"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"newGS2", "=", 
           RowBox[{"Stabilizer", "[", 
            RowBox[{
             RowBox[{"{", "bi", "}"}], ",", "newGS2"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<SGS after stabilization: \>\"", ",", 
              RowBox[{"StrongGenSet", "[", 
               RowBox[{"newbase2", ",", "newGS2"}], "]"}]}], "]"}]}], "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Check", " ", "necessity", " ", "of", " ", "the", " ", "base", " ",
             "change"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"bcc", "&&", 
             RowBox[{"newbase2", "=!=", 
              RowBox[{"DeleteCases", "[", 
               RowBox[{"newbase", ",", "bi"}], "]"}]}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
              "\"\<Checking \>\"", ",", "newbase", ",", "\"\< vs. \>\"", ",", 
               " ", "newbase2", ",", "\"\< with point \>\"", ",", "bi"}], 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"Block", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"$RecursionLimit", "=", "Infinity"}], "}"}], ",", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"OrderOfGroup", "[", 
                   RowBox[{"StrongGenSet", "[", 
                    RowBox[{"newbase2", ",", "newGS2"}], "]"}], "]"}], "=!=", 
                  
                  RowBox[{"OrderOfGroup", "[", 
                   RowBox[{"StrongGenSet", "[", 
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"newbase", ",", "bi"}], "]"}], ",", 
                    RowBox[{"Stabilizer", "[", 
                    RowBox[{
                    RowBox[{"{", "bi", "}"}], ",", "newGS"}], "]"}]}], "]"}], 
                   "]"}]}], ",", 
                 RowBox[{
                 "Print", "[", 
                  "\"\<Unavoidable base change. Contact JMM.\>\"", "]"}]}], 
                "]"}]}], "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"newbase", "=", "newbase2"}], ";", 
          RowBox[{"newGS", "=", "newGS2"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<newbase after change: \>\"", ",", "newbase"}], 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"++", "n"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "We", " ", "return", " ", "the", " ", "canonical", " ", "permutation",
          " ", "and", " ", "the", " ", "new", " ", "SGS"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"perm", ",", 
         RowBox[{"StrongGenSet", "[", 
          RowBox[{"newbase", ",", "newGS"}], "]"}], ",", "newfree"}], 
        "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Default", " ", "definition"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"xAct`xPerm`RightCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"p_", "?", "PermQ"}], ",", "len_Integer", ",", 
     "SGS_StrongGenSet", ",", "options___"}], "]"}], ":=", 
   RowBox[{"xAct`xPerm`RightCosetRepresentative", "[", 
    RowBox[{"p", ",", "len", ",", "SGS", ",", 
     RowBox[{"Range", "[", "len", "]"}], ",", "options"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"xAct`xPerm`RightCosetRepresentative", ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "Infinity"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "xAct`xPerm`RightCosetRepresentative", "]"}], 
  ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["5.1.2. Simple examples", "Subsubsection"],

Cell["\<\
Renato's example with the symmetries of a Riemann tensor. Note that he uses \
base {1,3}: the computation is faster (just two iterations of the loop), but \
we get an ugly result\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reducedSGS", "=", 
  RowBox[{"SchreierSims", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}]}], ",", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}]}], "]"}], 
    ",", "4"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}]}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}]}], 
    "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGS", "=", 
  RowBox[{"SchreierSims", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}]}], ",", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}]}], "]"}], 
    ",", "4"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}]}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}]}], 
    "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["This permutation represents R[b,c,a,d]:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"perm", "=", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2", ",", "4"}], "}"}], "]"}]}], 
  ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xAct`xPerm`RightCosetRepresentative", "[", 
  RowBox[{"perm", ",", "4", ",", "reducedSGS", ",", 
   RowBox[{"xPermVerbose", "\[Rule]", "True"}]}], "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"RIGHT-COSET-REPRESENTATIVE ALGORITHM for \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2", ",", "4"}], "}"}], "]"}]}],
  SequenceForm["RIGHT-COSET-REPRESENTATIVE ALGORITHM for ", 
   xAct`xPerm`Perm[{3, 1, 2, 4}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"which corresponds to the index list: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}]}],
  SequenceForm["which corresponds to the index list: ", 
   xAct`xPerm`Perm[{2, 3, 1, 4}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"base: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}]}],
  SequenceForm["base: ", {1, 3}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"****** Analysing element i=\"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" of base: slot \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" ******\"\>"}],
  SequenceForm[
  "****** Analysing element i=", 1, " of base: slot ", 1, " ******"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Symmetry orbit Delta of slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}],
  SequenceForm["Symmetry orbit Delta of slots: ", {1, 2, 3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}],
  SequenceForm["Free slots: ", {1, 2, 3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots that can go to that slot: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}],
  SequenceForm["Free slots that can go to that slot: ", {1, 2, 3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"At those slots we respectively find indices Deltap: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}]}],
  SequenceForm[
  "At those slots we respectively find indices Deltap: ", {2, 3, 1, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The least index is \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\", found at position pk: \"\>", 
   "\[InvisibleSpace]", "3", "\[InvisibleSpace]", "\<\" of Deltap\"\>"}],
  SequenceForm[
  "The least index is ", 1, ", found at position pk: ", 3, " of Deltap"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"That index is found in tensor at slot pp: \"\>", 
   "\[InvisibleSpace]", "3"}],
  SequenceForm["That index is found in tensor at slot pp: ", 3],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"We can move slot \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\" to slot \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" using permutation om: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], 
   "\[InvisibleSpace]", "\<\" in S\"\>"}],
  SequenceForm[
  "We can move slot ", 3, " to slot ", 1, " using permutation om: ", 
   xAct`xPerm`Perm[{3, 4, 1, 2}], " in S"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"New indices list: \"\>", "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}]}],
  SequenceForm["New indices list: ", 
   xAct`xPerm`Perm[{1, 4, 2, 3}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Computing stabilizer in S of slot \"\>", "\[InvisibleSpace]", 
   "1"}],
  SequenceForm["Computing stabilizer in S of slot ", 1],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"newbase before change: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}]}],
  SequenceForm["newbase before change: ", {1, 3}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"newbase after change: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", "3", "}"}]}],
  SequenceForm["newbase after change: ", {3}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"****** Analysing element i=\"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\" of base: slot \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\" ******\"\>"}],
  SequenceForm[
  "****** Analysing element i=", 2, " of base: slot ", 3, " ******"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Symmetry orbit Delta of slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}]}],
  SequenceForm["Symmetry orbit Delta of slots: ", {3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}]}],
  SequenceForm["Free slots: ", {3, 4, 1, 2}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots that can go to that slot: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}]}],
  SequenceForm["Free slots that can go to that slot: ", {3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"At those slots we respectively find indices Deltap: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}]}],
  SequenceForm["At those slots we respectively find indices Deltap: ", {2, 3}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The least index is \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\", found at position pk: \"\>", 
   "\[InvisibleSpace]", "2", "\[InvisibleSpace]", "\<\" of Deltap\"\>"}],
  SequenceForm[
  "The least index is ", 3, ", found at position pk: ", 2, " of Deltap"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"That index is found in tensor at slot pp: \"\>", 
   "\[InvisibleSpace]", "4"}],
  SequenceForm["That index is found in tensor at slot pp: ", 4],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"We can move slot \"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\" to slot \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\" using permutation om: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}], 
   "\[InvisibleSpace]", "\<\" in S\"\>"}],
  SequenceForm[
  "We can move slot ", 4, " to slot ", 3, " using permutation om: ", -
   xAct`xPerm`Perm[{1, 2, 4, 3}], " in S"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"New indices list: \"\>", "\[InvisibleSpace]", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}]}]}],
  SequenceForm["New indices list: ", -xAct`xPerm`Perm[{1, 4, 3, 2}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Computing stabilizer in S of slot \"\>", "\[InvisibleSpace]", 
   "3"}],
  SequenceForm["Computing stabilizer in S of slot ", 3],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"newbase before change: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", "3", "}"}]}],
  SequenceForm["newbase before change: ", {3}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"newbase after change: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", "}"}]}],
  SequenceForm["newbase after change: ", {}],
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}]}], ",", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"GenSet", "[", "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", "1", ",", "2"}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "===", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}]}], ",", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"GenSet", "[", "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "1", ",", "2"}], "}"}]}], "}"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell["\<\
This result is equivalent to -R[a,d,c,b]. Note how the base {1,3} has placed \
the indices a, c in their canonical positions.\
\>", "Text"],

Cell["\<\
It is better if we fill in the gaps in the base. The computation is slower, \
but the result is nicer:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xAct`xPerm`RightCosetRepresentative", "[", 
  RowBox[{"perm", ",", "4", ",", "SGS", ",", 
   RowBox[{"xPermVerbose", "\[Rule]", "True"}]}], "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"RIGHT-COSET-REPRESENTATIVE ALGORITHM for \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2", ",", "4"}], "}"}], "]"}]}],
  SequenceForm["RIGHT-COSET-REPRESENTATIVE ALGORITHM for ", 
   xAct`xPerm`Perm[{3, 1, 2, 4}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"which corresponds to the index list: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}]}],
  SequenceForm["which corresponds to the index list: ", 
   xAct`xPerm`Perm[{2, 3, 1, 4}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"base: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}],
  SequenceForm["base: ", {1, 2, 3}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"****** Analysing element i=\"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" of base: slot \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" ******\"\>"}],
  SequenceForm[
  "****** Analysing element i=", 1, " of base: slot ", 1, " ******"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Symmetry orbit Delta of slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}],
  SequenceForm["Symmetry orbit Delta of slots: ", {1, 2, 3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}],
  SequenceForm["Free slots: ", {1, 2, 3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots that can go to that slot: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}],
  SequenceForm["Free slots that can go to that slot: ", {1, 2, 3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"At those slots we respectively find indices Deltap: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}]}],
  SequenceForm[
  "At those slots we respectively find indices Deltap: ", {2, 3, 1, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The least index is \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\", found at position pk: \"\>", 
   "\[InvisibleSpace]", "3", "\[InvisibleSpace]", "\<\" of Deltap\"\>"}],
  SequenceForm[
  "The least index is ", 1, ", found at position pk: ", 3, " of Deltap"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"That index is found in tensor at slot pp: \"\>", 
   "\[InvisibleSpace]", "3"}],
  SequenceForm["That index is found in tensor at slot pp: ", 3],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"We can move slot \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\" to slot \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" using permutation om: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], 
   "\[InvisibleSpace]", "\<\" in S\"\>"}],
  SequenceForm[
  "We can move slot ", 3, " to slot ", 1, " using permutation om: ", 
   xAct`xPerm`Perm[{3, 4, 1, 2}], " in S"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"New indices list: \"\>", "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}]}],
  SequenceForm["New indices list: ", 
   xAct`xPerm`Perm[{1, 4, 2, 3}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Computing stabilizer in S of slot \"\>", "\[InvisibleSpace]", 
   "1"}],
  SequenceForm["Computing stabilizer in S of slot ", 1],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"newbase before change: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}],
  SequenceForm["newbase before change: ", {1, 2, 3}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"newbase after change: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}]}],
  SequenceForm["newbase after change: ", {2, 3}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"****** Analysing element i=\"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\" of base: slot \"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\" ******\"\>"}],
  SequenceForm[
  "****** Analysing element i=", 2, " of base: slot ", 2, " ******"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Symmetry orbit Delta of slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", "2", "}"}]}],
  SequenceForm["Symmetry orbit Delta of slots: ", {2}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}]}],
  SequenceForm["Free slots: ", {3, 4, 1, 2}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots that can go to that slot: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", "2", "}"}]}],
  SequenceForm["Free slots that can go to that slot: ", {2}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"At those slots we respectively find indices Deltap: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", "4", "}"}]}],
  SequenceForm["At those slots we respectively find indices Deltap: ", {4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The least index is \"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\", found at position pk: \"\>", 
   "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "\<\" of Deltap\"\>"}],
  SequenceForm[
  "The least index is ", 4, ", found at position pk: ", 1, " of Deltap"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"That index is found in tensor at slot pp: \"\>", 
   "\[InvisibleSpace]", "2"}],
  SequenceForm["That index is found in tensor at slot pp: ", 2],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"We can move slot \"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\" to slot \"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\" using permutation om: \"\>", 
   "\[InvisibleSpace]", "ID", "\[InvisibleSpace]", "\<\" in S\"\>"}],
  SequenceForm[
  "We can move slot ", 2, " to slot ", 2, " using permutation om: ", 
   xAct`xPerm`ID, " in S"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"New indices list: \"\>", "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}]}],
  SequenceForm["New indices list: ", 
   xAct`xPerm`Perm[{1, 4, 2, 3}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Computing stabilizer in S of slot \"\>", "\[InvisibleSpace]", 
   "2"}],
  SequenceForm["Computing stabilizer in S of slot ", 2],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"newbase before change: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}]}],
  SequenceForm["newbase before change: ", {2, 3}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"newbase after change: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", "3", "}"}]}],
  SequenceForm["newbase after change: ", {3}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"****** Analysing element i=\"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\" of base: slot \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\" ******\"\>"}],
  SequenceForm[
  "****** Analysing element i=", 3, " of base: slot ", 3, " ******"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Symmetry orbit Delta of slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}]}],
  SequenceForm["Symmetry orbit Delta of slots: ", {3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}]}],
  SequenceForm["Free slots: ", {3, 4, 1, 2}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots that can go to that slot: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}]}],
  SequenceForm["Free slots that can go to that slot: ", {3, 4}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"At those slots we respectively find indices Deltap: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}]}],
  SequenceForm["At those slots we respectively find indices Deltap: ", {2, 3}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The least index is \"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\", found at position pk: \"\>", 
   "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "\<\" of Deltap\"\>"}],
  SequenceForm[
  "The least index is ", 2, ", found at position pk: ", 1, " of Deltap"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"That index is found in tensor at slot pp: \"\>", 
   "\[InvisibleSpace]", "3"}],
  SequenceForm["That index is found in tensor at slot pp: ", 3],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"We can move slot \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\" to slot \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\" using permutation om: \"\>", 
   "\[InvisibleSpace]", "ID", "\[InvisibleSpace]", "\<\" in S\"\>"}],
  SequenceForm[
  "We can move slot ", 3, " to slot ", 3, " using permutation om: ", 
   xAct`xPerm`ID, " in S"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"New indices list: \"\>", "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}]}],
  SequenceForm["New indices list: ", 
   xAct`xPerm`Perm[{1, 4, 2, 3}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Computing stabilizer in S of slot \"\>", "\[InvisibleSpace]", 
   "3"}],
  SequenceForm["Computing stabilizer in S of slot ", 3],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"newbase before change: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", "3", "}"}]}],
  SequenceForm["newbase before change: ", {3}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"newbase after change: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", "}"}]}],
  SequenceForm["newbase after change: ", {}],
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"GenSet", "[", "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "===", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], "]"}], ",", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"GenSet", "[", "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}]}], "}"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell["This is equivalent to R[a,d,b,c].", "Text"],

Cell["Another permutation in the same right coset (R[d,a,c,b]):", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"xAct`xPerm`RightCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"xAct`xPerm`RightCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4", ",", "3", ",", "1"}], "}"}], "]"}], ",", "4", 
     ",", "SGS"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1", ",", "4", ",", "3"}], "}"}]}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"RightCosetRepresentative", ",", "1", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["In other notations:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGS", "=", 
  RowBox[{"TranslatePerm", "[", 
   RowBox[{"SGS", ",", "xAct`xPerm`Cycles"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], "]"}]}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "2"}], "}"}]}], "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"4", ",", "3"}], "}"}], "]"}]}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"xAct`xPerm`RightCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"xAct`xPerm`RightCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"TranslatePerm", "[", 
      RowBox[{"perm", ",", "xAct`xPerm`Cycles"}], "]"}], ",", "4", ",", 
     "SGS"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"xAct`xPerm`Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}]}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"RightCosetRepresentative", ",", "2", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGS", "=", 
  RowBox[{"TranslatePerm", "[", 
   RowBox[{"SGS", ",", "Rules"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Rules", "[", 
       RowBox[{
        RowBox[{"2", "\[Rule]", "1"}], ",", 
        RowBox[{"1", "\[Rule]", "2"}]}], "]"}]}], ",", 
     RowBox[{"Rules", "[", 
      RowBox[{
       RowBox[{"3", "\[Rule]", "1"}], ",", 
       RowBox[{"1", "\[Rule]", "3"}], ",", 
       RowBox[{"4", "\[Rule]", "2"}], ",", 
       RowBox[{"2", "\[Rule]", "4"}]}], "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Rules", "[", 
       RowBox[{
        RowBox[{"4", "\[Rule]", "3"}], ",", 
        RowBox[{"3", "\[Rule]", "4"}]}], "]"}]}]}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"xAct`xPerm`RightCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"xAct`xPerm`RightCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"TranslatePerm", "[", 
      RowBox[{"perm", ",", "Rules"}], "]"}], ",", "4", ",", "SGS"}], "]"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Rules", "[", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "4"}], ",", 
       RowBox[{"3", "\[Rule]", "2"}], ",", 
       RowBox[{"4", "\[Rule]", "3"}]}], "]"}], ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}]}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"RightCosetRepresentative", ",", "3", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGS", "=", 
  RowBox[{"TranslatePerm", "[", 
   RowBox[{"SGS", ",", 
    RowBox[{"{", 
     RowBox[{"Images", ",", "4"}], "}"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}]}], ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}]}], 
    "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"perm", "=", 
  RowBox[{"TranslatePerm", "[", 
   RowBox[{"perm", ",", 
    RowBox[{"{", 
     RowBox[{"Images", ",", "4"}], "}"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"Images", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"xAct`xPerm`RightCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"xAct`xPerm`RightCosetRepresentative", "[", 
    RowBox[{"perm", ",", "4", ",", "SGS"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}]}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"RightCosetRepresentative", ",", "4", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Let us analyze the situation more closely. This is the right coset S.g, in no \
particular order:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"coset", "=", 
  RowBox[{"PermProduct", "[", 
   RowBox[{
    RowBox[{"Dimino", "[", 
     RowBox[{"SGS", "[", 
      RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", "perm"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"Coset", "[", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "1", ",", "4"}], "}"}], "]"}]}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}]}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "1", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}]}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "4", ",", "1"}], "}"}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell["\<\
Using the base {1,3} we see that the least permutation is -Perm[{1,4,3,2}]:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermSort", "[", 
  RowBox[{"coset", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Coset", "[", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}]}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "1", ",", "4"}], "}"}], "]"}]}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}]}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "1", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}]}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell["\<\
But using the base {1,2,3,4} we see that the least permutation is \
Perm[{1,4,2,3}]:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermSort", "[", "coset", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Coset", "[", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "1", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "1", ",", "4"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}]}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell["\<\
We can sort the left coset of inverses and take the inverse again:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"coset", "=", 
  RowBox[{"PermProduct", "[", 
   RowBox[{
    RowBox[{"InversePerm", "[", "perm", "]"}], ",", 
    RowBox[{"Dimino", "[", 
     RowBox[{"SGS", "[", 
      RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"Coset", "[", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "1", ",", "4"}], "}"}], "]"}]}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}]}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}]}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "1", ",", "3"}], "}"}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell["\<\
Using the base {1,3} we see that the least permutation is -Perm[{1,4,3,2}], \
with same inverse\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InversePerm", "/@", 
  RowBox[{"PermSort", "[", 
   RowBox[{"coset", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"Coset", "[", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}]}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "1", ",", "4"}], "}"}], "]"}]}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "1", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}]}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}]}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell["\<\
But using the base {1,2,3,4} we see that the least permutation is \
Perm[{1,3,4,2}], with inverse Perm[{1,4,2,3}]\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InversePerm", "/@", 
  RowBox[{"PermSort", "[", "coset", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"Coset", "[", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "1", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "1", ",", "4"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}]}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell["\<\
In this case we get the same results using canonicalization of left-cosets \
and right-cosets. This is not necessarily the case. The problem is that, \
given a base, the ordering of a set of permutations is not kept if we sort \
the set of inverses of permutations. For example, take these two permutations \
which are inverses of each other:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1"}], "}"}], "]"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1"}], "}"}], "]"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PermSort", "[", "%", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2"}], "}"}], "]"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InversePerm", "/@", 
  RowBox[{"PermSort", "[", 
   RowBox[{"InversePerm", "/@", "%%"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1"}], "}"}], "]"}]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
In our problem the two alternatives have very different meanings: Sorting \
left-cosets inv(g).S would mean that we look for images of a base of indices; \
sorting right-cosets S.g would mean we look for images of a set of slots. The \
second option is more natural because we have a strong generating set for S, \
which gives a natural base of slots. There is no natural base of indices \
apart from the trivial one {1, 2, 3, ...}.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SchreierSims", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"Symmetric", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
    "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
   ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"4", ",", "5"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"5", ",", "6"}], "}"}], "]"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", "2", ",", "6", ",", "5", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"xAct`xPerm`Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"xAct`xPerm`Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"xAct`xPerm`Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"xAct`xPerm`Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"4", ",", "5"}], "}"}], "]"}], ",", 
     RowBox[{"xAct`xPerm`Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"5", ",", "6"}], "}"}], "]"}]}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", "2", ",", "6", ",", "5", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"4", ",", "5"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"5", ",", "6"}], "}"}], "]"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SchreierSims"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"SchreierSims[initbase, GS, deg] generates a strong generating \
set for the group generated by GS (permutations of degree deg), using list \
initbase as the first points for the base. The final SGS is not reduced in \
general.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567978016-5455693"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SchreierSims", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", "2", ",", "6", ",", "5", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"xAct`xPerm`Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"xAct`xPerm`Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"xAct`xPerm`Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"xAct`xPerm`Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"4", ",", "5"}], "}"}], "]"}], ",", 
     RowBox[{"xAct`xPerm`Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"5", ",", "6"}], "}"}], "]"}]}], "]"}], ",", "6"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", "2", ",", "6", ",", "5", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"4", ",", "5"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"5", ",", "6"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "5"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "5"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "5"}], "}"}], "]"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrderOfGroup", "[", "%", "]"}]], "Input"],

Cell[BoxData["720"], "Output"]
}, Open  ]],

Cell["\<\
Recall that the list {2,5} gives the initial slots of the free indices, and \
not the names of the indices (which would be more natural).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xAct`xPerm`RightCosetRepresentative", "[", 
  RowBox[{
   RowBox[{"xAct`xPerm`Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "6", ",", "3", ",", "5"}], "}"}], "]"}], ",",
    "6", ",", 
   RowBox[{"Symmetric", "[", 
    RowBox[{"{", 
     RowBox[{"6", ",", "5", ",", "4", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5"}], "}"}], ",", 
   RowBox[{"xPermVerbose", "\[Rule]", "True"}]}], "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"RIGHT-COSET-REPRESENTATIVE ALGORITHM for \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "6", ",", "3", ",", "5"}], "}"}], "]"}]}],
  SequenceForm["RIGHT-COSET-REPRESENTATIVE ALGORITHM for ", 
   xAct`xPerm`Cycles[{1, 4, 6, 3, 5}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"which corresponds to the index list: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "5", ",", "6", ",", "1", ",", "3"}], "}"}], 
    "]"}]}],
  SequenceForm["which corresponds to the index list: ", 
   xAct`xPerm`Perm[{4, 2, 5, 6, 1, 3}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"base: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}]}],
  SequenceForm["base: ", {1, 3, 4, 5, 6}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"****** Analysing element i=\"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" of base: slot \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" ******\"\>"}],
  SequenceForm[
  "****** Analysing element i=", 1, " of base: slot ", 1, " ******"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Symmetry orbit Delta of slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}]}],
  SequenceForm["Symmetry orbit Delta of slots: ", {1, 3, 4, 5, 6}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5"}], "}"}]}],
  SequenceForm["Free slots: ", {2, 5}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots that can go to that slot: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", "5", "}"}]}],
  SequenceForm["Free slots that can go to that slot: ", {5}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"At those slots we respectively find indices Deltap: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", "1", "}"}]}],
  SequenceForm["At those slots we respectively find indices Deltap: ", {1}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The least index is \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\", found at position pk: \"\>", 
   "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "\<\" of Deltap\"\>"}],
  SequenceForm[
  "The least index is ", 1, ", found at position pk: ", 1, " of Deltap"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"That index is found in tensor at slot pp: \"\>", 
   "\[InvisibleSpace]", "5"}],
  SequenceForm["That index is found in tensor at slot pp: ", 5],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"We can move slot \"\>", "\[InvisibleSpace]", "5", 
   "\[InvisibleSpace]", "\<\" to slot \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\" using permutation om: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "5", ",", "4", ",", "3"}], "}"}], "]"}], 
   "\[InvisibleSpace]", "\<\" in S\"\>"}],
  SequenceForm[
  "We can move slot ", 5, " to slot ", 1, " using permutation om: ", 
   xAct`xPerm`Cycles[{1, 5, 4, 3}], " in S"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"New indices list: \"\>", "\[InvisibleSpace]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "4", ",", "5", ",", "6", ",", "3"}], "}"}], 
    "]"}]}],
  SequenceForm["New indices list: ", 
   xAct`xPerm`Perm[{1, 2, 4, 5, 6, 3}]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Computing stabilizer in S of slot \"\>", "\[InvisibleSpace]", 
   "1"}],
  SequenceForm["Computing stabilizer in S of slot ", 1],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"newbase before change: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}]}],
  SequenceForm["newbase before change: ", {1, 3, 4, 5, 6}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"newbase after change: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "5", ",", "6"}], "}"}]}],
  SequenceForm["newbase after change: ", {3, 4, 5, 6}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"****** Analysing element i=\"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\" of base: slot \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\" ******\"\>"}],
  SequenceForm[
  "****** Analysing element i=", 2, " of base: slot ", 3, " ******"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Symmetry orbit Delta of slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "5", ",", "6"}], "}"}]}],
  SequenceForm["Symmetry orbit Delta of slots: ", {3, 4, 5, 6}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}]}],
  SequenceForm["Free slots: ", {2, 1}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots that can go to that slot: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", "}"}]}],
  SequenceForm["Free slots that can go to that slot: ", {}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"****** Analysing element i=\"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\" of base: slot \"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\" ******\"\>"}],
  SequenceForm[
  "****** Analysing element i=", 3, " of base: slot ", 4, " ******"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Symmetry orbit Delta of slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "5", ",", "6"}], "}"}]}],
  SequenceForm["Symmetry orbit Delta of slots: ", {3, 4, 5, 6}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}]}],
  SequenceForm["Free slots: ", {2, 1}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots that can go to that slot: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", "}"}]}],
  SequenceForm["Free slots that can go to that slot: ", {}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"****** Analysing element i=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\" of base: slot \"\>", "\[InvisibleSpace]", "5", 
   "\[InvisibleSpace]", "\<\" ******\"\>"}],
  SequenceForm[
  "****** Analysing element i=", 4, " of base: slot ", 5, " ******"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Symmetry orbit Delta of slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "5", ",", "6"}], "}"}]}],
  SequenceForm["Symmetry orbit Delta of slots: ", {3, 4, 5, 6}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}]}],
  SequenceForm["Free slots: ", {2, 1}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots that can go to that slot: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", "}"}]}],
  SequenceForm["Free slots that can go to that slot: ", {}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"****** Analysing element i=\"\>", "\[InvisibleSpace]", "5", 
   "\[InvisibleSpace]", "\<\" of base: slot \"\>", "\[InvisibleSpace]", "6", 
   "\[InvisibleSpace]", "\<\" ******\"\>"}],
  SequenceForm[
  "****** Analysing element i=", 5, " of base: slot ", 6, " ******"],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Symmetry orbit Delta of slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "5", ",", "6"}], "}"}]}],
  SequenceForm["Symmetry orbit Delta of slots: ", {3, 4, 5, 6}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}]}],
  SequenceForm["Free slots: ", {2, 1}],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free slots that can go to that slot: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", "}"}]}],
  SequenceForm["Free slots that can go to that slot: ", {}],
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "5", ",", "6"}], "}"}], "]"}], ",", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4"}], "}"}], "]"}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "5"}], "}"}], "]"}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "6"}], "}"}], "]"}]}], "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "===", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"xAct`xPerm`Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "5", ",", "6"}], "}"}], "]"}], ",", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "5", ",", "6"}], "}"}], ",", 
      RowBox[{"GenSet", "[", 
       RowBox[{
        RowBox[{"xAct`xPerm`Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"3", ",", "4"}], "}"}], "]"}], ",", 
        RowBox[{"xAct`xPerm`Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"4", ",", "5"}], "}"}], "]"}], ",", 
        RowBox[{"xAct`xPerm`Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"5", ",", "6"}], "}"}], "]"}]}], "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}]}], "}"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
5.1.3. Nontrivial example. This takes several minutes to evaluate\
\>", "Subsubsection"],

Cell["From the permutations", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"a", "=", 
  RowBox[{"TranslatePerm", "[", 
   RowBox[{
    RowBox[{"xAct`xPerm`Cycles", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "8", ",", "9"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "11", ",", "15"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "10", ",", "12"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "14", ",", "19"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"5", ",", "16", ",", "17"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"6", ",", "21", ",", "20"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"7", ",", "13", ",", "18"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"Images", ",", "21"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"b", "=", 
  RowBox[{"TranslatePerm", "[", 
   RowBox[{
    RowBox[{"xAct`xPerm`Cycles", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"9", ",", "18", ",", "20"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"12", ",", "19", ",", "17"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"Images", ",", "21"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"c", "=", 
  RowBox[{"TranslatePerm", "[", 
   RowBox[{
    RowBox[{"xAct`xPerm`Cycles", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"10", ",", "21", ",", "11"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"13", ",", "16", ",", "14"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"Images", ",", "21"}], "}"}]}], "]"}]}]}], "Input"],

Cell[BoxData[
 RowBox[{"Images", "[", 
  RowBox[{"{", 
   RowBox[{
   "8", ",", "11", ",", "10", ",", "14", ",", "16", ",", "21", ",", "13", ",",
     "9", ",", "1", ",", "12", ",", "15", ",", "3", ",", "18", ",", "19", ",",
     "2", ",", "17", ",", "5", ",", "7", ",", "4", ",", "6", ",", "20"}], 
   "}"}], "]"}]], "Output"],

Cell[BoxData[
 RowBox[{"Images", "[", 
  RowBox[{"{", 
   RowBox[{
   "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
    ",", "18", ",", "10", ",", "11", ",", "19", ",", "13", ",", "14", ",", 
    "15", ",", "16", ",", "12", ",", "20", ",", "17", ",", "9", ",", "21"}], 
   "}"}], "]"}]], "Output"],

Cell[BoxData[
 RowBox[{"Images", "[", 
  RowBox[{"{", 
   RowBox[{
   "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
    ",", "9", ",", "21", ",", "10", ",", "12", ",", "16", ",", "13", ",", 
    "15", ",", "14", ",", "17", ",", "18", ",", "19", ",", "20", ",", "11"}], 
   "}"}], "]"}]], "Output"]
}, Open  ]],

Cell["we construct the group", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Length", "[", 
   RowBox[{"group", "=", 
    RowBox[{"Dimino", "[", 
     RowBox[{"GenSet", "[", 
      RowBox[{"a", ",", "b", ",", "c"}], "]"}], "]"}]}], "]"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "30.64715400000000045110937207937240600586`7.506990063929052", ",", 
   "27783"}], "}"}]], "Output"]
}, Open  ]],

Cell["and its subgroup", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"subgroup", "=", 
   RowBox[{"Dimino", "[", 
    RowBox[{"GenSet", "[", 
     RowBox[{"a", ",", "b"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "subgroup", "]"}]}], "Input"],

Cell[BoxData["81"], "Output"]
}, Open  ]],

Cell["Therefore we have this number of cosets", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ncosets", "=", 
  RowBox[{"27783", "/", "81"}]}]], "Input"],

Cell[BoxData["343"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGS", "=", 
  RowBox[{"SchreierSims", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"GenSet", "[", 
     RowBox[{"a", ",", "b"}], "]"}], ",", "21"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"9", ",", "8", ",", "1"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{
       "8", ",", "11", ",", "10", ",", "14", ",", "16", ",", "21", ",", "13", 
        ",", "9", ",", "1", ",", "12", ",", "15", ",", "3", ",", "18", ",", 
        "19", ",", "2", ",", "17", ",", "5", ",", "7", ",", "4", ",", "6", 
        ",", "20"}], "}"}], "]"}], ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
        "8", ",", "18", ",", "10", ",", "11", ",", "19", ",", "13", ",", "14",
         ",", "15", ",", "16", ",", "12", ",", "20", ",", "17", ",", "9", ",",
         "21"}], "}"}], "]"}], ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
        "13", ",", "9", ",", "14", ",", "11", ",", "12", ",", "21", ",", "16",
         ",", "15", ",", "10", ",", "17", ",", "18", ",", "19", ",", "20", 
        ",", "8"}], "}"}], "]"}], ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{
       "7", ",", "2", ",", "4", ",", "5", ",", "3", ",", "1", ",", "6", ",", 
        "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", 
        ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",",
         "21"}], "}"}], "]"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["Representatives (perform BaseChange checks):", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetOptions", "[", 
   RowBox[{"xAct`xPerm`RightCosetRepresentative", ",", 
    RowBox[{"BaseChangeCheck", "\[Rule]", "True"}]}], "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"result", "=", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"xAct`xPerm`RightCosetRepresentative", "[", 
        RowBox[{"#", ",", "21", ",", "SGS"}], "]"}], "]"}], "&"}], "/@", 
     "group"}]}], ";"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "119.93098500000000683485268382355570793152`8.099531313860268", ",", 
   "Null"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"reps", "=", 
   RowBox[{"Union", "[", "result", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Length", "[", "reps", "]"}], "===", "ncosets"}]}], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell["We construct the right cosets of those representatives:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"cosetsR", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"PermProduct", "[", 
       RowBox[{"subgroup", ",", 
        RowBox[{"reps", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "ncosets"}], "}"}]}], "]"}]}], ";"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4.90495400000000003615241439547389745712`6.71123485208227", ",", "Null"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["We check that those cosets form the whole group:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Group", "@@", 
   RowBox[{"Sort", "[", 
    RowBox[{"Apply", "[", 
     RowBox[{"Sequence", ",", "cosetsR", ",", "1"}], "]"}], "]"}]}], "===", 
  RowBox[{"Sort", "[", "group", "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell["\<\
We also check that we have correctly found all members of all cosets:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"And", "@@", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Sort", "[", 
       RowBox[{"group", "[", 
        RowBox[{"[", 
         RowBox[{"Flatten", "@", 
          RowBox[{"Position", "[", 
           RowBox[{"result", ",", 
            RowBox[{"reps", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], "]"}], "]"}], "]"}], "===", 
      RowBox[{"Group", "@@", 
       RowBox[{"Sort", "[", 
        RowBox[{"cosetsR", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "]"}]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "ncosets"}], "}"}]}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "14.07656599999999968986230669543147087097`7.169096634197456", ",", 
   "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Now we check that the representative of each coset is correctly chosen:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"And", "@@", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "@", 
       RowBox[{"PermSort", "[", 
        RowBox[{
         RowBox[{"cosetsR", "[", 
          RowBox[{"[", "i", "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"9", ",", "8", ",", "1"}], "}"}]}], "]"}]}], "===", 
      RowBox[{"reps", "[", 
       RowBox[{"[", "i", "]"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "ncosets"}], "}"}]}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "18.98217500000000157456270244438201189041`7.298945886195973", ",", 
   "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Note how different choices give different ways to sort the permutations:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reps", "[", 
  RowBox[{"[", "10", "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Images", "[", 
  RowBox[{"{", 
   RowBox[{
   "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "10",
     ",", "9", ",", "14", ",", "13", ",", "12", ",", "16", ",", "8", ",", 
    "15", ",", "11", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21"}], 
   "}"}], "]"}]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"coset", "=", 
   RowBox[{"List", "@@", 
    RowBox[{"cosetsR", "[", 
     RowBox[{"[", "10", "]"}], "]"}]}]}], ";"}]], "Input"],

Cell["\<\
Note in particular that sorting inverses does not give the same \"smallest \
permutation\" than sorting the original set:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"PermSort", "[", "coset", "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"Range", "[", "5", "]"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
      "10", ",", "9", ",", "14", ",", "13", ",", "12", ",", "16", ",", "8", 
      ",", "15", ",", "11", ",", "17", ",", "18", ",", "19", ",", "20", ",", 
      "21"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
      "10", ",", "18", ",", "14", ",", "13", ",", "19", ",", "16", ",", "8", 
      ",", "15", ",", "11", ",", "12", ",", "20", ",", "17", ",", "9", ",", 
      "21"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
      "10", ",", "20", ",", "14", ",", "13", ",", "17", ",", "16", ",", "8", 
      ",", "15", ",", "11", ",", "19", ",", "9", ",", "12", ",", "18", ",", 
      "21"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
      "16", ",", "9", ",", "8", ",", "13", ",", "12", ",", "21", ",", "11", 
      ",", "15", ",", "14", ",", "17", ",", "18", ",", "19", ",", "20", ",", 
      "10"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
      "16", ",", "18", ",", "8", ",", "13", ",", "19", ",", "21", ",", "11", 
      ",", "15", ",", "14", ",", "12", ",", "20", ",", "17", ",", "9", ",", 
      "10"}], "}"}], "]"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"PermSort", "[", 
   RowBox[{"coset", ",", 
    RowBox[{"{", 
     RowBox[{"9", ",", "8", ",", "1"}], "}"}]}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"Range", "[", "5", "]"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
      "10", ",", "9", ",", "14", ",", "13", ",", "12", ",", "16", ",", "8", 
      ",", "15", ",", "11", ",", "17", ",", "18", ",", "19", ",", "20", ",", 
      "21"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "6", ",", "2", ",", "5", ",", "3", ",", "4", ",", "7", ",", "1", ",", 
      "10", ",", "9", ",", "14", ",", "13", ",", "12", ",", "16", ",", "8", 
      ",", "15", ",", "11", ",", "17", ",", "18", ",", "19", ",", "20", ",", 
      "21"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "7", ",", "2", ",", "4", ",", "5", ",", "3", ",", "1", ",", "6", ",", 
      "10", ",", "9", ",", "14", ",", "13", ",", "12", ",", "16", ",", "8", 
      ",", "15", ",", "11", ",", "17", ",", "18", ",", "19", ",", "20", ",", 
      "21"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
      "16", ",", "9", ",", "8", ",", "13", ",", "12", ",", "21", ",", "11", 
      ",", "15", ",", "14", ",", "17", ",", "18", ",", "19", ",", "20", ",", 
      "10"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "6", ",", "2", ",", "5", ",", "3", ",", "4", ",", "7", ",", "1", ",", 
      "16", ",", "9", ",", "8", ",", "13", ",", "12", ",", "21", ",", "11", 
      ",", "15", ",", "14", ",", "17", ",", "18", ",", "19", ",", "20", ",", 
      "10"}], "}"}], "]"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InversePerm", "/@", 
  RowBox[{
   RowBox[{"PermSort", "[", 
    RowBox[{
     RowBox[{"InversePerm", "/@", "coset"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "8", ",", "1"}], "}"}]}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"Range", "[", "5", "]"}], "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
      "16", ",", "9", ",", "8", ",", "13", ",", "12", ",", "21", ",", "11", 
      ",", "15", ",", "14", ",", "17", ",", "18", ",", "19", ",", "20", ",", 
      "10"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "7", ",", "2", ",", "4", ",", "5", ",", "3", ",", "1", ",", "6", ",", 
      "16", ",", "9", ",", "8", ",", "13", ",", "12", ",", "21", ",", "11", 
      ",", "15", ",", "14", ",", "17", ",", "18", ",", "19", ",", "20", ",", 
      "10"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "6", ",", "2", ",", "5", ",", "3", ",", "4", ",", "7", ",", "1", ",", 
      "16", ",", "9", ",", "8", ",", "13", ",", "12", ",", "21", ",", "11", 
      ",", "15", ",", "14", ",", "17", ",", "18", ",", "19", ",", "20", ",", 
      "10"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
      "10", ",", "9", ",", "14", ",", "13", ",", "12", ",", "16", ",", "8", 
      ",", "15", ",", "11", ",", "17", ",", "18", ",", "19", ",", "20", ",", 
      "21"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "7", ",", "2", ",", "4", ",", "5", ",", "3", ",", "1", ",", "6", ",", 
      "10", ",", "9", ",", "14", ",", "13", ",", "12", ",", "16", ",", "8", 
      ",", "15", ",", "11", ",", "17", ",", "18", ",", "19", ",", "20", ",", 
      "21"}], "}"}], "]"}]}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["5.1.4. Example: S4 in S5", "Subsubsection"],

Cell["We construct the symmetric group of 5-perms:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"s5", "=", 
   RowBox[{"Dimino", "[", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], 
      ",", 
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"5", ",", "1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}],
      "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "s5", "]"}]}], "Input"],

Cell[BoxData["120"], "Output"]
}, Open  ]],

Cell["It is not sorted, according to PermSort:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"PermSort", "[", "s5", "]"}], "===", "s5"}]], "Input"],

Cell[BoxData["False"], "Output"]
}, Open  ]],

Cell["A subgroup of permutations is s4:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"s4", "=", 
  RowBox[{"Group", "@@", 
   RowBox[{"Stabilizer", "[", 
    RowBox[{
     RowBox[{"{", "5", "}"}], ",", 
     RowBox[{"GenSet", "@@", "s5"}]}], "]"}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{"Group", "[", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "4", ",", "1", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "4", ",", "1", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "3", ",", "1", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "3", ",", "1", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "1", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "4", ",", "3", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "4", ",", "2", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "4", ",", "2", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "2", ",", "3", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "1", ",", "2", ",", "3", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "3", ",", "2", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "1", ",", "3", ",", "2", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "1", ",", "3", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "1", ",", "3", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "1", ",", "2", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "1", ",", "2", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "2", ",", "1", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "2", ",", "1", ",", "5"}], "}"}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell["described by", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGSs4", "=", 
  RowBox[{"SchreierSims", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], 
      ",", 
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"4", ",", "1", ",", "2", ",", "3", ",", "5"}], "}"}], "]"}]}],
      "]"}], ",", "5"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], 
     ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"4", ",", "1", ",", "2", ",", "3", ",", "5"}], "}"}], "]"}], 
     ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4", ",", "2", ",", "3", ",", "5"}], "}"}], "]"}], 
     ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}], 
     ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "5"}], "}"}], "]"}]}], 
    "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["We have 5 coset representatives:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"First", "[", 
      RowBox[{"xAct`xPerm`RightCosetRepresentative", "[", 
       RowBox[{"#", ",", "5", ",", "SGSs4"}], "]"}], "]"}], "&"}], "/@", 
    RowBox[{"List", "@@", "s5"}]}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reps", "=", 
  RowBox[{"Union", "[", "result", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "5", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "4", ",", "5", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "4", ",", "5", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "4", ",", "5", ",", "1"}], "}"}], "]"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\<\
The representatives coincide with the smallest permutations of the right \
cosets:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"coset1", "=", 
  RowBox[{"PermSort", "[", 
   RowBox[{"PermProduct", "[", 
    RowBox[{"s4", ",", 
     RowBox[{"reps", "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"Group", "[", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "4", ",", "2", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "2", ",", "3", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "3", ",", "2", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "4", ",", "3", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "4", ",", "1", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "1", ",", "3", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "3", ",", "1", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "4", ",", "2", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "1", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "4", ",", "1", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "1", ",", "2", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "2", ",", "1", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "1", ",", "2", ",", "3", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "1", ",", "3", ",", "2", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "1", ",", "3", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "3", ",", "1", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "1", ",", "2", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "2", ",", "1", ",", "5"}], "}"}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"coset1", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
  RowBox[{"reps", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"coset2", "=", 
  RowBox[{"PermSort", "[", 
   RowBox[{"PermProduct", "[", 
    RowBox[{"s4", ",", 
     RowBox[{"reps", "[", 
      RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"Coset", "[", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "5", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "5", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "5", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "5", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "5", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "5", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "3", ",", "5", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "5", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1", ",", "5", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "5", ",", "1", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "5", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "5", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2", ",", "5", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "5", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "1", ",", "5", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "5", ",", "1", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "5", ",", "1", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "5", ",", "2", ",", "1", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "2", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "3", ",", "1", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "3", ",", "2", ",", "1", ",", "4"}], "}"}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"coset2", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
  RowBox[{"reps", "[", 
   RowBox[{"[", "2", "]"}], "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"coset3", "=", 
  RowBox[{"PermSort", "[", 
   RowBox[{"PermProduct", "[", 
    RowBox[{"s4", ",", 
     RowBox[{"reps", "[", 
      RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"Coset", "[", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "4", ",", "5", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "5", ",", "4", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "2", ",", "5", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "5", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "5", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "5", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "4", ",", "5", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "5", ",", "4", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "1", ",", "5", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "5", ",", "1", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "5", ",", "1", ",", "4", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "5", ",", "4", ",", "1", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "1", ",", "2", ",", "5", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "1", ",", "5", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "1", ",", "5", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "5", ",", "1", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "2", ",", "1", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "1", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "2", ",", "1", ",", "4", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "2", ",", "4", ",", "1", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "4", ",", "2", ",", "1", ",", "3"}], "}"}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"coset3", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
  RowBox[{"reps", "[", 
   RowBox[{"[", "3", "]"}], "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"coset4", "=", 
  RowBox[{"PermSort", "[", 
   RowBox[{"PermProduct", "[", 
    RowBox[{"s4", ",", 
     RowBox[{"reps", "[", 
      RowBox[{"[", "4", "]"}], "]"}]}], "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"Coset", "[", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "4", ",", "5", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "5", ",", "4", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "3", ",", "5", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "5", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "5", ",", "3", ",", "4", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "5", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "5", ",", "4", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "1", ",", "5", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "5", ",", "1", ",", "4", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "5", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "1", ",", "3", ",", "5", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "1", ",", "5", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "1", ",", "5", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "5", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "1", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "3", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "1", ",", "3", ",", "4", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "1", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "3", ",", "1", ",", "4", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "4", ",", "1", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "4", ",", "3", ",", "1", ",", "2"}], "}"}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"coset4", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
  RowBox[{"reps", "[", 
   RowBox[{"[", "4", "]"}], "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"coset5", "=", 
  RowBox[{"PermSort", "[", 
   RowBox[{"PermProduct", "[", 
    RowBox[{"s4", ",", 
     RowBox[{"reps", "[", 
      RowBox[{"[", "5", "]"}], "]"}]}], "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"Coset", "[", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "4", ",", "5", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "5", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "3", ",", "5", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "5", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "5", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "5", ",", "4", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "4", ",", "5", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "5", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "2", ",", "5", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "5", ",", "2", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "5", ",", "2", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "5", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "3", ",", "5", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "5", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "2", ",", "5", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "5", ",", "2", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "2", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "3", ",", "2", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "2", ",", "4", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "3", ",", "2", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "3", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "4", ",", "2", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "4", ",", "3", ",", "2", ",", "1"}], "}"}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"coset5", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
  RowBox[{"reps", "[", 
   RowBox[{"[", "5", "]"}], "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Group", "@@", 
   RowBox[{"Union", "[", 
    RowBox[{
     RowBox[{"Coset", "@@", "coset1"}], ",", "coset2", ",", "coset3", ",", 
     "coset4", ",", "coset5"}], "]"}]}], "===", 
  RowBox[{"Sort", "[", "s5", "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["5.1.5. Example: S3 in S5", "Subsubsection"],

Cell["We construct the symmetric group of 5-perms:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"s5", "=", 
   RowBox[{"Dimino", "[", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], 
      ",", 
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"5", ",", "1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}],
      "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "s5", "]"}]}], "Input"],

Cell[BoxData["120"], "Output"]
}, Open  ]],

Cell["It is not sorted, according to PermSort:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"PermSort", "[", "s5", "]"}], "===", "s5"}]], "Input"],

Cell[BoxData["False"], "Output"]
}, Open  ]],

Cell["A subgroup of permutations is s3:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"s3", "=", 
  RowBox[{"Group", "@@", 
   RowBox[{"Stabilizer", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}], ",", 
     RowBox[{"GenSet", "@@", "s5"}]}], "]"}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{"Group", "[", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "1", ",", "4", ",", "5"}], "}"}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]],

Cell["described by", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGSs3", "=", 
  RowBox[{"SchreierSims", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], 
      ",", 
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "1", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}]}],
      "]"}], ",", "5"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], 
     ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "1", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}], 
     ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}]}], 
    "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["We have 20 coset representatives:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"First", "[", 
      RowBox[{"xAct`xPerm`RightCosetRepresentative", "[", 
       RowBox[{"#", ",", "5", ",", "SGSs3"}], "]"}], "]"}], "&"}], "/@", 
    RowBox[{"List", "@@", "s5"}]}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reps", "=", 
  RowBox[{"Union", "[", "result", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "5", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "4", ",", "5", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "5", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "5", ",", "4", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "4", ",", "2", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "4", ",", "5", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "5", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "5", ",", "4", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "5", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "5", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "4", ",", "1", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "4", ",", "5", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "5", ",", "1", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "5", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "5", ",", "1", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "5", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "5", ",", "2", ",", "1"}], "}"}], "]"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"cosets", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"PermSort", "[", 
       RowBox[{"PermProduct", "[", 
        RowBox[{"s3", ",", 
         RowBox[{"reps", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "20"}], "}"}]}], "]"}]}], ")"}], "//", 
  "ColumnForm"}]], "Input"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{"Group", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "1", ",", "4", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "1", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1", ",", "4", ",", "5"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "5", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "2", ",", "5", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1", ",", "3", ",", "5", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "1", ",", "5", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "1", ",", "2", ",", "5", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1", ",", "5", ",", "4"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "4", ",", "2", ",", "3", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1", ",", "4", ",", "3", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "1", ",", "3", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "1", ",", "2", ",", "3", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "2", ",", "1", ",", "3", ",", "5"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "4", ",", "5", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "4", ",", "2", ",", "5", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1", ",", "4", ",", "5", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "1", ",", "5", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "1", ",", "2", ",", "5", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "2", ",", "1", ",", "5", ",", "3"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "5", ",", "3", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "5", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1", ",", "5", ",", "3", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "5", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "2", ",", "1", ",", "3", ",", "4"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "5", ",", "4", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "5", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1", ",", "5", ",", "4", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "5", ",", "1", ",", "4", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "2", ",", "1", ",", "4", ",", "3"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "4", ",", "2", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "4", ",", "3", ",", "2", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "1", ",", "4", ",", "2", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4", ",", "1", ",", "2", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "1", ",", "3", ",", "2", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "3", ",", "1", ",", "2", ",", "5"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "4", ",", "5", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "4", ",", "3", ",", "5", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "1", ",", "4", ",", "5", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4", ",", "1", ",", "5", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "1", ",", "3", ",", "5", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "3", ",", "1", ",", "5", ",", "2"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "5", ",", "2", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "5", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "1", ",", "5", ",", "2", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "5", ",", "1", ",", "2", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "3", ",", "1", ",", "2", ",", "4"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "5", ",", "4", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "5", ",", "3", ",", "4", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "1", ",", "5", ",", "4", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "5", ",", "1", ",", "4", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "1", ",", "3", ",", "4", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "3", ",", "1", ",", "4", ",", "2"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "4", ",", "5", ",", "2", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "5", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "1", ",", "5", ",", "2", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "5", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "1", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "4", ",", "1", ",", "2", ",", "3"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "4", ",", "5", ",", "3", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "5", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "1", ",", "5", ",", "3", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "5", ",", "1", ",", "3", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "1", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "4", ",", "1", ",", "3", ",", "2"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "4", ",", "1", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "3", ",", "1", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "4", ",", "1", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4", ",", "2", ",", "1", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "2", ",", "3", ",", "1", ",", "5"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "3", ",", "2", ",", "1", ",", "5"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "4", ",", "5", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "3", ",", "5", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "4", ",", "5", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4", ",", "2", ",", "5", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "2", ",", "3", ",", "5", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "3", ",", "2", ",", "5", ",", "1"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "5", ",", "1", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "5", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "5", ",", "1", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "5", ",", "2", ",", "1", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "2", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "3", ",", "2", ",", "1", ",", "4"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "5", ",", "4", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "5", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "5", ",", "4", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "5", ",", "2", ",", "4", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "3", ",", "2", ",", "4", ",", "1"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "5", ",", "1", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "5", ",", "4", ",", "1", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "2", ",", "5", ",", "1", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "5", ",", "2", ",", "1", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "2", ",", "4", ",", "1", ",", "3"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "4", ",", "2", ",", "1", ",", "3"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "5", ",", "3", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "5", ",", "4", ",", "3", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "2", ",", "5", ",", "3", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "5", ",", "2", ",", "3", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "2", ",", "4", ",", "3", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "4", ",", "2", ",", "3", ",", "1"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "5", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "3", ",", "5", ",", "1", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "5", ",", "3", ",", "1", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "4", ",", "3", ",", "1", ",", "2"}], "}"}], 
        "]"}]}], "]"}]},
    {
     RowBox[{"Coset", "[", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4", ",", "5", ",", "2", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "5", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "3", ",", "5", ",", "2", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"4", ",", "5", ",", "3", ",", "2", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "3", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "4", ",", "3", ",", "2", ",", "1"}], "}"}], 
        "]"}]}], "]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{
    xAct`xPerm`Group[
     xAct`xPerm`Images[{1, 2, 3, 4, 5}], 
     xAct`xPerm`Images[{1, 3, 2, 4, 5}], 
     xAct`xPerm`Images[{2, 1, 3, 4, 5}], 
     xAct`xPerm`Images[{2, 3, 1, 4, 5}], 
     xAct`xPerm`Images[{3, 1, 2, 4, 5}], 
     xAct`xPerm`Images[{3, 2, 1, 4, 5}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{1, 2, 3, 5, 4}], 
     xAct`xPerm`Images[{1, 3, 2, 5, 4}], 
     xAct`xPerm`Images[{2, 1, 3, 5, 4}], 
     xAct`xPerm`Images[{2, 3, 1, 5, 4}], 
     xAct`xPerm`Images[{3, 1, 2, 5, 4}], 
     xAct`xPerm`Images[{3, 2, 1, 5, 4}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{1, 2, 4, 3, 5}], 
     xAct`xPerm`Images[{1, 4, 2, 3, 5}], 
     xAct`xPerm`Images[{2, 1, 4, 3, 5}], 
     xAct`xPerm`Images[{2, 4, 1, 3, 5}], 
     xAct`xPerm`Images[{4, 1, 2, 3, 5}], 
     xAct`xPerm`Images[{4, 2, 1, 3, 5}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{1, 2, 4, 5, 3}], 
     xAct`xPerm`Images[{1, 4, 2, 5, 3}], 
     xAct`xPerm`Images[{2, 1, 4, 5, 3}], 
     xAct`xPerm`Images[{2, 4, 1, 5, 3}], 
     xAct`xPerm`Images[{4, 1, 2, 5, 3}], 
     xAct`xPerm`Images[{4, 2, 1, 5, 3}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{1, 2, 5, 3, 4}], 
     xAct`xPerm`Images[{1, 5, 2, 3, 4}], 
     xAct`xPerm`Images[{2, 1, 5, 3, 4}], 
     xAct`xPerm`Images[{2, 5, 1, 3, 4}], 
     xAct`xPerm`Images[{5, 1, 2, 3, 4}], 
     xAct`xPerm`Images[{5, 2, 1, 3, 4}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{1, 2, 5, 4, 3}], 
     xAct`xPerm`Images[{1, 5, 2, 4, 3}], 
     xAct`xPerm`Images[{2, 1, 5, 4, 3}], 
     xAct`xPerm`Images[{2, 5, 1, 4, 3}], 
     xAct`xPerm`Images[{5, 1, 2, 4, 3}], 
     xAct`xPerm`Images[{5, 2, 1, 4, 3}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{1, 3, 4, 2, 5}], 
     xAct`xPerm`Images[{1, 4, 3, 2, 5}], 
     xAct`xPerm`Images[{3, 1, 4, 2, 5}], 
     xAct`xPerm`Images[{3, 4, 1, 2, 5}], 
     xAct`xPerm`Images[{4, 1, 3, 2, 5}], 
     xAct`xPerm`Images[{4, 3, 1, 2, 5}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{1, 3, 4, 5, 2}], 
     xAct`xPerm`Images[{1, 4, 3, 5, 2}], 
     xAct`xPerm`Images[{3, 1, 4, 5, 2}], 
     xAct`xPerm`Images[{3, 4, 1, 5, 2}], 
     xAct`xPerm`Images[{4, 1, 3, 5, 2}], 
     xAct`xPerm`Images[{4, 3, 1, 5, 2}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{1, 3, 5, 2, 4}], 
     xAct`xPerm`Images[{1, 5, 3, 2, 4}], 
     xAct`xPerm`Images[{3, 1, 5, 2, 4}], 
     xAct`xPerm`Images[{3, 5, 1, 2, 4}], 
     xAct`xPerm`Images[{5, 1, 3, 2, 4}], 
     xAct`xPerm`Images[{5, 3, 1, 2, 4}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{1, 3, 5, 4, 2}], 
     xAct`xPerm`Images[{1, 5, 3, 4, 2}], 
     xAct`xPerm`Images[{3, 1, 5, 4, 2}], 
     xAct`xPerm`Images[{3, 5, 1, 4, 2}], 
     xAct`xPerm`Images[{5, 1, 3, 4, 2}], 
     xAct`xPerm`Images[{5, 3, 1, 4, 2}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{1, 4, 5, 2, 3}], 
     xAct`xPerm`Images[{1, 5, 4, 2, 3}], 
     xAct`xPerm`Images[{4, 1, 5, 2, 3}], 
     xAct`xPerm`Images[{4, 5, 1, 2, 3}], 
     xAct`xPerm`Images[{5, 1, 4, 2, 3}], 
     xAct`xPerm`Images[{5, 4, 1, 2, 3}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{1, 4, 5, 3, 2}], 
     xAct`xPerm`Images[{1, 5, 4, 3, 2}], 
     xAct`xPerm`Images[{4, 1, 5, 3, 2}], 
     xAct`xPerm`Images[{4, 5, 1, 3, 2}], 
     xAct`xPerm`Images[{5, 1, 4, 3, 2}], 
     xAct`xPerm`Images[{5, 4, 1, 3, 2}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{2, 3, 4, 1, 5}], 
     xAct`xPerm`Images[{2, 4, 3, 1, 5}], 
     xAct`xPerm`Images[{3, 2, 4, 1, 5}], 
     xAct`xPerm`Images[{3, 4, 2, 1, 5}], 
     xAct`xPerm`Images[{4, 2, 3, 1, 5}], 
     xAct`xPerm`Images[{4, 3, 2, 1, 5}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{2, 3, 4, 5, 1}], 
     xAct`xPerm`Images[{2, 4, 3, 5, 1}], 
     xAct`xPerm`Images[{3, 2, 4, 5, 1}], 
     xAct`xPerm`Images[{3, 4, 2, 5, 1}], 
     xAct`xPerm`Images[{4, 2, 3, 5, 1}], 
     xAct`xPerm`Images[{4, 3, 2, 5, 1}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{2, 3, 5, 1, 4}], 
     xAct`xPerm`Images[{2, 5, 3, 1, 4}], 
     xAct`xPerm`Images[{3, 2, 5, 1, 4}], 
     xAct`xPerm`Images[{3, 5, 2, 1, 4}], 
     xAct`xPerm`Images[{5, 2, 3, 1, 4}], 
     xAct`xPerm`Images[{5, 3, 2, 1, 4}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{2, 3, 5, 4, 1}], 
     xAct`xPerm`Images[{2, 5, 3, 4, 1}], 
     xAct`xPerm`Images[{3, 2, 5, 4, 1}], 
     xAct`xPerm`Images[{3, 5, 2, 4, 1}], 
     xAct`xPerm`Images[{5, 2, 3, 4, 1}], 
     xAct`xPerm`Images[{5, 3, 2, 4, 1}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{2, 4, 5, 1, 3}], 
     xAct`xPerm`Images[{2, 5, 4, 1, 3}], 
     xAct`xPerm`Images[{4, 2, 5, 1, 3}], 
     xAct`xPerm`Images[{4, 5, 2, 1, 3}], 
     xAct`xPerm`Images[{5, 2, 4, 1, 3}], 
     xAct`xPerm`Images[{5, 4, 2, 1, 3}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{2, 4, 5, 3, 1}], 
     xAct`xPerm`Images[{2, 5, 4, 3, 1}], 
     xAct`xPerm`Images[{4, 2, 5, 3, 1}], 
     xAct`xPerm`Images[{4, 5, 2, 3, 1}], 
     xAct`xPerm`Images[{5, 2, 4, 3, 1}], 
     xAct`xPerm`Images[{5, 4, 2, 3, 1}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{3, 4, 5, 1, 2}], 
     xAct`xPerm`Images[{3, 5, 4, 1, 2}], 
     xAct`xPerm`Images[{4, 3, 5, 1, 2}], 
     xAct`xPerm`Images[{4, 5, 3, 1, 2}], 
     xAct`xPerm`Images[{5, 3, 4, 1, 2}], 
     xAct`xPerm`Images[{5, 4, 3, 1, 2}]], 
    xAct`xPerm`Coset[
     xAct`xPerm`Images[{3, 4, 5, 2, 1}], 
     xAct`xPerm`Images[{3, 5, 4, 2, 1}], 
     xAct`xPerm`Images[{4, 3, 5, 2, 1}], 
     xAct`xPerm`Images[{4, 5, 3, 2, 1}], 
     xAct`xPerm`Images[{5, 3, 4, 2, 1}], 
     xAct`xPerm`Images[{5, 4, 3, 2, 1}]]}],
  Editable->False]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"cosets", "[", 
      RowBox[{"[", 
       RowBox[{"i", ",", "1"}], "]"}], "]"}], "\[Equal]", 
     RowBox[{"reps", "[", 
      RowBox[{"[", "i", "]"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "20"}], "}"}]}], "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Group", "@@", 
   RowBox[{"Union", "[", 
    RowBox[{"Apply", "[", 
     RowBox[{"Sequence", ",", "cosets", ",", "1"}], "]"}], "]"}]}], "===", 
  RowBox[{"Sort", "[", "s5", "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["5.1.6. Example: S3 in S6", "Subsubsection"],

Cell["We construct the symmetric group of 6-perms:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"s6", "=", 
   RowBox[{"Dimino", "[", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5", ",", "6"}], 
        "}"}], "]"}], ",", 
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"6", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
        "}"}], "]"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "s6", "]"}]}], "Input"],

Cell[BoxData["720"], "Output"]
}, Open  ]],

Cell["It is not sorted, according to PermSort:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"PermSort", "[", "s6", "]"}], "===", "s6"}]], "Input"],

Cell[BoxData["False"], "Output"]
}, Open  ]],

Cell["A subgroup of permutations is s3:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"s3", "=", 
  RowBox[{"Group", "@@", 
   RowBox[{"Stabilizer", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"GenSet", "@@", "s6"}]}], "]"}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{"Group", "[", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
    "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
    "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5", ",", "6"}], "}"}], 
    "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2", ",", "4", ",", "5", ",", "6"}], "}"}], 
    "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1", ",", "4", ",", "5", ",", "6"}], "}"}], 
    "]"}], ",", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "1", ",", "4", ",", "5", ",", "6"}], "}"}], 
    "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["described by", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGSs3", "=", 
  RowBox[{"SchreierSims", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5", ",", "6"}], 
        "}"}], "]"}], ",", 
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "1", ",", "2", ",", "4", ",", "5", ",", "6"}], 
        "}"}], "]"}]}], "]"}], ",", "6"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}],
       "]"}], ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "1", ",", "2", ",", "4", ",", "5", ",", "6"}], "}"}],
       "]"}], ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5", ",", "6"}], "}"}],
       "]"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["We have 20 coset representatives:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"First", "[", 
      RowBox[{"xAct`xPerm`RightCosetRepresentative", "[", 
       RowBox[{"#", ",", "6", ",", "SGSs3"}], "]"}], "]"}], "&"}], "/@", 
    RowBox[{"List", "@@", "s6"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"reps", "=", 
   RowBox[{"Union", "[", "result", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cosets", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"PermSort", "[", 
      RowBox[{"PermProduct", "[", 
       RowBox[{"s3", ",", 
        RowBox[{"reps", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "120"}], "}"}]}], "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"(", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"cosets", "[", 
       RowBox[{"[", 
        RowBox[{"i", ",", "1"}], "]"}], "]"}], "\[Equal]", 
      RowBox[{"reps", "[", 
       RowBox[{"[", "i", "]"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "120"}], "}"}]}], "]"}], ")"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Group", "@@", 
   RowBox[{"Union", "[", 
    RowBox[{"Apply", "[", 
     RowBox[{"Sequence", ",", "cosets", ",", "1"}], "]"}], "]"}]}], "===", 
  RowBox[{"Sort", "[", "s6", "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["5.2. DoubleCosetRepresentative", "Subsection"],

Cell[CellGroupData[{

Cell["5.2.1. DummySet and RepeatedSet", "Subsubsection"],

Cell["\<\
We first define the concept of a dummyset. We need it because we can have a \
tensor with dummies coming from different manifolds. A DummySet is a set of \
pairs of dummies all belonging to the same manifold. In principle there is no \
reason to work simultaneously with two disjoint dummy sets on the same \
manifold. Therefore we also require that a DummySet is the set of all pairs \
of dummies belonging to the same manifold. In addition, we supply the \
symmetry of the metric of that manifold, with this convention: if the metric \
is symmetric then metricQ=1; if the metric is antisymmetric (spinor calculus) \
then metricQ=-1; if there is no metric in the manifold then metricQ=0. Note \
that in the list of pairs of dummies we are giving their names, that is, we \
are supplying their positions in the canonical configuration. This is because \
D is a group acting on indices and not on slots.\
\>", "Text"],

Cell["\<\
The DoubleCosetAlgorithm requires changing the SGS of D by BaseChange and \
stabilization. However, it is easier to change the dummysets and reconstruct \
the associated SGS because it always has the same simple structure. This is \
done with SGSOfDummySet:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SGSOfDummySet"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"SGSOfDummySet[ DummySet[...] ] gives a Strong Generating Set \
for the group of permutations associated to the given DummySet. There are \
always permutations coming from the exchange of dummies. There are \
permutations coming from the exchange of up/down indices in a pair if there \
is a metric for those indices. The GS is given in Cycles notation. See notes \
for DummySet.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567978211-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SGSOfDummySet", "[", 
    RowBox[{"DummySet", "[", 
     RowBox[{"_", ",", "pairs_List", ",", "metricQ_Integer"}], "]"}], "]"}], ":=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"First", "/@", "pairs"}], ",", "\[IndentingNewLine]", 
     RowBox[{"GenSet", "@@", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"Switch", "[", 
         RowBox[{"metricQ", ",", "\[IndentingNewLine]", "1", ",", 
          RowBox[{"Cycles", "/@", "pairs"}], ",", "\[IndentingNewLine]", 
          RowBox[{"-", "1"}], ",", 
          RowBox[{"Minus", "/@", 
           RowBox[{"Cycles", "/@", "pairs"}]}], ",", "\[IndentingNewLine]", 
          "0", ",", 
          RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", "_", ",", 
          RowBox[{"Throw", "[", 
           RowBox[{
           "Print", "[", 
            "\"\<Invalid value for metricQ in SGSOfDummySet.\>\"", "]"}], 
           "]"}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
        
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Cycles", "@@", "#"}], "&"}], "/@", 
          RowBox[{"Transpose", "/@", 
           RowBox[{"Partition", "[", 
            RowBox[{"pairs", ",", "2", ",", "1"}], "]"}]}]}], "]"}]}], 
       "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"SGSOfDummySet", ",", "1"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "DummySet", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
There are two operations defined on a dummyset: moving and removing indices. \
Removing a pair is straightforward:\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RemovePairOf", "[", 
    RowBox[{"i_Integer", ",", 
     RowBox[{"DummySet", "[", 
      RowBox[{"m_", ",", "pairs_List", ",", "metricQ_Integer"}], "]"}]}], 
    "]"}], ":=", 
   RowBox[{"DummySet", "[", 
    RowBox[{"m", ",", 
     RowBox[{"DeleteCases", "[", 
      RowBox[{"pairs", ",", 
       RowBox[{"{", 
        RowBox[{"___", ",", "i", ",", "___"}], "}"}]}], "]"}], ",", 
     "metricQ"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["\<\
However, moving an index to the first position requires the convention of \
having all first indices with the same character and all second indices with \
the same character. This is because the exchange of dummies must be done \
among up-indices and among down-indices separately. It might seem that we \
need to worry about a sign in the spinor case in the second line, but this is \
not true: the actual order of the pairs is not relevant and that sign is \
stored in the permutations d1.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MovePairOf", "[", 
    RowBox[{"i_Integer", ",", 
     RowBox[{"DummySet", "[", 
      RowBox[{"m_", ",", 
       RowBox[{"{", 
        RowBox[{"p1___", ",", 
         RowBox[{"{", 
          RowBox[{"i_", ",", "j_"}], "}"}], ",", "p2___"}], "}"}], ",", 
       "metricQ_Integer"}], "]"}]}], "]"}], ":=", 
   RowBox[{"DummySet", "[", 
    RowBox[{"m", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"i", ",", "j"}], "}"}], ",", "p1", ",", "p2"}], "}"}], ",", 
     "metricQ"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MovePairOf", "[", 
    RowBox[{"i_Integer", ",", 
     RowBox[{"DummySet", "[", 
      RowBox[{"m_", ",", 
       RowBox[{"{", 
        RowBox[{"p1___", ",", 
         RowBox[{"{", 
          RowBox[{"j_", ",", "i_"}], "}"}], ",", "p2___"}], "}"}], ",", 
       "metricQ_Integer"}], "]"}]}], "]"}], ":=", 
   RowBox[{"DummySet", "[", 
    RowBox[{"m", ",", 
     RowBox[{"Reverse", "/@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"j", ",", "i"}], "}"}], ",", "p1", ",", "p2"}], "}"}]}], ",",
      "metricQ"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MovePairOf", "[", 
    RowBox[{"i_Integer", ",", "DS_DummySet"}], "]"}], ":=", "DS"}], 
  ";"}]}], "Input",
 InitializationCell->True],

Cell["Examples:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGSOfDummySet", "[", 
  RowBox[{"DummySet", "[", 
   RowBox[{"M2", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "0"}], "]"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{"Cycles", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}]}], "]"}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGSOfDummySet", "[", 
  RowBox[{"DummySet", "[", 
   RowBox[{"M2", ",", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], "}"}], ",", "1"}], "]"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGSOfDummySet", "[", 
  RowBox[{"DummySet", "[", 
   RowBox[{"M2", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGSOfDummySet", "[", 
  RowBox[{"DummySet", "[", 
   RowBox[{"M2", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"5", ",", "6"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"5", ",", "6"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "6"}], "}"}]}], "]"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGSOfDummySet", "[", 
  RowBox[{"DummySet", "[", 
   RowBox[{"M2", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
    RowBox[{"-", "1"}]}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], "]"}]}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RemovePairOf", "[", 
  RowBox[{"4", ",", 
   RowBox[{"DummySet", "[", 
    RowBox[{"M2", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6"}], "}"}]}], "}"}], ",", "1"}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"DummySet", "[", 
  RowBox[{"M2", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}]}], "}"}], ",", "1"}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MovePairOf", "[", 
  RowBox[{"3", ",", 
   RowBox[{"DummySet", "[", 
    RowBox[{"M2", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6"}], "}"}]}], "}"}], ",", "1"}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"DummySet", "[", 
  RowBox[{"M2", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}]}], "}"}], ",", "1"}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MovePairOf", "[", 
  RowBox[{"4", ",", 
   RowBox[{"DummySet", "[", 
    RowBox[{"M2", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6"}], "}"}]}], "}"}], ",", "1"}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"DummySet", "[", 
  RowBox[{"M2", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "5"}], "}"}]}], "}"}], ",", "1"}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MovePairOf", "[", 
  RowBox[{"7", ",", 
   RowBox[{"DummySet", "[", 
    RowBox[{"M2", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6"}], "}"}]}], "}"}], ",", "1"}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"DummySet", "[", 
  RowBox[{"M2", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}]}], "}"}], ",", "1"}], "]"}]], "Output"]
}, Open  ]],

Cell["\<\
Then we imitate a dummyset using the (simpler) structure of a repeatedset. It \
only contains a list of points, but that list can have arbitrary length (if \
it has length 0 then it is dropped from the list of repeatedsets). We allow \
cases with length 1 because this will be used in xCoba for nicer \
canonicalization of c-indices.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"RepeatedSet", "[", 
    RowBox[{"{", "}"}], "]"}], ":=", 
   RowBox[{"Sequence", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SGSOfDummySet", "[", 
    RowBox[{"RepeatedSet", "[", "list_List", "]"}], "]"}], ":=", 
   RowBox[{"SchreierSims", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"Symmetric", "[", "list", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SGSOfDummySet", "[", "list_List", "]"}], ":=", 
   RowBox[{"Apply", "[", 
    RowBox[{"JoinSGS", ",", 
     RowBox[{"SGSOfDummySet", "/@", "list"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MovePairOf", "[", 
    RowBox[{"i_Integer", ",", 
     RowBox[{"RepeatedSet", "[", 
      RowBox[{"{", 
       RowBox[{"p1___", ",", "i_", ",", "p2___"}], "}"}], "]"}]}], "]"}], ":=", 
   RowBox[{"RepeatedSet", "[", 
    RowBox[{"{", 
     RowBox[{"i", ",", "p1", ",", "p2"}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MovePairOf", "[", 
    RowBox[{"i_Integer", ",", "repe_RepeatedSet"}], "]"}], ":=", "repe"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RemovePairOf", "[", 
    RowBox[{"i_Integer", ",", 
     RowBox[{"RepeatedSet", "[", 
      RowBox[{"{", 
       RowBox[{"p1___", ",", "i_", ",", "p2___"}], "}"}], "]"}]}], "]"}], ":=", 
   RowBox[{"RepeatedSet", "[", 
    RowBox[{"{", 
     RowBox[{"p1", ",", "p2"}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RemovePairOf", "[", 
    RowBox[{"i_Integer", ",", "repe_RepeatedSet"}], "]"}], ":=", "repe"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", 
   RowBox[{"SGSOfDummySet", ",", "RepeatedSet"}], "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RepeatedSet", "[", 
  RowBox[{"{", "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Sequence", "[", "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RepeatedSet", "[", 
  RowBox[{"{", "4", "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"RepeatedSet", "[", 
  RowBox[{"{", "4", "}"}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SGSOfDummySet", "[", 
  RowBox[{"RepeatedSet", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "5"}], "}"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], "]"}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "5"}], "}"}], "]"}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MovePairOf", "[", 
  RowBox[{"3", ",", 
   RowBox[{"RepeatedSet", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"RepeatedSet", "[", 
  RowBox[{"{", 
   RowBox[{"3", ",", "1", ",", "2", ",", "4", ",", "5"}], "}"}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MovePairOf", "[", 
  RowBox[{"6", ",", 
   RowBox[{"RepeatedSet", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"RepeatedSet", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RemovePairOf", "[", 
  RowBox[{"3", ",", 
   RowBox[{"RepeatedSet", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"RepeatedSet", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RemovePairOf", "[", 
  RowBox[{"6", ",", 
   RowBox[{"RepeatedSet", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"RepeatedSet", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], 
  "]"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["5.2.2. JoinSGS", "Subsubsection"],

Cell["\<\
Joining of disjoint Strong Generating Sets (we assume that the points are \
already correctly numbered). This can be understood as the construction of \
the SGS for the direct product of several groups.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "JoinSGS"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"JoinSGS[StrongGenSet[base1, GS1], StrongGenSet[base2, GS2]] \
gives a strong generating set having base Join[base1, base2] (with base1 and \
base2 assumed to be disjoint) and generating set Union[GS1, GS2] (with GS1 \
and GS2 assumed to move disjoint sets of points).\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567978213-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"JoinSGS", "[", 
    RowBox[{"prev___", ",", 
     RowBox[{"sym", ":", 
      RowBox[{"(", 
       RowBox[{"_Symmetric", "|", "_Antisymmetric"}], ")"}]}], ",", 
     "after___"}], "]"}], ":=", 
   RowBox[{"JoinSGS", "[", 
    RowBox[{"prev", ",", 
     RowBox[{"SchreierSims", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "sym"}], "]"}], ",", "after"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"JoinSGS", "[", "SGSs__StrongGenSet", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"Join", "@@", "#1"}], ",", 
       RowBox[{"Union", "@@", "#2"}]}], "]"}], "&"}], "@@", 
    RowBox[{"Transpose", "[", 
     RowBox[{"Apply", "[", 
      RowBox[{"List", ",", 
       RowBox[{"{", "SGSs", "}"}], ",", "1"}], "]"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"JoinSGS", "[", "]"}], ":=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"GenSet", "[", "]"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"JoinSGS", "[", 
  RowBox[{
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{"A", ",", "B", ",", "C"}], "]"}]}], "]"}], ",", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{"D", ",", "F"}], "]"}]}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "5", ",", "6"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{"A", ",", "B", ",", "C", ",", "D", ",", "F"}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["5.2.3. ExtendBase", "Subsubsection"],

Cell["\<\
The following function extends the original base to include all dummyslots, \
for sorting purposes, but does not change the relative ordering of the \
initial points in the base. This algorithm can be used in a general case, but \
it was designed for use in DoubleCosetRepresentative calling from \
CanonicalPerm, such that all points in base are dummies. We check that and \
print a message when this is not true.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"takenext", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "other___"}], "}"}], ",", 
     RowBox[{"{", "found___", "}"}], ",", "list_List"}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sublist", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"list", ",", 
           RowBox[{
            RowBox[{"#", "<", "a"}], "&"}]}], "]"}], ",", 
         RowBox[{"{", "other", "}"}]}], "]"}]}], "}"}], ",", 
     RowBox[{"takenext", "[", 
      RowBox[{
       RowBox[{"{", "other", "}"}], ",", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{"found", ",", "sublist", ",", "a"}], "}"}], "]"}], ",", 
       RowBox[{"Complement", "[", 
        RowBox[{"list", ",", "sublist", ",", 
         RowBox[{"{", "a", "}"}]}], "]"}]}], "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"takenext", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "found_", ",", "list_List"}], "]"}], ":=", 
   RowBox[{"Join", "[", 
    RowBox[{"found", ",", "list"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtendBase", "[", 
    RowBox[{"base_", ",", "dummyslots_", ",", "ob_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"nondummybase", "=", 
        RowBox[{"Complement", "[", 
         RowBox[{"base", ",", "dummyslots"}], "]"}]}], ",", 
       RowBox[{"otherdummyslots", "=", 
        RowBox[{"Complement", "[", 
         RowBox[{"dummyslots", ",", "base"}], "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"nondummybase", "=!=", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<ExtendBase: non-dummy base points: \>\"", ",", "nondummybase"}],
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"ob", ",", "\[IndentingNewLine]", 
        RowBox[{"takenext", "[", 
         RowBox[{"base", ",", 
          RowBox[{"{", "}"}], ",", "dummyslots"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"Cases", "[", 
           RowBox[{"base", ",", 
            RowBox[{"Alternatives", "@@", "dummyslots"}]}], "]"}], ",", 
          "otherdummyslots"}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TracePrint", "[", 
  RowBox[{
   RowBox[{"takenext", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "5", ",", "3", ",", "7"}], "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7"}], 
      "}"}]}], "]"}], ",", 
   RowBox[{"takenext", "[", 
    RowBox[{"_List", ",", "_List", ",", "_List"}], "]"}]}], "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{" ", "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"takenext", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "5", ",", "3", ",", "7"}], "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7"}], 
       "}"}]}], "]"}],
    HoldForm]}],
  SequenceForm[
   Indent[1], 
   HoldForm[
    xAct`xPerm`Private`takenext[{1, 5, 3, 7}, {}, {1, 2, 3, 4, 5, 6, 7}]]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{" ", "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"takenext", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"5", ",", "3", ",", "7"}], "}"}], ",", 
      RowBox[{"{", "1", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7"}], 
       "}"}]}], "]"}],
    HoldForm]}],
  SequenceForm[
   Indent[1], 
   HoldForm[
    xAct`xPerm`Private`takenext[{5, 3, 7}, {1}, {2, 3, 4, 5, 6, 7}]]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{" ", "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"takenext", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "7"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "6", ",", "7"}], "}"}]}], "]"}],
    HoldForm]}],
  SequenceForm[
   Indent[1], 
   HoldForm[
    xAct`xPerm`Private`takenext[{3, 7}, {1, 2, 4, 5}, {3, 6, 7}]]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{" ", "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"takenext", "[", 
     RowBox[{
      RowBox[{"{", "7", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4", ",", "5", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"6", ",", "7"}], "}"}]}], "]"}],
    HoldForm]}],
  SequenceForm[
   Indent[1], 
   HoldForm[
    xAct`xPerm`Private`takenext[{7}, {1, 2, 4, 5, 3}, {6, 7}]]],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{" ", "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"takenext", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "2", ",", "4", ",", "5", ",", "3", ",", "6", ",", "7"}], 
       "}"}], ",", 
      RowBox[{"{", "}"}]}], "]"}],
    HoldForm]}],
  SequenceForm[
   Indent[1], 
   HoldForm[
    xAct`xPerm`Private`takenext[{}, {1, 2, 4, 5, 3, 6, 7}, {}]]],
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "4", ",", "5", ",", "3", ",", "6", ",", "7"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\<\
This is here only for this notebook (the full list of options for \
CanonicalPerm will be given below, and it includes this in particular).\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "CanonicalPerm", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"OrderedBase", "\[Rule]", "True"}], "}"}]}], ";"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["5.2.4. Main code", "Subsubsection"],

Cell["Simple function:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"orbitof", "[", 
   RowBox[{"i_Integer", ",", 
    RowBox[{"h_", "[", 
     RowBox[{"___", ",", 
      RowBox[{"list", ":", 
       RowBox[{"{", 
        RowBox[{"___", ",", "i_", ",", "___"}], "}"}]}], ",", "___"}], 
     "]"}]}], "]"}], ":=", "list"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"orbitof", "[", 
   RowBox[{"i_Integer", ",", 
    RowBox[{"_", "[", "___", "]"}]}], "]"}], ":=", 
  RowBox[{"{", "}"}]}]}], "Input",
 InitializationCell->True],

Cell["\<\
List of objects in the code:
permutation:\tpermutation to canonicalize
perm:\t\tpermutation with notation ID corrected.
notation:\tinner notation to work with
dummyindices: indices (positions in the canonical list) participating in the \
D group
dummyslots:\tlist obtained as the union of all positions (that is, slots: \
positions in the actual configuration) participating in the D group

bS:\t\tbase of the SGS of group S. It must contain all positions in \
dummyslots, and so base is extended if this is not true initially. The \
OrderedBase option add missing dummyslots in (Sort) order, without moving the \
original slots to avoid losing the base property.
SGSS:\t\tSGS of group S, initially formed by bS and the given GS. This GS is \
assumed to have been stabilized on the free (and blocked) points.
bSsort:\trearrangement for sorting. This is in fact a choice of ordering of \
indices.

SGSD:\t\tSGS of group D, initially formed by joining all SGS constructed with \
SGSOfDummySet.\
\>", "Text"],

Cell["\<\
Now this function finds the double-coset representative. The degree deg that \
is given as an argument is the the degree of the permutation g, and does not \
have to coincide with the number of dummies.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "DoubleCosetRepresentative"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"DoubleCosetRepresentative[perm, n, SGS, dummysets] returns a \
canonical representative of the double coset S.perm.D, where S is generated \
by the strong generating set SGS and D is the group of symmetries of the \
dummysets. The criterium is the sequential sorting of slots of permutation \
perm (from first to last), choosing the least index not yet used consistent \
with the symmetries S and D. The indices are chosen assuming that indices are \
numbered according to their canonical order.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567978214-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "DoubleCosetRepresentative", "]"}], ":=", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"xPermVerbose", "\[Rule]", "False"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"MathLink", "\[RuleDelayed]", "$xpermQ"}]}], 
     "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"permutation", ":", " ", 
      RowBox[{"degree", " ", "deg"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"base", "=", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"b1", ",", " ", "...", ",", " ", "bk"}], "}"}], ":", " ", 
       RowBox[{"base", " ", "of", " ", "group", " ", "S"}]}]}], " ", ";", 
     "\[IndentingNewLine]", 
     RowBox[{"GS", ":", " ", 
      RowBox[{
      "strong", " ", "generating", " ", "set", " ", "of", " ", "S", " ", 
       "relative", " ", "to", " ", "base"}]}], " ", ";", 
     "\[IndentingNewLine]", 
     RowBox[{"dummysets", " ", ":", " ", 
      RowBox[{"list", " ", "of", " ", "sets", " ", 
       RowBox[{"(", 
        RowBox[{"head", " ", "DummySet", " ", "or", " ", "RepeatedSet"}], 
        ")"}], " ", "of", " ", "pairs", " ", "of", " ", "names", 
       "\[IndentingNewLine]", 
       RowBox[{"(", 
        RowBox[{
        "positions", " ", "in", " ", "the", " ", "canonical", " ", 
         "configuration"}], ")"}], " ", "of", " ", "dummies"}]}]}], ",", " ", 
    
    RowBox[{
     RowBox[{"or", " ", "a", " ", "single", " ", "list"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"with", " ", "repeated", " ", 
       RowBox[{"indices", ".", " ", "Each"}], " ", "set", " ", "is", " ", 
       "associated", " ", "with", " ", "a", " ", "manifold"}], " ", ";"}]}]}],
    "\[IndentingNewLine]", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"permutation_", "?", "PermQ"}], ",", "len_Integer", ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{"base_List", ",", "GS_GenSet"}], "]"}], ",", 
     RowBox[{"dummysets", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"_DummySet", "|", "_RepeatedSet"}], ")"}], "..."}], "}"}]}], 
     ",", 
     RowBox[{"options", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "n", ",", "perm", ",", "notation", ",", "F1", ",", "F2", ",", "bS", ",",
        "SGSS", ",", "SGSD", ",", "i", ",", "TAB", ",", 
       RowBox[{"ALPHA", "=", 
        RowBox[{"{", 
         RowBox[{"{", "}"}], "}"}]}], ",", "nuS", ",", "Deltab", ",", 
       "DeltaD", ",", "IMAGES", ",", "p", ",", "nuD", ",", "Deltap", ",", "s",
        ",", "d", ",", "NEXT", ",", "j", ",", "jj", ",", "s1", ",", "d1", ",",
        "L1", ",", "tmp", ",", "alphaindices", ",", 
       RowBox[{"KS", "=", "GS"}], ",", "result", ",", "dummyindices", ",", 
       RowBox[{"newdummysets", "=", "dummysets"}], ",", "dummyslots", ",", 
       "bi", ",", "pi", ",", 
       RowBox[{"ob", "=", 
        RowBox[{"OptionValue", "[", 
         RowBox[{"CanonicalPerm", ",", 
          RowBox[{"{", "options", "}"}], ",", "OrderedBase"}], "]"}]}], ",", 
       RowBox[{"verb", "=", 
        RowBox[{"OptionValue", "[", "xPermVerbose", "]"}]}], ",", "bSsort"}], 
      "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "1.", " ", "The", " ", "routine", " ", "works", " ", "in", " ", "the", 
        " ", "notation", " ", "given", " ", "by", " ", 
        RowBox[{"permutation", ".", " ", "If"}], " ", "it", " ", "is", " ", 
        "ID"}], ",", " ", 
       RowBox[{"change", " ", "to", " ", 
        RowBox[{"Cycles", "[", "]"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{
       RowBox[{"perm", "=", 
        RowBox[{"permutation", "/.", 
         RowBox[{"ID", "\[Rule]", 
          RowBox[{"xAct`xPerm`Cycles", "[", "]"}]}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Note", " ", "that", " ", "perm", " ", "is", " ", "always", " ", 
         "kept", " ", "fixed"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"notation", "=", 
        RowBox[{"NotationOfPerm", "[", "perm", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"verb", ",", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<DOUBLE-COSET-REPRESENTATIVE ALGORITHM for \>\"", ",", 
           "permutation"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "2.", " ", "Dummies", " ", "and", " ", "repeated", " ", "indices", 
         " ", "go", " ", "into", " ", "the", " ", "D", " ", "group"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"verb", ",", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<index-dummysets: \>\"", ",", "dummysets"}], "]"}]}], 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"dummyindices", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"dummysets", "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"DummySet", "[", 
              RowBox[{"_", ",", "dums_", ",", "_"}], "]"}], "\[Rule]", 
             "dums"}], ",", 
            RowBox[{
             RowBox[{"RepeatedSet", "[", "list_", "]"}], "\[Rule]", 
             "list"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"verb", ",", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<dummyindices: \>\"", ",", "dummyindices"}], "]"}]}], 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"dummyslots", "=", 
        RowBox[{"OnPoints", "[", 
         RowBox[{"dummyindices", ",", 
          RowBox[{"InversePerm", "[", "perm", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"verb", ",", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<dummyslots: \>\"", ",", "dummyslots"}], "]"}]}], "]"}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"newdummysets", "=", "dummysets"}], ";", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"3.", " ", "Extend", " ", 
          RowBox[{"base", ".", " ", "base"}], " ", "contains", " ", "some", 
          " ", "of", " ", "the", " ", "dummy", " ", "slots"}], ",", " ", 
         RowBox[{"but", " ", "not", " ", 
          RowBox[{"all", ".", " ", "We"}], " ", "must", " ", "cover", " ", 
          "all", " ", "slots", " ", "of", " ", "dummies"}], ",", " ", 
         RowBox[{
         "keeping", " ", "the", " ", "order", " ", "of", " ", "the", " ", 
          "points", " ", "of", " ", "the", " ", "original", " ", "base"}]}], 
        " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"bS", "=", 
        RowBox[{"ExtendBase", "[", 
         RowBox[{"base", ",", 
          RowBox[{"Sort", "@", "dummyslots"}], ",", "ob"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"verb", ",", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<Extended \>\"", ",", "base", ",", "\"\< to \>\"", ",", "bS"}], 
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"SGSS", "=", 
        RowBox[{"StrongGenSet", "[", 
         RowBox[{"bS", ",", "GS"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"verb", ",", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<Initial SGSS: \>\"", ",", "SGSS"}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Initialize", " ", "base", " ", "images"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"p", "=", 
        RowBox[{"0", " ", "bS"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "4.", " ", "Adapt", " ", "base", " ", "for", " ", "sorting", " ", 
          "of", " ", "dummy", " ", 
          RowBox[{"indices", ".", " ", "This"}], " ", "is", " ", "a", " ", 
          "particular", " ", "choice"}], ",", " ", 
         RowBox[{"for", " ", "aesthetical", " ", "reasons"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"bSsort", "=", 
        RowBox[{"bS", "/.", 
         RowBox[{"Inner", "[", 
          RowBox[{"Rule", ",", 
           RowBox[{"Sort", "[", "bS", "]"}], ",", 
           RowBox[{"Sort", "[", "dummyindices", "]"}], ",", "List"}], 
          "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"verb", ",", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<base for sorting: \>\"", ",", "bSsort"}], "]"}]}], 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"5.", " ", "Initialize", " ", "TAB"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"TAB", "[", 
         RowBox[{"{", "}"}], "]"}], ":=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"ID", "[", "perm", "]"}], ",", 
          RowBox[{"ID", "[", "perm", "]"}]}], "}"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"6.", " ", 
         RowBox[{"Subroutines", ".", " ", "Note"}], " ", "that", " ", 
         "elements", " ", "of", " ", "TAB", " ", "are", " ", 
         RowBox[{"{", 
          RowBox[{"s", ",", " ", "d"}], "}"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"F2", "[", 
         RowBox[{"L_", ",", "TAB_", ",", "g_"}], "]"}], ":=", 
        RowBox[{"PermProduct", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"TAB", "[", "L", "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", "g", ",", 
          RowBox[{
           RowBox[{"TAB", "[", "L", "]"}], "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"F1", "[", 
         RowBox[{
         "L_", ",", "TAB_", ",", "DeltaD_", ",", "Deltab_", ",", "g_"}], 
         "]"}], ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"sgd", "=", 
             RowBox[{"F2", "[", 
              RowBox[{"L", ",", "TAB", ",", "g"}], "]"}]}], ",", "list"}], 
           "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{"verb", ",", 
             RowBox[{"Print", "[", 
              RowBox[{
              "\"\<With L=\>\"", ",", "L", ",", "\"\< we get sgd: \>\"", ",", 
               "sgd"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"list", "=", 
            RowBox[{"OnPoints", "[", 
             RowBox[{"Deltab", ",", "sgd"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"verb", ",", 
             RowBox[{"Print", "[", 
              RowBox[{
              "\"\<which maps slots in Deltab to indices list: \>\"", ",", 
               "list"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"list", "=", 
            RowBox[{"Union", "[", 
             RowBox[{"Flatten", "[", 
              RowBox[{"Cases", "[", 
               RowBox[{"DeltaD", ",", 
                RowBox[{"x_", "/;", 
                 RowBox[{
                  RowBox[{"Intersection", "[", 
                   RowBox[{"x", ",", "list"}], "]"}], "=!=", 
                  RowBox[{"{", "}"}]}]}]}], "]"}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"verb", ",", 
             RowBox[{"Print", "[", 
              RowBox[{"\"\<whose points belong to orbits \>\"", ",", "list"}],
               "]"}]}], "]"}], ";", "\[IndentingNewLine]", "list"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "7.", " ", "Strong", " ", "Generating", " ", "Set", " ", "of", " ", 
         "group", " ", "D"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"SGSD", "=", 
        RowBox[{"TranslatePerm", "[", 
         RowBox[{
          RowBox[{"JoinSGS", "@@", 
           RowBox[{"(", 
            RowBox[{"SGSOfDummySet", "/@", "dummysets"}], ")"}]}], ",", 
          "notation"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"verb", ",", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<Initial SGSD: \>\"", ",", "SGSD"}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "8.", " ", "Main", " ", "loop", " ", "on", " ", "the", " ", "slots", 
         " ", "of", " ", "bS"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", 
         RowBox[{"i", "\[LessEqual]", 
          RowBox[{"Length", "[", "bS", "]"}]}], ",", 
         RowBox[{"++", "i"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<******************* Loop i= \>\"", ",", "i", ",", 
              "\"\< *********************\>\""}], "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"bi", "=", 
           RowBox[{"bS", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Analyzing slot \>\"", ",", "bi", ",", 
              "\"\< of tensor\>\""}], "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"A", ".", " ", "Schreier"}], " ", "vector", " ", "of", 
            " ", "S"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"nuS", "=", 
           RowBox[{"SchreierOrbits", "[", 
            RowBox[{"SGSS", ",", "len"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "Orbits", " ", "are", " ", "ordered", " ", "according", " ", "to",
              " ", "base", " ", "of", " ", "SGSS"}], ",", " ", 
            RowBox[{
            "which", " ", "has", " ", "bi", " ", "as", " ", "first", " ", 
             "element"}]}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<nuS: \>\"", ",", "nuS", ",", "\"\< with first element \>\"",
               ",", "bi"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Deltab", "=", 
           RowBox[{"orbitof", "[", 
            RowBox[{"bi", ",", 
             RowBox[{"Drop", "[", 
              RowBox[{
               RowBox[{"List", "@@", "nuS"}], ",", 
               RowBox[{"-", "2"}]}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Under S, slot \>\"", ",", "bi", ",", 
              "\"\< can go to slots Deltab: \>\"", ",", "Deltab"}], "]"}]}], 
           "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"B", ".", " ", "Orbits"}], " ", "of", " ", "D"}], " ", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"DeltaD", "=", 
           RowBox[{"Orbits", "[", 
            RowBox[{
             RowBox[{"SGSD", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", "len"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Orbits of indices under D: DeltaD: \>\"", ",", "DeltaD"}], 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"C", ".", " ", "Images"}], " ", "of", " ", "bi", " ", 
            "under", " ", "elements", " ", "of", " ", 
            RowBox[{"S", ".", "perm", ".", "D"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"IMAGES", "=", 
           RowBox[{"Union", "[", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"F1", "[", 
                 RowBox[{
                 "#", ",", "TAB", ",", "DeltaD", ",", "Deltab", ",", "perm"}],
                  "]"}], "&"}], ",", "ALPHA"}], "]"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Therefore at slot \>\"", ",", "bi", ",", 
              "\"\< we can have indices IMAGES: \>\"", ",", "IMAGES"}], 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "The", " ", "minimal", " ", "element", " ", "is", " ", "taken", 
            " ", "with", " ", "respect", " ", "to", " ", "bSsort"}], " ", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"p", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", 
           RowBox[{"pi", "=", 
            RowBox[{"MinB", "[", 
             RowBox[{"IMAGES", ",", "bSsort"}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<The least of them is p[[\>\"", ",", "i", ",", 
              "\"\<]]: \>\"", ",", "pi"}], "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"D", ".", " ", "Rearrange"}], " ", "SGS", " ", "of", " ", 
            
            RowBox[{"D", ".", " ", "Now"}], " ", "pi", " ", "will", " ", "be",
             " ", "the", " ", "first", " ", "element", " ", "of", " ", "the", 
            " ", "base"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"newdummysets", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"MovePairOf", "[", 
              RowBox[{"pi", ",", "#"}], "]"}], "&"}], "/@", 
            "newdummysets"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<Moved pairs \>\"", ",", "newdummysets"}], "]"}]}], 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "Full", " ", "reconstruction", " ", "of", " ", "the", " ", "SGSD",
              " ", "starting", " ", "from", " ", "the", " ", "new", " ", 
             "dummysets"}], ",", " ", 
            RowBox[{"with", " ", "reordered", " ", "indices"}]}], " ", "*)"}],
           "\[IndentingNewLine]", 
          RowBox[{"SGSD", "=", 
           RowBox[{"TranslatePerm", "[", 
            RowBox[{
             RowBox[{"JoinSGS", "@@", 
              RowBox[{"(", 
               RowBox[{"SGSOfDummySet", "/@", "newdummysets"}], ")"}]}], ",", 
             "notation"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<New SGS of D: \>\"", ",", "SGSD"}], "]"}]}], "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Schreier", " ", "vector", " ", "of", " ", "D"}], " ", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"nuD", "=", 
           RowBox[{"SchreierOrbits", "[", 
            RowBox[{"SGSD", ",", "len"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<with Schreier vector nuD: \>\"", ",", "nuD"}], 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Orbit", " ", "of", " ", "pi", " ", "under", " ", "D"}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"Deltap", "=", 
           RowBox[{"orbitof", "[", 
            RowBox[{"pi", ",", 
             RowBox[{"Drop", "[", 
              RowBox[{
               RowBox[{"List", "@@", "nuD"}], ",", 
               RowBox[{"-", "2"}]}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<In particular, the orbit of index \>\"", ",", "pi", ",", 
              "\"\< is Deltap: \>\"", ",", "Deltap"}], "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"E", ".", " ", "Calculate"}], " ", "ALPHA", " ", "and", 
            " ", 
            RowBox[{"TAB", ".", " ", "Inner"}], " ", "double", " ", "loop"}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Now looking for all permutations sgd that move index \>\"", 
              ",", "pi", ",", "\"\< to slot \>\"", ",", "bi"}], "]"}]}], 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"alphaindices", "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"l", "=", "1"}], ",", 
            RowBox[{"l", "\[LessEqual]", 
             RowBox[{"Length", "[", "ALPHA", "]"}]}], ",", 
            RowBox[{"++", "l"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{"verb", ",", 
               RowBox[{"Print", "[", 
                RowBox[{"\"\<Loop with l=\>\"", ",", "l"}], "]"}]}], "]"}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"L", "=", 
              RowBox[{"ALPHA", "[", 
               RowBox[{"[", "l", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{"verb", ",", 
               RowBox[{"Print", "[", 
                RowBox[{"\"\<L= \>\"", ",", "L"}], "]"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"s", "=", 
              RowBox[{
               RowBox[{"TAB", "[", "L", "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"d", "=", 
              RowBox[{
               RowBox[{"TAB", "[", "L", "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{"verb", ",", 
               RowBox[{"Print", "[", 
                RowBox[{"\"\<TAB[L] = {s, d} = \>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{"s", ",", "d"}], "}"}]}], "]"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{"verb", ",", 
               RowBox[{"Print", "[", 
                RowBox[{
                "\"\<Calculating NEXT. We need the intersection of sets of \
slots \>\"", ",", " ", 
                 RowBox[{"OnPoints", "[", 
                  RowBox[{"Deltab", ",", "s"}], "]"}], ",", "\"\< and \>\"", 
                 ",", 
                 RowBox[{"OnPoints", "[", 
                  RowBox[{"Deltap", ",", 
                   RowBox[{"InversePerm", "[", 
                    RowBox[{"PermProduct", "[", 
                    RowBox[{"perm", ",", "d"}], "]"}], "]"}]}], "]"}]}], 
                "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"NEXT", "=", 
              RowBox[{"Intersection", "[", 
               RowBox[{
                RowBox[{"OnPoints", "[", 
                 RowBox[{"Deltab", ",", "s"}], "]"}], ",", 
                RowBox[{"OnPoints", "[", 
                 RowBox[{"Deltap", ",", 
                  RowBox[{"InversePerm", "[", 
                   RowBox[{"PermProduct", "[", 
                    RowBox[{"perm", ",", "d"}], "]"}], "]"}]}], "]"}]}], 
               "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{"verb", ",", 
               RowBox[{"Print", "[", 
                RowBox[{"\"\<Intermediate slots NEXT= \>\"", ",", "NEXT"}], 
                "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"For", "[", 
              RowBox[{
               RowBox[{"jj", "=", "1"}], ",", 
               RowBox[{"jj", "\[LessEqual]", 
                RowBox[{"Length", "[", "NEXT", "]"}]}], ",", 
               RowBox[{"++", "jj"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"j", "=", 
                 RowBox[{"NEXT", "[", 
                  RowBox[{"[", "jj", "]"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"s1", "=", 
                 RowBox[{"PermProduct", "[", 
                  RowBox[{
                   RowBox[{"TraceSchreier", "[", 
                    RowBox[{
                    RowBox[{"OnPoints", "[", 
                    RowBox[{"j", ",", 
                    RowBox[{"InversePerm", "@", "s"}]}], "]"}], ",", "nuS"}], 
                    "]"}], ",", "s"}], "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{"verb", ",", 
                  RowBox[{"Print", "[", 
                   RowBox[{
                   "\"\<From slot \>\"", ",", "bi", ",", 
                    "\"\< to intermediate slot \>\"", ",", "j", ",", 
                    "\"\< use s1=\>\"", ",", " ", "s1"}], "]"}]}], "]"}], ";",
                 "\[IndentingNewLine]", 
                RowBox[{"d1", "=", 
                 RowBox[{"PermProduct", "[", 
                  RowBox[{"d", ",", 
                   RowBox[{"InversePerm", "@", 
                    RowBox[{"TraceSchreier", "[", 
                    RowBox[{
                    RowBox[{"OnPoints", "[", 
                    RowBox[{"j", ",", 
                    RowBox[{"PermProduct", "[", 
                    RowBox[{"perm", ",", "d"}], "]"}]}], "]"}], ",", "nuD"}], 
                    "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{"verb", ",", 
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<d1= \>\"", ",", "d1"}], "]"}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"L1", "=", 
                 RowBox[{"Append", "[", 
                  RowBox[{"L", ",", "j"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{"verb", ",", 
                  RowBox[{"Print", "[", 
                   RowBox[{"\"\<L1= \>\"", ",", "L1"}], "]"}]}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"TAB", "[", "L1", "]"}], "=", 
                 RowBox[{"{", 
                  RowBox[{"s1", ",", "d1"}], "}"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"alphaindices", ",", "L1"}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{"verb", ",", 
                  RowBox[{"Print", "[", 
                   RowBox[{
                   "\"\<This gives us the new index configuration: \>\"", ",", 
                    RowBox[{"TranslatePerm", "[", 
                    RowBox[{
                    RowBox[{"InversePerm", "[", 
                    RowBox[{"F2", "[", 
                    RowBox[{"L1", ",", "TAB", ",", "perm"}], "]"}], "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"Perm", ",", "len"}], "}"}]}], "]"}]}], "]"}]}], 
                 "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"(*", " ", "Checks", " ", "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"For", "[", 
                 RowBox[{
                  RowBox[{"ii", "=", "1"}], ",", 
                  RowBox[{"ii", "\[LessEqual]", "i"}], ",", 
                  RowBox[{"++", "ii"}], ",", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"OnPoints", "[", 
                    RowBox[{
                    RowBox[{"bS", "[", 
                    RowBox[{"[", "ii", "]"}], "]"}], ",", 
                    RowBox[{"PermProduct", "[", 
                    RowBox[{"s1", ",", "perm", ",", "d1"}], "]"}]}], "]"}], "=!=", 
                    RowBox[{"p", "[", 
                    RowBox[{"[", "ii", "]"}], "]"}]}], ",", 
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<WRONG check of slot \>\"", ",", 
                    RowBox[{"bS", "[", 
                    RowBox[{"[", "ii", "]"}], "]"}], ",", 
                    "\"\< with point \>\"", ",", 
                    RowBox[{"p", "[", 
                    RowBox[{"[", "ii", "]"}], "]"}]}], "]"}]}], "]"}]}], 
                 "\[IndentingNewLine]", "]"}]}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"TAB", "[", "L", "]"}], "=."}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"ALPHA", "=", "alphaindices"}], ";", "\[IndentingNewLine]", 
          
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<New ALPHA: \>\"", ",", "ALPHA"}], "]"}]}], "]"}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"F", ".", " ", "Verify"}], " ", "if", " ", "there", " ", 
            "are", " ", "2", " ", "equal", " ", "permutations", " ", "of", 
            " ", "opposite", " ", "sign", " ", "in", " ", 
            RowBox[{"S", ".", "perm", ".", "D"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"tmp", "=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"InversePerm", "[", 
               RowBox[{"F2", "[", 
                RowBox[{"#", ",", "TAB", ",", "perm"}], "]"}], "]"}], "&"}], 
             ",", "ALPHA"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<Checking consistency in set \>\"", ",", "tmp"}], 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Intersection", "[", 
              RowBox[{"tmp", ",", 
               RowBox[{"-", "tmp"}]}], "]"}], "=!=", 
             RowBox[{"{", "}"}]}], ",", 
            RowBox[{
             RowBox[{"result", "=", "0"}], ";", 
             RowBox[{"Break", "[", "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"G", ".", " ", "Find"}], " ", "the", " ", "stabilizers", 
            " ", 
            RowBox[{"S", "^", 
             RowBox[{"(", 
              RowBox[{"i", "+", "1"}], ")"}]}], " ", "and", " ", 
            RowBox[{"D", "^", 
             RowBox[{"(", 
              RowBox[{"i", "+", "1"}], ")"}]}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"SGSS", "=", 
           RowBox[{"StrongGenSet", "[", 
            RowBox[{
             RowBox[{"Drop", "[", 
              RowBox[{
               RowBox[{"SGSS", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", "1"}], "]"}], ",", 
             RowBox[{"Stabilizer", "[", 
              RowBox[{
               RowBox[{"{", "bi", "}"}], ",", 
               RowBox[{"SGSS", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Removing permutations from SGS of S that move slot \>\"", 
              ",", "bi"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<New SGS of S: \>\"", ",", "SGSS"}], "]"}]}], "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "Construct", " ", "new", " ", "SGSD", " ", "from", " ", "the", 
             " ", "new", " ", "dummysets"}], ",", " ", 
            RowBox[{"and", " ", "not", " ", "by", " ", "stabilization"}]}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"newdummysets", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"RemovePairOf", "[", 
              RowBox[{"pi", ",", "#"}], "]"}], "&"}], "/@", 
            "newdummysets"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"SGSD", "=", 
           RowBox[{"TranslatePerm", "[", 
            RowBox[{
             RowBox[{"JoinSGS", "@@", 
              RowBox[{"(", 
               RowBox[{"SGSOfDummySet", "/@", "newdummysets"}], ")"}]}], ",", 
             "notation"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Removing permutations from SGS of D that move index \>\"", 
              ",", "pi"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<New SGS of D: \>\"", ",", "SGSD"}], "]"}]}], "]"}], 
          ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], " ", 
      RowBox[{"(*", " ", 
       RowBox[{"End", " ", "of", " ", "main", " ", "loop"}], " ", "*)"}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"9.", " ", "Result"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "result", ",", "\[IndentingNewLine]", "0", ",", "0", ",", 
        "\[IndentingNewLine]", "_", ",", 
        RowBox[{
         RowBox[{"F2", "[", 
          RowBox[{
           RowBox[{"ALPHA", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", "TAB", ",", "perm"}], "]"}], 
         "/.", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"permutation", "===", "ID"}], ",", 
           RowBox[{
            RowBox[{"Cycles", "[", "]"}], "\[Rule]", "ID"}], ",", 
           RowBox[{"{", "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"DoubleCosetRepresentative", ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "Infinity"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "DoubleCosetRepresentative", "]"}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["5.2.5. Simple examples", "Subsubsection"],

Cell["Two-index tensors with both indices contracted:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"emptySGS", "=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"GenSet", "[", "]"}]}], "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", "2", ",", "emptySGS", ",", 
     
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "}"}], ",", "1"}], "]"}], "}"}]}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "1", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", "]"}], ",", "2", ",", "emptySGS", ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "}"}], ",", "1"}], "]"}], "}"}]}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Cycles", "[", "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "2", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Rules", "[", "]"}], ",", "2", ",", "emptySGS", ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "}"}], ",", "1"}], "]"}], "}"}]}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Rules", "[", "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "3", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{"ID", ",", "2", ",", "emptySGS", ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "}"}], ",", "1"}], "]"}], "}"}]}], 
    "]"}], ",", "\[IndentingNewLine]", "ID"}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "4", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", "2", ",", "emptySGS", ",", 
     
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "}"}], ",", "1"}], "]"}], "}"}]}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "5", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1"}], "}"}], "]"}], ",", "2", ",", "emptySGS", ",", 
     
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "}"}], ",", "1"}], "]"}], "}"}]}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "6", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1"}], "}"}], "]"}], ",", "2", ",", "emptySGS", ",", 
     
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "}"}], ",", "1"}], "]"}], "}"}]}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "7", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", "2", ",", "emptySGS", ",", 
     
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "}"}], ",", "1"}], "]"}], "}"}]}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Cycles", "[", "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "8", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Rules", "[", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}]}], "]"}], ",", "2", ",", "emptySGS", ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "}"}], ",", "1"}], "]"}], "}"}]}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Rules", "[", "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "9", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", "]"}], ",", "4", ",", "emptySGS", ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"3", ",", "4"}], "}"}], "}"}], ",", "1"}], "]"}], "}"}]}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Cycles", "[", "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "10", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", "]"}], ",", "4", ",", "emptySGS", ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
      "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Cycles", "[", "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "11", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["Now the tensors are symmetric or antisymmetric:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", "2", ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1"}], "}"}], "]"}], "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "}"}], ",", "1"}], "]"}], "}"}]}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "12", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", "2", ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"-", 
         RowBox[{"Perm", "[", 
          RowBox[{"{", 
           RowBox[{"2", ",", "1"}], "}"}], "]"}]}], "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "}"}], ",", "1"}], "]"}], "}"}]}], 
    "]"}], ",", "\[IndentingNewLine]", "0"}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "13", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["Four-indices tensors:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", "4", 
     ",", "emptySGS", ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
      "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "14", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", "4", 
     ",", "emptySGS", ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
      "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "15", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", "4", 
     ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"-", 
         RowBox[{"Perm", "[", 
          RowBox[{"{", 
           RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}]}], 
        "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
      "}"}]}], "]"}], ",", "\[IndentingNewLine]", "0"}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "16", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", "4", 
     ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "3", "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"-", 
         RowBox[{"Perm", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}], 
        "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
      "}"}]}], "]"}], ",", "\[IndentingNewLine]", "0"}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "17", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\<\
This is an example of a case in which we have not stabilized the free points. \
There is a message complaining about point 3 being lost.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Catch", "@", 
  RowBox[{"DoubleCosetRepresentative", "[", 
   RowBox[{
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}], ",", "4", 
    ",", 
    RowBox[{"StrongGenSet", "[", 
     RowBox[{
      RowBox[{"{", "3", "}"}], ",", 
      RowBox[{"GenSet", "[", 
       RowBox[{"-", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}], 
       "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"DummySet", "[", 
      RowBox[{"M", ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4"}], "}"}], "}"}], ",", "1"}], "]"}], "}"}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"ExtendBase: non-dummy base points: \"\>", "\[InvisibleSpace]", 
   
   RowBox[{"{", "3", "}"}]}],
  SequenceForm["ExtendBase: non-dummy base points: ", {3}],
  Editable->False]], "Print"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Inner", "::", "incom"}], "MessageName"], ":", 
  " ", "\<\"Length \[NoBreak]\\!\\(3\\)\[NoBreak] of dimension \
\[NoBreak]\\!\\(1\\)\[NoBreak] in \[NoBreak]\\!\\({1, 2, 3}\\)\[NoBreak] is \
incommensurate with length \[NoBreak]\\!\\(2\\)\[NoBreak] of dimension 1 in \
\[NoBreak]\\!\\({3, 4}\\)\[NoBreak]. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/Inner/incom\\\", \
ButtonNote -> \\\"Inner::incom\\\"]\\)\"\>"}]], "Message", "MSG"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ":", 
  " ", "\<\"\[NoBreak]\\!\\({\\(Inner[\\(\\(Rule, \\(\\({1, 2, 3}\\)\\), \
\\(\\({3, 4}\\)\\), List\\)\\)]\\)}\\)\[NoBreak] is neither a list of \
replacement rules nor a valid dispatch table, and so cannot be used for \
replacing. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\
\\\", ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/ReplaceAll/reps\\\
\", ButtonNote -> \\\"ReplaceAll::reps\\\"]\\)\"\>"}]], "Message", "MSG"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"TranslatePerm", "::", "invalid"}], "MessageName"], ":", 
  " ", "\<\"\[NoBreak]\\!\\(JoinSGS[\\(\\(SGSOfDummySet[\\(\\(MovePairOf[\\(\\\
(\\(\\(MinB[\\(\\(\\(\\({3, 4}\\)\\), \\(\\(\\(\\({1, 2, 3}\\)\\)/.\
\[VeryThinSpace] \\(\\(Inner[\\(\\(Rule, \\(\\({1, 2, 3}\\)\\), \\(\\({3, \
4}\\)\\), List\\)\\)]\\)\\)\\)\\)\\)\\)]\\)\\), \\(\\(DummySet[\\(\\(M, \
\\(\\({\\({3, 4}\\)}\\)\\), 1\\)\\)]\\)\\)\\)\\)]\\)\\)]\\)\\)]\\)\[NoBreak] \
is not a valid \[NoBreak]\\!\\(\\\"permutation\\\"\\)\[NoBreak].\"\>"}]], \
"Message", "MSG"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", "4", 
     ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"-", 
         RowBox[{"Perm", "[", 
          RowBox[{"{", 
           RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}]}], 
        "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"3", ",", "4"}], "}"}], "}"}], ",", "1"}], "]"}], "}"}]}], 
    "]"}], ",", "\[IndentingNewLine]", "0"}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "18", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", "4", 
     ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}], "]"}]}], 
      "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
      "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "19", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\<\
This case is T^BA_BA with symmetry in the third and fourth indices, and we \
get T^AB_AB\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4", ",", "1", ",", "3"}], "}"}], "]"}], ",", "4", 
     ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}], "]"}]}], 
      "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
      "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "20", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\<\
This case is T^AB_BA with antisymmetry in the third and fourth indices, and \
we get -T^AB_AB\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}], ",", "4", 
     ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"-", 
         RowBox[{"Perm", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}], 
        "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
      "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "21", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], "]"}], ",", "4", ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"-", 
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3"}], "}"}], "]"}]}], "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
      "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "22", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"DoubleCosetRepresentative", ",", "\[IndentingNewLine]", 
   RowBox[{"DoubleCosetRepresentative", "[", 
    RowBox[{
     RowBox[{"Rules", "[", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "3"}], ",", 
       RowBox[{"3", "\[Rule]", "2"}]}], "]"}], ",", "4", ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{"-", 
         RowBox[{"Rules", "[", 
          RowBox[{
           RowBox[{"2", "\[Rule]", "3"}], ",", 
           RowBox[{"3", "\[Rule]", "2"}]}], "]"}]}], "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
      "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Rules", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"DoubleCosetRepresentative", ",", "23", ",", "True"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"alltests", "[", "DoubleCosetRepresentative", "]"}]}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["5.2.6. Riemann tensor", "Subsubsection"],

Cell["\<\
In the past the DoubleCosetRepresentative algorithm was able to canonicalize \
also free indices. Now it is not, but it is faster because it only worries \
about dummies.\
\>", "Text"],

Cell["All configurations:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"configurations", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"Perm", "@", "#"}], "&"}], "/@", 
   RowBox[{"Permutations", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "4", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "1", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "4", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "1", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "4", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "1", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "1", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "3", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "2", ",", "1"}], "}"}], "]"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SGS", "=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
       RowBox[{"-", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}]}], ",", 
       RowBox[{"-", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}]}], 
      "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"result", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"DoubleCosetRepresentative", "[", 
     RowBox[{"#", ",", "4", ",", "SGS", ",", 
      RowBox[{"{", 
       RowBox[{"DummySet", "[", 
        RowBox[{"M", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "2"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
       "}"}]}], "]"}], "&"}], "/@", "configurations"}]}]}], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}]}], ",", "0", 
   ",", "0", ",", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}]}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}]}], ",", "0", 
   ",", "0", ",", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}]}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", "0", ",",
    "0"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Union", "[", "result", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}]}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["which are R^{ab}_{ab} and its negative.", "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["5.3. Both together. CanonicalPerm", "Subsection"],

Cell[CellGroupData[{

Cell["5.3.1. Code", "Subsubsection"],

Cell["\<\
INPUT:
\tperm: signed permutation in any format
\tlen: degree of permutation perm
\tGS: generating set of a subgroup of S_len (numbered slots)
\tfrees: free indices (their positions in the canonical list)
\tdummysets: dummies and repeated indices (their positions in the canonical \
list)\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"length", "[", "dummysets_List", "]"}], ":=", 
   RowBox[{"Plus", "@@", 
    RowBox[{"(", 
     RowBox[{"length", "/@", "dummysets"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"length", "[", 
    RowBox[{"DummySet", "[", 
     RowBox[{"_", ",", "pairs_List", ",", "_"}], "]"}], "]"}], ":=", 
   RowBox[{"2", 
    RowBox[{"Length", "[", "pairs", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"length", "[", 
    RowBox[{"RepeatedSet", "[", "list_List", "]"}], "]"}], ":=", 
   RowBox[{"Length", "[", "list", "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CanonicalPerm"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"CanonicalPerm[perm, n, GS, {f1, f2, ...}, dummysets] gives a \
canonical representative of the double coset S.perm.D, where S is generated \
by GS and D is the group of symmetries of the dummysets of dummies. The \
algorithm RightCosetRepresentative is first applied to canonicalize free \
indices f1, f2, ..., and then algorithm DoubleCosetRepresentative is applied \
on the result of the latter.\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567978216-5455693"]
}, Open  ]],

Cell["\<\
Note the option OrderedBase\[Rule]True for nicer output. Thomas has found \
(June 2011) that results can be incorrect with OrderedBase->True if the base \
does not have all moved points and they are sorted. We assume such a thing \
now in all of xAct.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "CanonicalPerm", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"MathLink", "\[RuleDelayed]", "$xpermQ"}], ",", 
     RowBox[{"TimeVerbose", "\[Rule]", "False"}], ",", 
     RowBox[{"xPermVerbose", "\[Rule]", "False"}], ",", 
     RowBox[{"OrderedBase", "\[Rule]", "True"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{
     RowBox[{"perm_", "?", "PermQ"}], ",", "len_Integer", ",", "GS_", ",", 
     "frees_List", ",", 
     RowBox[{"dummysets", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"_DummySet", "|", "_RepeatedSet"}], ")"}], "..."}], "}"}]}], 
     ",", 
     RowBox[{"options", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"OptionValue", "[", "MathLink", "]"}], ",", 
      "MathLinkCanonicalPerm", ",", "MathCanonicalPerm"}], "]"}], "[", 
    RowBox[{
    "perm", ",", "len", ",", "GS", ",", "frees", ",", "dummysets", ",", 
     "options"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"CanonicalPerm", ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "Infinity"}], "}"}]}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Protect", "[", "CanonicalPerm", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MathCanonicalPerm", "[", 
    RowBox[{
    "perm_", ",", "len_", ",", "GS_GenSet", ",", "frees_", ",", "dummysets_", 
     ",", 
     RowBox[{"options", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"notation", ",", "SGS", ",", 
       RowBox[{"time", "=", 
        RowBox[{"TimeUsed", "[", "]"}]}], ",", "timeverb", ",", "verb", ",", 
       "ob"}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"timeverb", ",", "verb", ",", "ob"}], "}"}], "=", 
       RowBox[{"OptionValue", "[", 
        RowBox[{"CanonicalPerm", ",", 
         RowBox[{"{", "options", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"TimeVerbose", ",", "xPermVerbose", ",", "OrderedBase"}], 
          "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Compute", " ", "Strong", " ", "Generating", " ", "Set"}], " ",
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"notation", "=", 
       RowBox[{"NotationOfPerm", "[", "perm", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"verb", ",", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<Using notation \>\"", ",", "notation"}], "]"}]}], "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"SGS", "=", 
       RowBox[{"Sequence", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"ob", ",", 
           RowBox[{"Range", "[", "len", "]"}], ",", 
           RowBox[{"NonStablePoints", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", "GS"}], "]"}]}], "]"}], ",", 
         RowBox[{"TranslatePerm", "[", 
          RowBox[{"GS", ",", "notation"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"verb", ",", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<Before SchreierSims: \>\"", ",", 
          RowBox[{"{", "SGS", "}"}]}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SGS", "=", 
       RowBox[{"SchreierSims", "[", 
        RowBox[{"SGS", ",", "len", ",", "options"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"verb", ",", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<After SchreierSims: \>\"", ",", "SGS"}], "]"}]}], "]"}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"timeverb", ",", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<SGS for group of order \>\"", ",", 
          RowBox[{"OrderOfGroup", "[", "SGS", "]"}], ",", 
          "\"\< computed in \>\"", ",", 
          RowBox[{
           RowBox[{"-", "time"}], "+", 
           RowBox[{"(", 
            RowBox[{"time", "=", 
             RowBox[{"TimeUsed", "[", "]"}]}], ")"}]}], ",", 
          "\"\< secs.\>\""}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"perm", ",", " ", "frees", ",", " ", "dummysets"}], "}"}], 
        " ", "come", " ", "directly", " ", "here"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"MathCanonicalPerm", "[", 
       RowBox[{
       "perm", ",", "len", ",", "SGS", ",", "frees", ",", "dummysets", ",", 
        "options"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MathCanonicalPerm", "[", 
    RowBox[{"perm_", ",", "len_", ",", 
     RowBox[{"sym", ":", 
      RowBox[{"(", 
       RowBox[{"_Symmetric", "|", "_Antisymmetric"}], ")"}]}], ",", 
     "rest__"}], "]"}], ":=", 
   RowBox[{"MathCanonicalPerm", "[", 
    RowBox[{"perm", ",", "len", ",", 
     RowBox[{"SchreierSims", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "sym"}], "]"}], ",", "rest"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MathCanonicalPerm", "[", 
    RowBox[{
    "perm_", ",", "len_", ",", "SGS_StrongGenSet", ",", "frees_", ",", 
     "dummysets_", ",", 
     RowBox[{"options", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "notation", ",", "freeps", ",", "newperm", ",", "newSGS", ",", 
       "newfreeps", ",", 
       RowBox[{"time", "=", 
        RowBox[{"TimeUsed", "[", "]"}]}], ",", "timeverb", ",", "verb", ",", 
       "ob"}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"timeverb", ",", "verb", ",", "ob"}], "}"}], "=", 
       RowBox[{"OptionValue", "[", 
        RowBox[{"CanonicalPerm", ",", 
         RowBox[{"{", "options", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"TimeVerbose", ",", "xPermVerbose", ",", "OrderedBase"}], 
          "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Length", " ", "of", " ", "permutations", " ", 
        RowBox[{"(", 
         RowBox[{"without", " ", "considering", " ", "the", " ", "sign"}], 
         ")"}], " ", "and", " ", "notation"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"len", "=!=", 
         RowBox[{
          RowBox[{"length", "[", "dummysets", "]"}], "+", 
          RowBox[{"Length", "[", "frees", "]"}]}]}], ",", 
        RowBox[{"Throw", "@", 
         RowBox[{"Print", "[", "\"\<Wrong permutation length.\>\"", "]"}]}]}],
        "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"notation", "=", 
       RowBox[{"NotationOfPerm", "[", "perm", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Strong", " ", "generating", " ", "set"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"newSGS", "=", 
       RowBox[{"TranslatePerm", "[", 
        RowBox[{"SGS", ",", "notation"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"ob", ",", 
        RowBox[{"newSGS", "=", 
         RowBox[{"ReplacePart", "[", 
          RowBox[{"newSGS", ",", 
           RowBox[{"takenext", "[", 
            RowBox[{
             RowBox[{"First", "@", "newSGS"}], ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"Range", "[", "len", "]"}]}], "]"}], ",", "1"}], 
          "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"First", ",", " ", 
        RowBox[{
         RowBox[{"we", " ", "apply", " ", "the", " ", "free"}], "-", 
         RowBox[{"indices", " ", 
          RowBox[{"algorithm", ".", " ", "Compute"}], " ", "slots", " ", "of",
           " ", "frees"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"freeps", "=", 
       RowBox[{"OnPoints", "[", 
        RowBox[{"frees", ",", 
         RowBox[{"InversePerm", "[", "perm", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"verb", ",", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<Free indices at slots: \>\"", ",", "freeps"}], "]"}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"newperm", ",", "newSGS", ",", "newfreeps"}], "}"}], "=", 
       RowBox[{"RightCosetRepresentative", "[", 
        RowBox[{
        "perm", ",", "len", ",", "newSGS", ",", "freeps", ",", "options"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"timeverb", ",", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<Free algorithm applied in \>\"", ",", 
          RowBox[{
           RowBox[{"-", "time"}], "+", 
           RowBox[{"(", 
            RowBox[{"time", "=", 
             RowBox[{"TimeUsed", "[", "]"}]}], ")"}]}], ",", 
          "\"\< secs.\>\""}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"verb", ",", 
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<Canonical Permutation after RightCosetRepresentative: \>\"", 
          ",", "newperm"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "If", " ", "there", " ", "are", " ", "dummies", " ", "apply", " ", 
         "dummy"}], "-", 
        RowBox[{"indices", " ", "algorithm"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"dummysets", "=!=", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"newperm", "=", 
          RowBox[{"DoubleCosetRepresentative", "[", 
           RowBox[{
           "newperm", ",", "len", ",", "newSGS", ",", "dummysets", ",", 
            "options"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"timeverb", ",", 
           RowBox[{"Print", "[", 
            RowBox[{"\"\<Dummy algorithm applied in \>\"", ",", 
             RowBox[{
              RowBox[{"-", "time"}], "+", 
              RowBox[{"TimeUsed", "[", "]"}]}], ",", "\"\< secs.\>\""}], 
            "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Final", " ", "result", " ", 
        RowBox[{"(", 
         RowBox[{"could", " ", "be", " ", "zero"}], ")"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", "newperm"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["5.3.2. Examples", "Subsubsection"],

Cell["Use the Mathematica code only, in this section:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetOptions", "[", 
  RowBox[{"CanonicalPerm", ",", 
   RowBox[{"MathLink", "\[Rule]", "False"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"MathLink", "\[Rule]", "False"}], ",", 
   RowBox[{"TimeVerbose", "\[Rule]", "False"}], ",", 
   RowBox[{"xPermVerbose", "\[Rule]", "False"}], ",", 
   RowBox[{"OrderedBase", "\[Rule]", "True"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"SGS", "=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1", ",", "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", 
       "15", ",", "17", ",", "19"}], "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"9", ",", "13"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"10", ",", "14"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"11", ",", "15"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"12", ",", "16"}], "}"}]}], "]"}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"9", ",", "13"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"10", ",", "14"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"11", ",", "15"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"12", ",", "16"}], "}"}]}], "]"}], ",", 
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"19", ",", "20"}], "}"}], "]"}]}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"17", ",", "19"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"18", ",", "20"}], "}"}]}], "]"}], ",", 
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"17", ",", "18"}], "}"}], "]"}]}], ",", 
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"15", ",", "16"}], "}"}], "]"}]}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"13", ",", "15"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"14", ",", "16"}], "}"}]}], "]"}], ",", 
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"13", ",", "14"}], "}"}], "]"}]}], ",", 
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"11", ",", "12"}], "}"}], "]"}]}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"9", ",", "11"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"10", ",", "12"}], "}"}]}], "]"}], ",", 
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"9", ",", "10"}], "}"}], "]"}]}], ",", 
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"7", ",", "8"}], "}"}], "]"}]}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"5", ",", "7"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"6", ",", "8"}], "}"}]}], "]"}], ",", 
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"5", ",", "6"}], "}"}], "]"}]}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"13", ",", "17"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"14", ",", "18"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"15", ",", "19"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"16", ",", "20"}], "}"}]}], "]"}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "5"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "6"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "7"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", "8"}], "}"}]}], "]"}], ",", 
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ",", 
       RowBox[{"Cycles", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "3"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "4"}], "}"}]}], "]"}], ",", 
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"3", ",", "4"}], "}"}], "]"}]}]}], "]"}]}], "]"}]}], 
  ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{
     RowBox[{"Cycles", "[", 
      RowBox[{"{", 
       RowBox[{
       "2", ",", "10", ",", "12", ",", "17", ",", "20", ",", "18", ",", "11", 
        ",", "6", ",", "14", ",", "19", ",", "7", ",", "4", ",", "13", ",", 
        "8", ",", "15", ",", "9", ",", "5", ",", "3"}], "}"}], "]"}], ",", 
     "20", ",", "SGS", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "6"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"7", ",", "8"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"9", ",", "10"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"11", ",", "12"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"13", ",", "14"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"15", ",", "16"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"17", ",", "18"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"19", ",", "20"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
      "}"}], ",", 
     RowBox[{"TimeVerbose", "\[Rule]", "True"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "0"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.0011710000000277887`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Free algorithm applied in ", 0.0011710000000277887`, " secs."],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Dummy algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.27501399999997034`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Dummy algorithm applied in ", 0.27501399999997034`, " secs."],
  
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "1", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "1", ",", "2", ",", "4"}], "}"}], "]"}], ",", "4", 
     ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}]}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}]}], "]"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"TimeVerbose", "\[Rule]", "True"}], ",", 
     RowBox[{"OrderedBase", "\[Rule]", "False"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"SGS for group of order \"\>", "\[InvisibleSpace]", "8", 
   "\[InvisibleSpace]", "\<\" computed in \"\>", "\[InvisibleSpace]", 
   "0.008251999999998816`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm[
  "SGS for group of order ", 8, " computed in ", 0.008251999999998816, 
   " secs."],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.001907999999986032`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Free algorithm applied in ", 0.001907999999986032, " secs."],
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "2", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "1", ",", "2", ",", "4"}], "}"}], "]"}], ",", "4", 
     ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}]}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}]}], "]"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"TimeVerbose", "\[Rule]", "True"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"SGS for group of order \"\>", "\[InvisibleSpace]", "8", 
   "\[InvisibleSpace]", "\<\" computed in \"\>", "\[InvisibleSpace]", 
   "0.012910000000005084`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm[
  "SGS for group of order ", 8, " computed in ", 0.012910000000005084`, 
   " secs."],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.002321000000023332`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Free algorithm applied in ", 0.002321000000023332, " secs."],
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "3", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["Renato's example in paper II:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TranslatePerm", "[", 
  RowBox[{
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "12", ",", "11", ",", "4", ",", "5", ",", "6", ",", "8", ",", 
      "9", ",", "10", ",", "7", ",", "3"}], "}"}], "]"}], ",", "Perm"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Perm", "[", 
  RowBox[{"{", 
   RowBox[{
   "3", ",", "2", ",", "7", ",", "11", ",", "4", ",", "5", ",", "10", ",", 
    "6", ",", "8", ",", "9", ",", "12", ",", "1"}], "}"}], "]"}]], "Output"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"sperm", "=", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{
     "3", ",", "2", ",", "7", ",", "11", ",", "4", ",", "5", ",", "10", ",", 
      "6", ",", "8", ",", "9", ",", "12", ",", "1"}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"GS", "=", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{
        "2", ",", "1", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
         "8", ",", "9", ",", "10", ",", "11", ",", "12"}], "}"}], "]"}]}], 
     ",", 
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{
        "1", ",", "2", ",", "4", ",", "3", ",", "5", ",", "6", ",", "7", ",", 
         "8", ",", "9", ",", "10", ",", "11", ",", "12"}], "}"}], "]"}]}], 
     ",", 
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{
        "1", ",", "2", ",", "3", ",", "4", ",", "6", ",", "5", ",", "7", ",", 
         "8", ",", "9", ",", "10", ",", "11", ",", "12"}], "}"}], "]"}]}], 
     ",", 
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{
        "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "8", ",", 
         "7", ",", "9", ",", "10", ",", "11", ",", "12"}], "}"}], "]"}]}], 
     ",", 
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{
        "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
         "8", ",", "10", ",", "9", ",", "11", ",", "12"}], "}"}], "]"}]}], 
     ",", 
     RowBox[{"-", 
      RowBox[{"Perm", "[", 
       RowBox[{"{", 
        RowBox[{
        "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
         "8", ",", "9", ",", "10", ",", "12", ",", "11"}], "}"}], "]"}]}], 
     ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{
       "3", ",", "4", ",", "1", ",", "2", ",", "5", ",", "6", ",", "7", ",", 
        "8", ",", "9", ",", "10", ",", "11", ",", "12"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "2", ",", "3", ",", "4", ",", "7", ",", "8", ",", "5", ",", 
        "6", ",", "9", ",", "10", ",", "11", ",", "12"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
        "8", ",", "11", ",", "12", ",", "9", ",", "10"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "2", ",", "3", ",", "4", ",", "9", ",", "10", ",", "11", ",",
         "12", ",", "5", ",", "6", ",", "7", ",", "8"}], "}"}], "]"}]}], 
    "]"}]}], ";"}]}], "Input"],

Cell["Here all indices are free:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{"sperm", ",", "12", ",", "GS", ",", 
     RowBox[{"Range", "[", 
      RowBox[{"1", ",", "12"}], "]"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"TimeVerbose", "\[Rule]", "True"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "3", ",", "5", ",", "9", ",", "2", ",", "7", ",", "11", ",", 
      "8", ",", "6", ",", "12", ",", "10", ",", "4"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"SGS for group of order \"\>", "\[InvisibleSpace]", "1024", 
   "\[InvisibleSpace]", "\<\" computed in \"\>", "\[InvisibleSpace]", 
   "0.766601000000037`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm[
  "SGS for group of order ", 1024, " computed in ", 0.766601000000037, 
   " secs."],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.01482400000000439`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Free algorithm applied in ", 0.01482400000000439, " secs."],
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "4", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{"sperm", ",", "12", ",", "GS", ",", 
     RowBox[{"Range", "[", 
      RowBox[{"1", ",", "12"}], "]"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"TimeVerbose", "\[Rule]", "True"}], ",", 
     RowBox[{"OrderedBase", "\[Rule]", "False"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "3", ",", "5", ",", "12", ",", "2", ",", "7", ",", "9", ",", 
       "8", ",", "6", ",", "10", ",", "11", ",", "4"}], "}"}], "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"SGS for group of order \"\>", "\[InvisibleSpace]", "1024", 
   "\[InvisibleSpace]", "\<\" computed in \"\>", "\[InvisibleSpace]", 
   "0.45095900000001166`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm[
  "SGS for group of order ", 1024, " computed in ", 0.45095900000001166`, 
   " secs."],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.01146900000000528`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Free algorithm applied in ", 0.01146900000000528, " secs."],
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "5", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["Here we include the dummy indices:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{"sperm", ",", "12", ",", "GS", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "6"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"7", ",", "8"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"9", ",", "10"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"11", ",", "12"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
      "}"}], ",", 
     RowBox[{"TimeVerbose", "\[Rule]", "True"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "3", ",", "2", ",", "5", ",", "4", ",", "9", ",", "6", ",", 
       "11", ",", "7", ",", "10", ",", "8", ",", "12"}], "}"}], "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"SGS for group of order \"\>", "\[InvisibleSpace]", "1024", 
   "\[InvisibleSpace]", "\<\" computed in \"\>", "\[InvisibleSpace]", 
   "0.7687929999999881`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm[
  "SGS for group of order ", 1024, " computed in ", 0.7687929999999881, 
   " secs."],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.006824000000023034`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Free algorithm applied in ", 0.006824000000023034, " secs."],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Dummy algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.08515599999998358`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Dummy algorithm applied in ", 0.08515599999998358, " secs."],
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "6", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["and this is the answer given by Renato:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TranslatePerm", "[", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "3", ",", "2", ",", "5", ",", "4", ",", "9", ",", "6", ",", 
       "11", ",", "7", ",", "10", ",", "8", ",", "12"}], "}"}], "]"}]}], ",", 
   "Cycles"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Cycles", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"7", ",", "9", ",", "6"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"11", ",", "8"}], "}"}]}], "]"}]}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"System`Cycles", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "9", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "8"}], "}"}]}], "}"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"System`Cycles", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "7", ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "11"}], "}"}]}], "}"}], "]"}]}]], "Output"]
}, Open  ]],

Cell["Without ordering the base we get a different result:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{"sperm", ",", "12", ",", "GS", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "6"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"7", ",", "8"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"9", ",", "10"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"11", ",", "12"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
      "}"}], ",", 
     RowBox[{"TimeVerbose", "\[Rule]", "True"}], ",", 
     RowBox[{"OrderedBase", "\[Rule]", "False"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "3", ",", "2", ",", "12", ",", "5", ",", "4", ",", "7", ",", 
       "10", ",", "9", ",", "6", ",", "11", ",", "8"}], "}"}], "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"SGS for group of order \"\>", "\[InvisibleSpace]", "1024", 
   "\[InvisibleSpace]", "\<\" computed in \"\>", "\[InvisibleSpace]", 
   "0.45353499999998803`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm[
  "SGS for group of order ", 1024, " computed in ", 0.45353499999998803`, 
   " secs."],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.004100000000022419`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Free algorithm applied in ", 0.004100000000022419, " secs."],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Dummy algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.13796699999997486`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Dummy algorithm applied in ", 0.13796699999997486`, " secs."],
  
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "7", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TranslatePerm", "[", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "3", ",", "2", ",", "12", ",", "5", ",", "4", ",", "7", ",", 
       "10", ",", "9", ",", "6", ",", "11", ",", "8"}], "}"}], "]"}]}], ",", 
   "Cycles"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Cycles", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6", ",", "10", ",", "8", ",", "12", ",", "4"}], "}"}]}], 
   "]"}]}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"System`Cycles", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "10", ",", "8", ",", "12", ",", "4"}], "}"}]}], "}"}],
    "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"System`Cycles", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "6", ",", "10", ",", "8", ",", "12"}], "}"}]}], "}"}],
    "]"}]}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{
     RowBox[{"TranslatePerm", "[", 
      RowBox[{"sperm", ",", "Rules"}], "]"}], ",", "12", ",", 
     RowBox[{"TranslatePerm", "[", 
      RowBox[{"GS", ",", "Rules"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "6"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"7", ",", "8"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"9", ",", "10"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"11", ",", "12"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
      "}"}], ",", 
     RowBox[{"TimeVerbose", "\[Rule]", "True"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Rules", "[", 
     RowBox[{
      RowBox[{"2", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "2"}], ",", 
      RowBox[{"4", "\[Rule]", "5"}], ",", 
      RowBox[{"5", "\[Rule]", "4"}], ",", 
      RowBox[{"6", "\[Rule]", "7"}], ",", 
      RowBox[{"7", "\[Rule]", "9"}], ",", 
      RowBox[{"8", "\[Rule]", "11"}], ",", 
      RowBox[{"9", "\[Rule]", "6"}], ",", 
      RowBox[{"11", "\[Rule]", "8"}]}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"SGS for group of order \"\>", "\[InvisibleSpace]", "1024", 
   "\[InvisibleSpace]", "\<\" computed in \"\>", "\[InvisibleSpace]", 
   "0.5596650000000238`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm[
  "SGS for group of order ", 1024, " computed in ", 0.5596650000000238, 
   " secs."],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.005656999999985146`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Free algorithm applied in ", 0.005656999999985146, " secs."],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Dummy algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.07931099999998992`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Dummy algorithm applied in ", 0.07931099999998992, " secs."],
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "8", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["A trivial case:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", "4", 
     ",", 
     RowBox[{"GenSet", "[", "]"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
      "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "9", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["More examples:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"6", ",", "5", ",", "4", ",", "3", ",", "2", ",", "1"}], "}"}],
       "]"}], ",", "6", ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"3", ",", "5"}], "}"}], "]"}]}], ",", 
       RowBox[{"-", 
        RowBox[{"Cycles", "[", 
         RowBox[{"{", 
          RowBox[{"5", ",", "6"}], "}"}], "]"}]}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
     ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"OrderedBase", "\[Rule]", "True"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5", ",", "4", ",", "6", ",", "2", ",", "1"}], "}"}], 
     "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "10", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"CanonicalPerm", "[", 
   RowBox[{
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"6", ",", "5", ",", "4", ",", "3", ",", "2", ",", "1"}], "}"}], 
     "]"}], ",", "6", ",", 
    RowBox[{"GenSet", "[", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "5"}], "}"}], "]"}]}], ",", 
      RowBox[{"-", 
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"5", ",", "6"}], "}"}], "]"}]}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
    ",", 
    RowBox[{"{", "}"}]}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.02419100000000000069699801485967327608`4.404253734742182", ",", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5", ",", "4", ",", "6", ",", "2", ",", "1"}], "}"}], 
     "]"}]}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"CanonicalPerm", "[", 
   RowBox[{
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"6", ",", "5", ",", "4", ",", "3", ",", "2", ",", "1"}], "}"}], 
     "]"}], ",", "6", ",", 
    RowBox[{"Antisymmetric", "[", 
     RowBox[{"{", 
      RowBox[{"5", ",", "3", ",", "6"}], "}"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
    ",", 
    RowBox[{"{", "}"}]}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.00362199999999999978569920067172915878`3.5795483592576636", ",", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5", ",", "4", ",", "6", ",", "2", ",", "1"}], "}"}], 
     "]"}]}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"CanonicalPerm", "[", 
   RowBox[{
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "1", ",", "4"}], "}"}], "]"}], ",", "4", 
    ",", 
    RowBox[{"RiemannSymmetric", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
    RowBox[{"{", "}"}]}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.00283300000000000001473821065189895307`3.4728464878000613", ",", 
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], "]"}]}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Note the differences in timings with respect to the permuted points and the \
option OrderedBase:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"CanonicalPerm", "[", 
   RowBox[{
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], "]"}], ",", "4", ",", 
    RowBox[{"RiemannSymmetric", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
    RowBox[{"Range", "[", "4", "]"}], ",", 
    RowBox[{"{", "}"}]}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00266300000000000000252575738102223113`3.445971079718565", ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "3"}], "}"}], "]"}]}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"CanonicalPerm", "[", 
   RowBox[{
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], "]"}], ",", "4", ",", 
    RowBox[{"RiemannSymmetric", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
    RowBox[{"Range", "[", "4", "]"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"OrderedBase", "\[Rule]", "False"}]}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00276599999999999979563569674212430982`3.462452089052916", ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "3"}], "}"}], "]"}]}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"CanonicalPerm", "[", 
   RowBox[{
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"1001", ",", "1003"}], "}"}], "]"}], ",", "1004", ",", 
    RowBox[{"RiemannSymmetric", "[", 
     RowBox[{"{", 
      RowBox[{"1001", ",", "1002", ",", "1003", ",", "1004"}], "}"}], "]"}], 
    ",", 
    RowBox[{"Range", "[", "1004", "]"}], ",", 
    RowBox[{"{", "}"}]}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "11.94276400000000037948666431475430727005`7.097704763609809", ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"1002", ",", "1004", ",", "1003"}], "}"}], "]"}]}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"CanonicalPerm", "[", 
   RowBox[{
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"1001", ",", "1003"}], "}"}], "]"}], ",", "1004", ",", 
    RowBox[{"RiemannSymmetric", "[", 
     RowBox[{"{", 
      RowBox[{"1001", ",", "1002", ",", "1003", ",", "1004"}], "}"}], "]"}], 
    ",", 
    RowBox[{"Range", "[", "1004", "]"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"OrderedBase", "\[Rule]", "False"}]}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.03801899999999999724131782841141102836`4.600600602868664", ",", 
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"1002", ",", "1004", ",", "1003"}], "}"}], "]"}]}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\<\
The point is that the base in the OrderedBase\[Rule]True case has 1004 \
points, but the base in the OrderedBase\[Rule]False case has only 2 points!\
\>", "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["5.4. Transversals", "Subsection"],

Cell[CellGroupData[{

Cell["5.4.1. Right coset transversals", "Subsubsection"],

Cell["\<\
Given a SGS of a subgroup of S[n], we want to construct a transversal of \
representatives of the right cosets. We do it by generation of random \
permutations.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"nosign", "[", 
    RowBox[{"-", "x_"}], "]"}], ":=", "x"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"nosign", "[", "x_", "]"}], ":=", "x"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RightTransversal"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"RightTransversal[SGS, deg] returns a sorted list of \
permutations containing the canonical representative of each right coset of \
SGS in the symmetric group of degree deg. The choice of representative is \
based in the order induced on the permutations by the base of the SGS. \
RightTransversal[GS, deg] returns the same thing by first using SchreierSims.\
\"\>", "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3567978234-5455693"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"RightTransversal", "[", "x_", "]"}], ":=", 
   RowBox[{"RightTransversal", "[", 
    RowBox[{"x", ",", 
     RowBox[{"PermLength", "[", "x", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RightTransversal", "[", 
    RowBox[{"GS_GenSet", ",", "len_Integer"}], "]"}], ":=", 
   RowBox[{"RightTransversal", "[", 
    RowBox[{
     RowBox[{"SchreierSims", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "GS", ",", "len"}], "]"}], ",", "len"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RightTransversal", "[", 
    RowBox[{
     RowBox[{"SGS", ":", 
      RowBox[{"StrongGenSet", "[", 
       RowBox[{"base_", ",", "GS_GenSet"}], "]"}]}], ",", "len_Integer"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"length", "=", 
        RowBox[{
         RowBox[{"len", "!"}], "/", 
         RowBox[{"OrderOfGroup", "[", "SGS", "]"}]}]}], ",", 
       RowBox[{"list", "=", 
        RowBox[{"{", "}"}]}], ",", "perm", ",", 
       RowBox[{"not", "=", 
        RowBox[{"NotationOfPerm", "[", "SGS", "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "list", "]"}], "<", "length"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"perm", "=", 
          RowBox[{"nosign", "[", 
           RowBox[{"First", "@", 
            RowBox[{"RightCosetRepresentative", "[", 
             RowBox[{
              RowBox[{"RandomPerm", "[", 
               RowBox[{"len", ",", "not"}], "]"}], ",", "len", ",", "SGS"}], 
             "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{"list", ",", "perm"}], "]"}], ",", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"list", ",", "perm"}], "]"}]}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"PermSort", "[", "list", "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"RightTransversal", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "RightTransversal", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RightTransversal", "[", 
  RowBox[{
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"RiemannSymmetric", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"Perm", ",", "4"}], "}"}]}], "]"}], ",", "4"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], "]"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RightTransversal", "[", 
  RowBox[{
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}], "]"}], 
   ",", "4"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "4", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "1", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}]}], 
  "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["5.4.2. Left coset transversals", "Subsubsection"],

Cell["\<\
Using the same algorithm we can construct left transversals, where now the \
canonical representative is chosen according to the order of the inverses.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"LeftTransversal", "[", "x_", "]"}], ":=", 
   RowBox[{"LeftTransversal", "[", 
    RowBox[{"x", ",", 
     RowBox[{"PermLength", "[", "x", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"LeftTransversal", "[", 
    RowBox[{"GS_GenSet", ",", "len_Integer"}], "]"}], ":=", 
   RowBox[{"LeftTransversal", "[", 
    RowBox[{
     RowBox[{"SchreierSims", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "GS", ",", "len"}], "]"}], ",", "len"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"LeftTransversal", "[", 
    RowBox[{
     RowBox[{"SGS", ":", 
      RowBox[{"StrongGenSet", "[", 
       RowBox[{"base_", ",", "GS_GenSet"}], "]"}]}], ",", "len_Integer"}], 
    "]"}], ":=", 
   RowBox[{"InversePerm", "/@", 
    RowBox[{"RightTransversal", "[", 
     RowBox[{"SGS", ",", "len"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetNumberOfArguments", "[", 
   RowBox[{"LeftTransversal", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "LeftTransversal", "]"}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["5.4.3. Double coset transversals", "Subsubsection"],

Cell["\<\
Suppose we are given two subgroups H and K of the group G. Each double coset \
of H and K in G is a union of several left cosets of K in G and also a union \
of several right cosets of H in G. There is no overlap among double cosets \
and hence they also partition the whole group, but they do not all have the \
same size and therefore there is no Lagrange theorem for double cosets. This \
makes the computation of the number of double cosets a nontrivial problem.

Here we construct a very simple enumerator (which performs badly when the \
subgroups H and K have very large index in the group G). As we did with the \
single coset transversals we shall assume that the group G is the full \
symmetric group of the degrees of H and K. We also assume that the subgroup K \
is of the special D-type above because the DoubleCosetRepresentative \
algorithm is used in the process.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allcases", "[", 
   RowBox[{
   "leftlist_", ",", "rightlist_", ",", "SGSS_", ",", "dummysets_", ",", 
    "len_", ",", "invert_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"list", "=", 
       RowBox[{"{", "}"}]}], ",", "lcount", ",", "rcount", ",", "product", 
      ",", "invproduct", ",", "canon", ",", "frees", ",", "slotdummysets"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"product", "=", 
         RowBox[{"PermProduct", "[", 
          RowBox[{
           RowBox[{"leftlist", "[", 
            RowBox[{"[", "lcount", "]"}], "]"}], ",", 
           RowBox[{"rightlist", "[", 
            RowBox[{"[", "rcount", "]"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"invert", ",", 
          RowBox[{"product", "=", 
           RowBox[{"InversePerm", "[", "product", "]"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"slotdummysets", "=", 
         RowBox[{"dummysets", "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"Dummyset", "[", 
              RowBox[{"m_", ",", "pairs_", ",", "mQ_"}], "]"}], 
             "\[RuleDelayed]", 
             RowBox[{"DummySet", "[", 
              RowBox[{"m", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"OnPoints", "[", 
                  RowBox[{"#", ",", "product"}], "]"}], "&"}], "/@", 
                "pairs"}], ",", "mQ"}], "]"}]}], ",", 
            RowBox[{
             RowBox[{"RepeatedSet", "[", "list_", "]"}], "\[RuleDelayed]", 
             RowBox[{"RepeatedSet", "[", 
              RowBox[{"OnPoints", "[", 
               RowBox[{"list", ",", "product"}], "]"}], "]"}]}]}], "}"}]}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"frees", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{
           RowBox[{"Range", "[", "len", "]"}], ",", 
           RowBox[{"Union", "[", 
            RowBox[{"slotdummysets", "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"Dummyset", "[", 
                 RowBox[{"_", ",", "pairs_", ",", "_"}], "]"}], 
                "\[RuleDelayed]", 
                RowBox[{"Sequence", "@@", "pairs"}]}], ",", 
               RowBox[{
                RowBox[{"RepeatedSet", "[", "list_", "]"}], "\[RuleDelayed]", 
                "list"}]}], "}"}]}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"canon", "=", 
         RowBox[{"CanonicalPerm", "[", 
          RowBox[{
          "product", ",", "len", ",", "SGSS", ",", "frees", ",", 
           "slotdummysets"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"invert", ",", 
          RowBox[{"canon", "=", 
           RowBox[{"InversePerm", "[", "canon", "]"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"FreeQ", "[", 
           RowBox[{"list", ",", "canon"}], "]"}], ",", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"list", ",", "canon"}], "]"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"lcount", ",", "1", ",", 
         RowBox[{"Length", "[", "leftlist", "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"rcount", ",", "1", ",", 
         RowBox[{"Length", "[", "rightlist", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "list"}]}], "]"}]}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"DoubleTransversal", "[", 
    RowBox[{"SGSS_StrongGenSet", ",", "dummysets_", ",", "len_Integer"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"transversal", ",", 
       RowBox[{"SGSD", "=", 
        RowBox[{"SGSOfDummy", "[", "dummysets", "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"OrderOfGroup", "[", "SGSS", "]"}], " ", 
         RowBox[{"Length", "[", 
          RowBox[{"SGSD", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "<", 
        RowBox[{
         RowBox[{"OrderOfGroup", "[", "SGSS", "]"}], " ", 
         RowBox[{"Length", "[", 
          RowBox[{"SGSS", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Construct", " ", "right", " ", "transversal", " ", "of", " ", "S", 
         " ", "and", " ", "multiply", " ", "by", " ", "D", " ", "generators", 
         " ", "on", " ", "the", " ", "right"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"transversal", "=", 
         RowBox[{"RightTransversal", "[", 
          RowBox[{"SGSS", ",", "len"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"allcases", "[", 
         RowBox[{"transversal", ",", 
          RowBox[{"SGSD", "[", 
           RowBox[{"[", "2", "]"}], "]"}], ",", "SGSS", ",", "dummysets", ",",
           "len", ",", "True"}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Construct", " ", "left", " ", "transversal", " ", "of", " ", "D", 
         " ", "and", " ", "multiply", " ", "by", " ", "S", " ", "generators", 
         " ", "on", " ", "the", " ", "left"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"transversal", "=", 
         RowBox[{"LeftTransversal", "[", 
          RowBox[{"SGSD", ",", "len"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"allcases", "[", 
         RowBox[{
          RowBox[{"SGSS", "[", 
           RowBox[{"[", "2", "]"}], "]"}], ",", "transversal", ",", "SGSS", 
          ",", "dummysets", ",", "len", ",", "False"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DoubleTransversal", "[", 
    RowBox[{"Sgroup_StrongGenSet", ",", "Dgroup_", ",", "n_Integer"}], "]"}], 
   ":=", 
   RowBox[{"DoubleTransversal", "[", 
    RowBox[{"Sgroup", ",", 
     RowBox[{"SGSOfDummySet", "[", "Dgroup", "]"}], ",", "n"}], "]"}]}], 
  ";"}]}], "Input"]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["6. MathLink connection",
 FontColor->RGBColor[0, 0, 1]]], "Section",
 FontSize->24],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"**", "**", "**", "**", "**", "**", "**", "**", "**", "**"}], "*", 
   " ", "6.", " ", "MathLink", " ", "connection"}], " ", 
  "*********************)"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"TimeUsed", "[", "]"}], ",", 
   RowBox[{"SessionTime", "[", "]"}], ",", 
   RowBox[{
    RowBox[{"TimeUsed", "[", "]"}], "/", 
    RowBox[{"SessionTime", "[", "]"}]}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "230.717467`", ",", "288.617267`8.911867303408322", ",", 
   "0.7993890289823281`"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.0. Comments", "Subsection"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{"$ReadingVerbose", ",", 
   RowBox[{
   "Print", "[", "\"\<Reading section 6: MathLink connection\>\"", "]"}], ",",
    "Null", ",", "Null"}], "]"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["6.1. Check connection", "Subsection"],

Cell[TextData[{
 "This code installs xperm, printing messages on the process, and sets the \
global variable $xpermQ to True if the connection was successful, or to False \
if it failed (perhaps because the system is not Linux , Mac or Windows). \
Recall that linking is only possible for Windows starting version 6.0 of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". Actually it is possible to link from previous versions of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " if you have access to the ",
 StyleBox["MathLink",
  FontSlant->"Italic"],
 " library ml32i3.dll."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData["$xActDirectory"], "Input"],

Cell[BoxData["\<\"/Users/jose/Library/Mathematica/Applications/xAct\"\>"], \
"Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"xpermConnect", ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"version", "=", "System`$Version"}], ",", 
       RowBox[{"number", "=", "System`$VersionNumber"}], ",", "result", ",", 
       "message", ",", 
       RowBox[{"dir", "=", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"$xActDirectory", ",", "\"\</xPerm/mathlink/\>\""}], 
         "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Which", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"StringMatchQ", "[", 
         RowBox[{"version", ",", "\"\<*Windows*\>\""}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"number", "\[GreaterEqual]", "6.0"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "message", "=", 
            "\"\<Connecting to external MinGW executable...\>\""}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"result", "=", "True"}], ";", "\[IndentingNewLine]", 
           RowBox[{"$xpermExecutable", "=", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"StringMatchQ", "[", 
               RowBox[{"version", ",", "\"\<*64-bit*\>\""}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"StringJoin", "[", 
               RowBox[{"dir", ",", "\"\<xperm.win64\>\""}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"StringJoin", "[", 
               RowBox[{"dir", ",", "\"\<xperm.win32\>\""}], "]"}]}], 
             "\[IndentingNewLine]", "]"}]}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "message", "=", 
            "\"\<Pre-6 versions of Mathematica for Windows do not link to \
MinGW.\>\""}], ";", "\[IndentingNewLine]", 
           RowBox[{"result", "=", "False"}]}]}], "\[IndentingNewLine]", "]"}],
         ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"StringMatchQ", "[", 
         RowBox[{"version", ",", "\"\<*Linux*\>\""}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "message", "=", 
          "\"\<Connecting to external linux executable...\>\""}], ";", 
         RowBox[{"result", "=", "True"}], ";", "\[IndentingNewLine]", 
         RowBox[{"$xpermExecutable", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"number", "\[GreaterEqual]", "6.0"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"StringMatchQ", "[", 
               RowBox[{"version", ",", "\"\<*64-bit*\>\""}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"StringJoin", "[", 
               RowBox[{"dir", ",", "\"\<xperm.linux.64-bit\>\""}], "]"}], ",",
               "\[IndentingNewLine]", 
              RowBox[{"StringJoin", "[", 
               RowBox[{"dir", ",", "\"\<xperm.linux.32-bit\>\""}], "]"}]}], 
             "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"StringJoin", "[", 
             RowBox[{"dir", ",", "\"\<xperm.linux.pre6\>\""}], "]"}]}], 
           "\[IndentingNewLine]", "]"}]}]}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"StringMatchQ", "[", 
         RowBox[{"version", ",", "\"\<*Mac*\>\""}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "message", "=", "\"\<Connecting to external mac executable...\>\""}],
          ";", 
         RowBox[{"result", "=", "True"}], ";", 
         RowBox[{"$xpermExecutable", "=", 
          RowBox[{"StringJoin", "[", 
           RowBox[{
           "$xActDirectory", ",", "\"\</xPerm/mathlink/xperm.mac\>\""}], 
           "]"}]}]}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "True", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "message", "=", 
          "\"\<Unsupported system. Contact JMM to compile.\>\""}], ";", 
         RowBox[{"result", "=", "False"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", "message", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"result", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Check", "[", 
          RowBox[{
           RowBox[{"$xpermLink", "=", 
            RowBox[{"Install", "[", "$xpermExecutable", "]"}]}], ",", 
           RowBox[{"result", "=", "False"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{"If", "[", 
           RowBox[{
           "result", ",", "\"\<Connection established.\>\"", ",", 
            "\"\<Connection failed.\>\""}], "]"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "result"}]}], "\[IndentingNewLine]",
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$xpermQ", "=", "xpermConnect"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData["\<\"Connecting to external mac executable...\"\>"], "Print"],

Cell[BoxData["\<\"Connection established.\"\>"], "Print"]
}, Open  ]]
}, Open  ]],

Cell["We have defined three global variables:", "Text"],

Cell[CellGroupData[{

Cell[BoxData["$xpermExecutable"], "Input"],

Cell[BoxData["\<\"/Users/jose/Library/Mathematica/Applications/xAct/xPerm/\
mathlink/xperm.mac\"\>"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["$xpermLink"], "Input"],

Cell[BoxData[
 RowBox[{"LinkObject", "[", 
  RowBox[{"\<\"/Users/jose/Library/Mathematica/Applications/xAct/xPerm/\
mathlink/xperm.mac\"\>", ",", "18883", ",", "4"}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["$xpermQ"], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LinkPatterns", "[", "$xpermLink", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"MLSchreierSims", "[", 
     RowBox[{"base_List", ",", "GS_List", ",", "n_Integer"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"MLOrbit", "[", 
     RowBox[{"point_Integer", ",", "GS_List", ",", "n_Integer"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"MLCanonicalPerm", "[", 
     RowBox[{
     "perm_List", ",", "deg_Integer", ",", "SGSQ_Integer", ",", "base_List", 
      ",", "GS_List", ",", "freeps_List", ",", "vds_List", ",", 
      "dummies_List", ",", "mQ_List", ",", "vrs_List", ",", "repes_List"}], 
     "]"}],
    HoldForm]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
If, for any reason, the connection to the external executable is lost, this \
function can detect it, reconnect to the executable and repeat the \
computation. Currently only MLCanonicalPerm is wrapped with it:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"CheckDeadLink", ",", "HoldFirst"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CheckDeadLink", "[", "expr_", "]"}], ":=", 
   RowBox[{"Check", "[", 
    RowBox[{"expr", ",", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{"\"\<Failed computing \>\"", ",", 
        RowBox[{"Hold", "[", "expr", "]"}]}], "]"}], ";", 
      RowBox[{"$xpermQ", "=", "xpermConnect"}], ";", 
      RowBox[{"Print", "[", "\"\<Reconnected and recomputing\>\"", "]"}], ";", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"result", "=", 
          RowBox[{"CheckDeadLink", "[", "expr", "]"}]}], "}"}], ",", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<Result is \>\"", ",", "result"}], "]"}], ";", 
         "result"}]}], "]"}]}], ",", 
     RowBox[{"LinkObject", "::", "linkd"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["6.2. Connecting functions", "Subsection"],

Cell["\<\
We need to change the formats to connect to xperm.c via MathLink:\
\>", "Text"],

Cell[CellGroupData[{

Cell["6.2.0. FromSign, ToSign", "Subsubsection"],

Cell["These are two private functions.", "Text"],

Cell["\<\
We can simulate the existence of signature in permutations of degree n adding \
two more points n+1 and n+2. Canonical order of those two points means \
positive signature and reverse order means negative signature. None of the \
permutations in the problem can mix those two points with the rest of points, \
so that they form a single orbit.\
\>", "Text"],

Cell["\<\
The full identity will be always a member of the group. We always need to \
check wheter the reduced identity with negative signature is present or not, \
using the membership algorithm.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ToSign", "[", 
    RowBox[{
     RowBox[{"perm", ":", 
      RowBox[{"Perm", "[", "list_", "]"}]}], ",", "len_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"OnPoints", "[", 
        RowBox[{
         RowBox[{"len", "+", "1"}], ",", "perm"}], "]"}], "===", 
       RowBox[{"len", "+", "1"}]}], ",", "1", ",", 
      RowBox[{"-", "1"}]}], "]"}], 
    RowBox[{"Perm", "[", 
     RowBox[{"Drop", "[", 
      RowBox[{"list", ",", 
       RowBox[{"-", "2"}]}], "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ToSign", "[", 
    RowBox[{"perm_Rules", ",", "len_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"OnPoints", "[", 
        RowBox[{
         RowBox[{"len", "+", "1"}], ",", "perm"}], "]"}], "===", 
       RowBox[{"len", "+", "1"}]}], ",", "1", ",", 
      RowBox[{"-", "1"}]}], "]"}], 
    RowBox[{"DeleteCases", "[", 
     RowBox[{"perm", ",", 
      RowBox[{"_", "[", 
       RowBox[{"___", ",", 
        RowBox[{"len", "+", "1"}], ",", "___"}], "]"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ToSign", "[", 
    RowBox[{"perm_Cycles", ",", "len_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"OnPoints", "[", 
        RowBox[{
         RowBox[{"len", "+", "1"}], ",", "perm"}], "]"}], "===", 
       RowBox[{"len", "+", "1"}]}], ",", "1", ",", 
      RowBox[{"-", "1"}]}], "]"}], 
    RowBox[{"DeleteCases", "[", 
     RowBox[{"perm", ",", 
      RowBox[{"{", 
       RowBox[{"___", ",", 
        RowBox[{"len", "+", "1"}], ",", "___"}], "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ToSign", "[", 
    RowBox[{
     RowBox[{"perm", ":", 
      RowBox[{"Images", "[", "list_", "]"}]}], ",", "len_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"OnPoints", "[", 
        RowBox[{
         RowBox[{"len", "+", "1"}], ",", "perm"}], "]"}], "===", 
       RowBox[{"len", "+", "1"}]}], ",", "1", ",", 
      RowBox[{"-", "1"}]}], "]"}], 
    RowBox[{"Images", "[", 
     RowBox[{"Drop", "[", 
      RowBox[{"list", ",", 
       RowBox[{"-", "2"}]}], "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ToSign", "[", 
    RowBox[{"GS_GenSet", ",", "len_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"ToSign", "[", 
      RowBox[{"#", ",", "len"}], "]"}], "&"}], "/@", "GS"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ToSign", "[", 
    RowBox[{
     RowBox[{"StrongGenSet", "[", 
      RowBox[{"base_", ",", "GS_"}], "]"}], ",", "len_"}], "]"}], ":=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"DeleteCases", "[", 
      RowBox[{"base", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"len", "+", "1"}], ")"}], "|", 
        RowBox[{"(", 
         RowBox[{"len", "+", "2"}], ")"}]}]}], "]"}], ",", 
     RowBox[{"ToSign", "[", 
      RowBox[{"GS", ",", "len"}], "]"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
Note the pattern _[___,len+1,___] instead of the more specific \
Rule[___,len+1,___]. The latter complains about Rule having three arguments \
instead of two.\
\>", "Text"],

Cell["Examples:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToSign", "[", 
  RowBox[{
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{
     "3", ",", "4", ",", "5", ",", "1", ",", "2", ",", "6", ",", "7"}], "}"}],
     "]"}], ",", "5"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Perm", "[", 
  RowBox[{"{", 
   RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "2"}], "}"}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToSign", "[", 
  RowBox[{
   RowBox[{"Perm", "[", 
    RowBox[{"{", 
     RowBox[{
     "3", ",", "4", ",", "5", ",", "1", ",", "2", ",", "7", ",", "6"}], "}"}],
     "]"}], ",", "5"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Perm", "[", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "2"}], "}"}], 
   "]"}]}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToSign", "[", 
  RowBox[{
   RowBox[{"Rules", "[", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "3"}], ",", 
     RowBox[{"3", "\[Rule]", "1"}]}], "]"}], ",", "5"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Rules", "[", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "3"}], ",", 
   RowBox[{"3", "\[Rule]", "1"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToSign", "[", 
  RowBox[{
   RowBox[{"Rules", "[", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "3"}], ",", 
     RowBox[{"3", "\[Rule]", "1"}], ",", 
     RowBox[{"6", "\[Rule]", "7"}], ",", 
     RowBox[{"7", "\[Rule]", "6"}]}], "]"}], ",", "5"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Rules", "[", 
   RowBox[{
    RowBox[{"1", "\[Rule]", "3"}], ",", 
    RowBox[{"3", "\[Rule]", "1"}]}], "]"}]}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToSign", "[", 
  RowBox[{
   RowBox[{"Cycles", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}], "]"}], ",", "5"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Cycles", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "3"}], "}"}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToSign", "[", 
  RowBox[{
   RowBox[{"Cycles", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", "5"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Cycles", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], "]"}]}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToSign", "[", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "3", ",", "2", ",", "4", ",", "5", ",", "6", ",", "7"}], "}"}],
     "]"}], ",", "5"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Images", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5"}], "}"}], 
  "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToSign", "[", 
  RowBox[{
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "3", ",", "2", ",", "4", ",", "5", ",", "7", ",", "6"}], "}"}],
     "]"}], ",", "5"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Images", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5"}], "}"}], 
   "]"}]}]], "Output"]
}, Open  ]],

Cell["Inverse function:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"FromSign", "[", 
    RowBox[{
     RowBox[{"s_.", 
      RowBox[{"Perm", "[", "perm_", "]"}]}], ",", "len_"}], "]"}], ":=", 
   RowBox[{"Perm", "[", 
    RowBox[{"perm", "~", "Join", "~", 
     RowBox[{"(", 
      RowBox[{"len", "+", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"s", ">", "0"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1"}], "}"}]}], "]"}]}], ")"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FromSign", "[", 
    RowBox[{
     RowBox[{"s_.", 
      RowBox[{"Rules", "[", "rules___", "]"}]}], ",", "len_"}], "]"}], ":=", 
   RowBox[{"Rules", "@@", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"s", "<", "0"}], ",", 
      RowBox[{"{", 
       RowBox[{"rules", ",", 
        RowBox[{
         RowBox[{"len", "+", "1"}], "\[Rule]", 
         RowBox[{"len", "+", "2"}]}], ",", 
        RowBox[{
         RowBox[{"len", "+", "2"}], "\[Rule]", 
         RowBox[{"len", "+", "1"}]}]}], "}"}], ",", 
      RowBox[{"{", "rules", "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FromSign", "[", 
    RowBox[{
     RowBox[{"s_.", 
      RowBox[{"Cycles", "[", "cycs___", "]"}]}], ",", "len_"}], "]"}], ":=", 
   RowBox[{"Cycles", "@@", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"s", "<", "0"}], ",", 
      RowBox[{"{", 
       RowBox[{"cycs", ",", 
        RowBox[{"len", "+", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}]}]}], "}"}], ",", 
      RowBox[{"{", "cycs", "}"}]}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FromSign", "[", 
    RowBox[{
     RowBox[{"s_.", 
      RowBox[{"Images", "[", "perm_", "]"}]}], ",", "len_"}], "]"}], ":=", 
   RowBox[{"Images", "[", 
    RowBox[{"perm", "~", "Join", "~", 
     RowBox[{"(", 
      RowBox[{"len", "+", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"s", ">", "0"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1"}], "}"}]}], "]"}]}], ")"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FromSign", "[", 
    RowBox[{"GS_GenSet", ",", "len_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"FromSign", "[", 
      RowBox[{"#", ",", "len"}], "]"}], "&"}], "/@", "GS"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FromSign", "[", 
    RowBox[{
     RowBox[{"StrongGenSet", "[", 
      RowBox[{"base_", ",", "GS_"}], "]"}], ",", "len_"}], "]"}], ":=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"FreeQ", "[", 
         RowBox[{"GS", ",", 
          RowBox[{"-", "1"}]}], "]"}]}], ",", 
       RowBox[{"Append", "[", 
        RowBox[{"base", ",", 
         RowBox[{"len", "+", "1"}]}], "]"}], ",", "base"}], "]"}], ",", 
     RowBox[{"FromSign", "[", 
      RowBox[{"GS", ",", "len"}], "]"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell["Examples:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromSign", "[", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "2"}], "}"}], "]"}]}], 
   ",", "5"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Perm", "[", 
  RowBox[{"{", 
   RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "2", ",", "7", ",", "6"}], 
   "}"}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromSign", "[", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{"Rules", "[", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "1"}]}], "]"}]}], ",", "5"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Rules", "[", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "3"}], ",", 
   RowBox[{"3", "\[Rule]", "1"}], ",", 
   RowBox[{"6", "\[Rule]", "7"}], ",", 
   RowBox[{"7", "\[Rule]", "6"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromSign", "[", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{"Cycles", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], "]"}]}], ",", "5"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Cycles", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "7"}], "}"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromSign", "[", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5"}], "}"}], "]"}]}], 
   ",", "5"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Images", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5", ",", "7", ",", "6"}], 
   "}"}], "]"}]], "Output"]
}, Open  ]],

Cell["\<\
This function converts permutations into lists of images, including the final \
sign cycle, and generating sets into a single list with all permutations in \
Images notation with length len+2.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"toimagelist", "[", "len_", "]"}], "[", "GS_GenSet", "]"}], ":=", 
   
   RowBox[{"Flatten", "@", 
    RowBox[{"Apply", "[", 
     RowBox[{"List", ",", 
      RowBox[{
       RowBox[{"toimagelist", "[", "len", "]"}], "/@", "GS"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"toimagelist", "[", "len_", "]"}], "[", "sperm_", "]"}], ":=", 
   RowBox[{"Identity", "@@", 
    RowBox[{"TranslatePerm", "[", 
     RowBox[{
      RowBox[{"FromSign", "[", 
       RowBox[{"sperm", ",", "len"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"Images", ",", 
        RowBox[{"len", "+", "2"}]}], "}"}]}], "]"}]}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["6.2.1. MathLinkOrbit", "Subsubsection"],

Cell["Input to MLOrbit:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MathLinkOrbit", "[", 
    RowBox[{"point_", ",", "GS_GenSet"}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"len", "=", 
       RowBox[{"Max", "[", 
        RowBox[{"point", ",", 
         RowBox[{"PermDeg", "[", "GS", "]"}]}], "]"}]}], "}"}], ",", 
     RowBox[{"MLOrbit", "[", 
      RowBox[{"point", ",", 
       RowBox[{
        RowBox[{"toimagelist", "[", "len", "]"}], "[", "GS", "]"}], ",", 
       RowBox[{"len", "+", "2"}]}], "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["6.2.2. MathLinkSchreierSims", "Subsubsection"],

Cell["Input to MLSchreierSims:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MathLinkSchreierSims", "[", 
    RowBox[{
    "initbase_List", ",", "GS_GenSet", ",", "len_Integer", ",", 
     "options___"}], "]"}], ":=", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"ToSign", "[", 
      RowBox[{
       RowBox[{"MLSchreierSims", "[", 
        RowBox[{"initbase", ",", 
         RowBox[{
          RowBox[{"toimagelist", "[", "len", "]"}], "[", "GS", "]"}], ",", 
         RowBox[{"len", "+", "2"}]}], "]"}], ",", "len"}], "]"}], ",", 
     RowBox[{"NotationOfPerm", "[", "GS", "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell["\<\
Output from MLSchreierSims. Note the special role of the Images notation:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Unprotect", "[", "StrongGenSet", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"base", ":", 
      RowBox[{"{", "___Integer", "}"}]}], ",", 
     RowBox[{"GS", ":", 
      RowBox[{"{", "___Integer", "}"}]}], ",", "len_Integer"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Select", "[", 
         RowBox[{"base", ",", 
          RowBox[{
           RowBox[{"#", ">", "len"}], "&"}]}], "]"}], "=!=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{
       "Print", "[", "\"\<Computed SGS contains -Cycles[].\>\"", "]"}]}], 
      "]"}], ";", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{"base", ",", 
       RowBox[{"GenSet", "@@", 
        RowBox[{"(", 
         RowBox[{"Images", "/@", 
          RowBox[{"Partition", "[", 
           RowBox[{"GS", ",", "len"}], "]"}]}], ")"}]}]}], "]"}]}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "StrongGenSet", "]"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2", ",", "1", ",", "3", ",", "4", ",", "3", ",", "4", ",", "1", ",", "2",
      ",", "1", ",", "2", ",", "4", ",", "3"}], "}"}], ",", "4"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}], ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}], "]"}]}], 
  "]"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["6.2.3. MathLinkCanonicalPerm", "Subsubsection"],

Cell["\<\
We need to translate the DummySet and RepeatedSet structures into lists of \
numbers:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TranslateSet", "[", 
    RowBox[{"DummySet", "[", 
     RowBox[{"_", ",", "dums_", ",", "sym_"}], "]"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{"{", "dums", "}"}], "]"}], ",", "sym"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TranslateSet", "[", 
    RowBox[{"RepeatedSet", "[", "list_", "]"}], "]"}], ":=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"{", "list", "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"transpose", "[", 
    RowBox[{"{", "}"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"transpose", "[", "x_", "]"}], ":=", 
   RowBox[{"Transpose", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TranslateSet", "[", "list_List", "]"}], ":=", 
   RowBox[{"TranslateSetStructure", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"transpose", "[", 
       RowBox[{"TranslateSet", "/@", 
        RowBox[{"Cases", "[", 
         RowBox[{"list", ",", 
          RowBox[{"DummySet", "[", 
           RowBox[{"_", ",", 
            RowBox[{"{", "__", "}"}], ",", "_"}], "]"}]}], "]"}]}], "]"}], 
      ",", 
      RowBox[{"TranslateSet", "/@", 
       RowBox[{"Cases", "[", 
        RowBox[{"list", ",", "_RepeatedSet"}], "]"}]}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TranslateSetStructure", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"dummysets_", ",", "mQ_"}], "}"}], ",", "repeatedsets_"}], 
     "}"}], "]"}], ":=", 
   RowBox[{"Sequence", "[", 
    RowBox[{
     RowBox[{"Length", "/@", "dummysets"}], ",", 
     RowBox[{"Flatten", "[", "dummysets", "]"}], ",", "mQ", ",", 
     RowBox[{"Length", "/@", "repeatedsets"}], ",", 
     RowBox[{"Flatten", "[", "repeatedsets", "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
Transpose is a horrible function in cases like this, because it is not \
idempotent:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}]}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{"{", "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Transpose", "::", "nmtx"}], "MessageName"], ":", 
  " ", "\<\"The first two levels of the one-dimensional list \
\[NoBreak]\\!\\({}\\)\[NoBreak] cannot be transposed. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Transpose/nmtx\\\", ButtonNote -> \
\\\"Transpose::nmtx\\\"]\\)\"\>"}]], "Message", "MSG"],

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{"{", "}"}], "]"}]], "Output"]
}, Open  ]],

Cell["We replace it by transpose:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"transpose", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}]}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"transpose", "[", "%", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell["Trivial cases:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TranslateSet", "[", 
  RowBox[{"{", "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Sequence", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TranslateSet", "[", 
  RowBox[{"{", 
   RowBox[{"DummySet", "[", 
    RowBox[{"hello1", ",", 
     RowBox[{"{", "}"}], ",", "0"}], "]"}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Sequence", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TranslateSet", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"DummySet", "[", 
     RowBox[{"hello1", ",", 
      RowBox[{"{", "}"}], ",", "0"}], "]"}], ",", 
    RowBox[{"DummySet", "[", 
     RowBox[{"hello2", ",", 
      RowBox[{"{", "}"}], ",", "0"}], "]"}]}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Sequence", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["Nontrivial cases:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TranslateSet", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"DummySet", "[", 
     RowBox[{"hello1", ",", 
      RowBox[{"{", "}"}], ",", "0"}], "]"}], ",", 
    RowBox[{"DummySet", "[", 
     RowBox[{"hello2", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "6"}], "}"}]}], "}"}], ",", "1"}], "]"}]}], "}"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Sequence", "[", 
  RowBox[{
   RowBox[{"{", "6", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
   ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TranslateSet", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"DummySet", "[", 
     RowBox[{"hello1", ",", 
      RowBox[{"{", "}"}], ",", "0"}], "]"}], ",", 
    RowBox[{"RepeatedSet", "[", 
     RowBox[{"{", 
      RowBox[{"10", ",", "11", ",", "12", ",", "13"}], "}"}], "]"}], ",", 
    RowBox[{"DummySet", "[", 
     RowBox[{"hello2", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "6"}], "}"}]}], "}"}], ",", "1"}], "]"}], ",", 
    RowBox[{"RepeatedSet", "[", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8", ",", "9"}], "}"}], "]"}]}], "}"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Sequence", "[", 
  RowBox[{
   RowBox[{"{", "6", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
   ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "10", ",", "11", ",", "12", ",", "13", ",", "7", ",", "8", ",", "9"}], 
    "}"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TranslateSet", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"DummySet", "[", 
     RowBox[{"hello1", ",", 
      RowBox[{"{", "}"}], ",", "0"}], "]"}], ",", 
    RowBox[{"RepeatedSet", "[", 
     RowBox[{"{", 
      RowBox[{"10", ",", "11", ",", "12", ",", "13"}], "}"}], "]"}], ",", 
    RowBox[{"DummySet", "[", 
     RowBox[{"hello2", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "6"}], "}"}]}], "}"}], ",", "1"}], "]"}], ",", 
    RowBox[{"RepeatedSet", "[", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8", ",", "9"}], "}"}], "]"}], ",", 
    RowBox[{"DummySet", "[", 
     RowBox[{"hello3", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"14", ",", "15"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"16", ",", "17"}], "}"}]}], "}"}], ",", 
      RowBox[{"-", "1"}]}], "]"}]}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Sequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"6", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "14", ",", 
     "15", ",", "16", ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "10", ",", "11", ",", "12", ",", "13", ",", "7", ",", "8", ",", "9"}], 
    "}"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["\<\
This function detects whether we are supplying a generating set or a strong \
generating set, and proceeds accordingly:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"tosgslist", "[", 
    RowBox[{"GS_GenSet", ",", "len_", ",", "ob_"}], "]"}], ":=", 
   RowBox[{"Sequence", "[", 
    RowBox[{"0", ",", 
     RowBox[{"If", "[", 
      RowBox[{"ob", ",", 
       RowBox[{"Range", "[", "len", "]"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"toimagelist", "[", "len", "]"}], "[", "GS", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"tosgslist", "[", 
    RowBox[{
     RowBox[{"StrongGenSet", "[", 
      RowBox[{"base_List", ",", "GS_GenSet"}], "]"}], ",", "len_", ",", 
     "ob_"}], "]"}], ":=", 
   RowBox[{"Sequence", "[", 
    RowBox[{"1", ",", 
     RowBox[{"If", "[", 
      RowBox[{"ob", ",", 
       RowBox[{"takenext", "[", 
        RowBox[{"base", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"Range", "[", "len", "]"}]}], "]"}], ",", 
       RowBox[{"Append", "[", 
        RowBox[{"base", ",", 
         RowBox[{"len", "+", "1"}]}], "]"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"toimagelist", "[", "len", "]"}], "[", "GS", "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True],

Cell["\<\
Input to MLCanonicalPerm. There are two possibilities depending on whether we \
use a GS or a SGS:\
\>", "Text"],

Cell["\<\
Input structure:
\tMathLinkCanonicalPerm[
\t\tpermutation: a list in images notation with the two last points encoding \
the sign
\t\tlength: the original length of the signed permutation plus two more \
points for the sign cycle
\t\t
\t\tSGSswitch: it is 0 when the input is a GS and 1 when the input is a SGS
\t\tbase: this is the base of the SGS, or {} when we supply only a GS
\t\tob: it is 1 when we have reordered the base and 0 otherwise
\t\tGS: this is the given GS or the GS of the SGS, translated into the \
multiple lists notation
\t\t
\t\tfrees: list of free indices (those not participating in the D group)
\t\t
\t\tvds: list of lengths of the nds dummy sets (twice the number of pairs)
\t\tdummies: list of pairs of indices and the symmetry integer (all \
flattened)
\t\tmQ: list of symmetry integers
\t\tvrs: list of lengths of the nrs dummy sets
\t\trepes: list of repeated indices (all flattened)
\t]\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Options", "[", "CanonicalPerm", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"MathLink", "\[Rule]", "False"}], ",", 
   RowBox[{"TimeVerbose", "\[Rule]", "False"}], ",", 
   RowBox[{"xPermVerbose", "\[Rule]", "False"}], ",", 
   RowBox[{"OrderedBase", "\[Rule]", "True"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"MathLinkCanonicalPerm", "[", 
   RowBox[{
    RowBox[{"sperm_", "?", "PermQ"}], ",", "len_Integer", ",", "sgs_", ",", 
    "frees_List", ",", "sets_List", ",", 
    RowBox[{"options", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"verb", ",", "ob", ",", "tmp"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"verb", ",", "ob"}], "}"}], "=", 
      RowBox[{"OptionValue", "[", 
       RowBox[{"CanonicalPerm", ",", 
        RowBox[{"{", "options", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"xPermVerbose", ",", "OrderedBase"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"tmp", "=", 
      RowBox[{"TMPHead", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"toimagelist", "[", "len", "]"}], "[", "sperm", "]"}], ",", 
        RowBox[{"len", "+", "2"}], ",", "\[IndentingNewLine]", 
        RowBox[{"tosgslist", "[", 
         RowBox[{"sgs", ",", "len", ",", "ob"}], "]"}], ",", 
        "\[IndentingNewLine]", "frees", ",", "\[IndentingNewLine]", 
        RowBox[{"TranslateSet", "[", "sets", "]"}]}], "\[IndentingNewLine]", 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"verb", ",", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<MathLinkCanonicalPerm:: \>\"", ",", 
         RowBox[{"ReplacePart", "[", 
          RowBox[{
           RowBox[{"TMPHead", "[", "tmp", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"HoldForm", ",", "MLCanonicalPerm"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "0", "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "1", "}"}], ",", 
             RowBox[{"{", "2", "}"}]}], "}"}]}], "]"}]}], "]"}]}], "]"}], ";",
      "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"CheckDeadLink", "[", 
       RowBox[{"Apply", "[", 
        RowBox[{"MLCanonicalPerm", ",", "tmp"}], "]"}], "]"}], "/.", 
      RowBox[{
       RowBox[{"Images", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"(", "0", ")"}], ".."}], "}"}], "]"}], "\[Rule]", 
       "0"}]}]}]}], "]"}]}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["6.2.4. MathLinkSetStabilizer", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MathLinkSetStabilizer", "[", 
    RowBox[{"list_List", ",", "len_Integer", ",", "sgs_", ",", 
     RowBox[{"options", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"ToSign", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"verb", ",", "ob", ",", "tmp"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"verb", ",", "ob"}], "}"}], "=", 
           RowBox[{"OptionValue", "[", 
            RowBox[{"SetStabilizer", ",", 
             RowBox[{"{", "options", "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"xPermVerbose", ",", "OrderedBase"}], "}"}]}], "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"tmp", "=", 
           RowBox[{"Drop", "[", 
            RowBox[{
             RowBox[{"TMPHead", "[", "\[IndentingNewLine]", 
              RowBox[{"list", ",", "\[IndentingNewLine]", 
               RowBox[{"len", "+", "2"}], ",", "\[IndentingNewLine]", 
               RowBox[{"tosgslist", "[", 
                RowBox[{"sgs", ",", "len", ",", "ob"}], "]"}]}], 
              "\[IndentingNewLine]", "]"}], ",", 
             RowBox[{"{", "3", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"verb", ",", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<MathLinkSetStabilizer:: \>\"", ",", 
              RowBox[{"ReplacePart", "[", 
               RowBox[{
                RowBox[{"TMPHead", "[", "tmp", "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"HoldForm", ",", "MathLinkSetStabilizer"}], "}"}], 
                ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", "0", "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", "1", "}"}], ",", 
                  RowBox[{"{", "2", "}"}]}], "}"}]}], "]"}]}], "]"}]}], "]"}],
           ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"CheckDeadLink", "[", 
            RowBox[{"Apply", "[", 
             RowBox[{"MLSetStabilizer", ",", "tmp"}], "]"}], "]"}], "/.", 
           RowBox[{
            RowBox[{"Images", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"(", "0", ")"}], ".."}], "}"}], "]"}], "\[Rule]", 
            "0"}]}]}]}], "\[IndentingNewLine]", "]"}], ",", 
       "\[IndentingNewLine]", "len"}], "]"}], ",", 
     RowBox[{"NotationOfPerm", "[", "sgs", "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["6.3. Examples", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"test", "[", 
   RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
    RowBox[{"CanonicalPerm", "[", 
     RowBox[{
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "4", ",", "3"}], "}"}], "]"}], ",", "4", 
      ",", 
      RowBox[{"GenSet", "[", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Images", "[", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}]}], ",", 
        RowBox[{"Images", "[", 
         RowBox[{"{", 
          RowBox[{"4", ",", "3", ",", "2", ",", "1"}], "}"}], "]"}]}], "]"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"DummySet", "[", 
        RowBox[{"M2", ",", 
         RowBox[{"{", "}"}], ",", "0"}], "]"}], "}"}], ",", 
      RowBox[{"MathLink", "\[Rule]", "False"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], "//", "AbsoluteTiming"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.01879700000000000120747856158232025336`4.294688454702333", ",", 
   RowBox[{"{", 
    RowBox[{"CanonicalPerm", ",", "11", ",", "True"}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"test", "[", 
   RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
    RowBox[{"CanonicalPerm", "[", 
     RowBox[{
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "4", ",", "3"}], "}"}], "]"}], ",", "4", 
      ",", 
      RowBox[{"GenSet", "[", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Images", "[", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}]}], ",", 
        RowBox[{"Images", "[", 
         RowBox[{"{", 
          RowBox[{"4", ",", "3", ",", "2", ",", "1"}], "}"}], "]"}]}], "]"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"DummySet", "[", 
        RowBox[{"M2", ",", 
         RowBox[{"{", "}"}], ",", "0"}], "]"}], "}"}], ",", 
      RowBox[{"xPermVerbose", "\[Rule]", "True"}], ",", 
      RowBox[{"MathLink", "\[Rule]", "True"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], "//", "AbsoluteTiming"}]], "Input"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"MathLinkCanonicalPerm:: \"\>", "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"MLCanonicalPerm", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "4", ",", "3", ",", "5", ",", "6"}], "}"}],
       ",", "6", ",", "0", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "3", ",", "4", ",", "2", ",", "1", ",", "6", ",", "5", ",", "4", ",", 
        "3", ",", "2", ",", "1", ",", "5", ",", "6"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}]}], "]"}],
    HoldForm]}],
  SequenceForm["MathLinkCanonicalPerm:: ", 
   HoldForm[
    xAct`xPerm`Private`MLCanonicalPerm[{2, 1, 4, 3, 5, 6}, 6, 0, {1, 2, 3, 
     4}, {3, 4, 2, 1, 6, 5, 4, 3, 2, 1, 5, 6}, {1, 2, 3, 
     4}, {}, {}, {}, {}, {}]]],
  Editable->False]], "Print"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00137199999999999995570210131745625404`3.157954024650357", ",", 
   RowBox[{"{", 
    RowBox[{"CanonicalPerm", ",", "12", ",", "True"}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"test", "[", 
   RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
    RowBox[{"CanonicalPerm", "[", 
     RowBox[{
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "4", ",", "3"}], "}"}], "]"}], ",", "4", 
      ",", 
      RowBox[{"GenSet", "[", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Images", "[", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}]}], ",", 
        RowBox[{"Images", "[", 
         RowBox[{"{", 
          RowBox[{"4", ",", "3", ",", "2", ",", "1"}], "}"}], "]"}]}], "]"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"DummySet", "[", 
        RowBox[{"M2", ",", 
         RowBox[{"{", "}"}], ",", "0"}], "]"}], "}"}], ",", 
      RowBox[{"MathLink", "\[Rule]", "True"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], "//", "AbsoluteTiming"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00095799999999999997570693244242079345`3.001965422358168", ",", 
   RowBox[{"{", 
    RowBox[{"CanonicalPerm", ",", "13", ",", "True"}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"test", "[", 
   RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
    RowBox[{"CanonicalPerm", "[", 
     RowBox[{
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "4", ",", "3"}], "}"}], "]"}], ",", "4", 
      ",", 
      RowBox[{"StrongGenSet", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "3"}], "}"}], ",", 
        RowBox[{"GenSet", "[", 
         RowBox[{
          RowBox[{"-", 
           RowBox[{"Images", "[", 
            RowBox[{"{", 
             RowBox[{"3", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}]}], ",", 
          RowBox[{"Images", "[", 
           RowBox[{"{", 
            RowBox[{"4", ",", "3", ",", "2", ",", "1"}], "}"}], "]"}]}], 
         "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"DummySet", "[", 
        RowBox[{"M2", ",", 
         RowBox[{"{", "}"}], ",", "0"}], "]"}], "}"}], ",", 
      RowBox[{"MathLink", "\[Rule]", "False"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], "//", "AbsoluteTiming"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00429500000000000020650148258027911652`3.653563081446885", ",", 
   RowBox[{"{", 
    RowBox[{"CanonicalPerm", ",", "14", ",", "True"}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"test", "[", 
   RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
    RowBox[{"CanonicalPerm", "[", 
     RowBox[{
      RowBox[{"Images", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "4", ",", "3"}], "}"}], "]"}], ",", "4", 
      ",", 
      RowBox[{"StrongGenSet", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "3"}], "}"}], ",", 
        RowBox[{"GenSet", "[", 
         RowBox[{
          RowBox[{"-", 
           RowBox[{"Images", "[", 
            RowBox[{"{", 
             RowBox[{"3", ",", "4", ",", "2", ",", "1"}], "}"}], "]"}]}], ",", 
          RowBox[{"Images", "[", 
           RowBox[{"{", 
            RowBox[{"4", ",", "3", ",", "2", ",", "1"}], "}"}], "]"}]}], 
         "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"DummySet", "[", 
        RowBox[{"M2", ",", 
         RowBox[{"{", "}"}], ",", "0"}], "]"}], "}"}], ",", 
      RowBox[{"MathLink", "\[Rule]", "True"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], "//", "AbsoluteTiming"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.00124500000000000001290634266126744478`3.1157692647113793", ",", 
   RowBox[{"{", 
    RowBox[{"CanonicalPerm", ",", "15", ",", "True"}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{
       "5", ",", "7", ",", "3", ",", "4", ",", "1", ",", "2", ",", "8", ",", 
        "6"}], "}"}], "]"}], ",", "8", ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3", ",", "5"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"5", ",", "6"}], "}"}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "3"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M4", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"5", ",", "8"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "6"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "7"}], "}"}]}], "}"}], ",", "1"}], "]"}], "}"}], 
     ",", 
     RowBox[{"MathLink", "\[Rule]", "False"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "3", ",", "4", ",", "5", ",", "6", ",", "1", ",", "2", ",", "7", ",", 
      "8"}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "16", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{
       "5", ",", "7", ",", "3", ",", "4", ",", "1", ",", "2", ",", "8", ",", 
        "6"}], "}"}], "]"}], ",", "8", ",", 
     RowBox[{"StrongGenSet", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3", ",", "5"}], "}"}], ",", 
       RowBox[{"GenSet", "[", 
        RowBox[{
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{"{", 
           RowBox[{"5", ",", "6"}], "}"}], "]"}], ",", 
         RowBox[{"Cycles", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "3"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}], "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M4", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"5", ",", "8"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "6"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "7"}], "}"}]}], "}"}], ",", "1"}], "]"}], "}"}], 
     ",", 
     RowBox[{"MathLink", "\[Rule]", "True"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Images", "[", 
    RowBox[{"{", 
     RowBox[{
     "3", ",", "4", ",", "5", ",", "6", ",", "1", ",", "2", ",", "7", ",", 
      "8"}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "17", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["Renato's example in paper II:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"sperm", "=", 
  RowBox[{"TranslatePerm", "[", 
   RowBox[{
    RowBox[{"Perm", "[", 
     RowBox[{"{", 
      RowBox[{
      "3", ",", "2", ",", "7", ",", "11", ",", "4", ",", "5", ",", "10", ",", 
       "6", ",", "8", ",", "9", ",", "12", ",", "1"}], "}"}], "]"}], ",", 
    "Images"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"GS", "=", 
   RowBox[{"TranslatePerm", "[", 
    RowBox[{
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{
          "2", ",", "1", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", 
           ",", "8", ",", "9", ",", "10", ",", "11", ",", "12"}], "}"}], 
         "]"}]}], ",", 
       RowBox[{"-", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{
          "1", ",", "2", ",", "4", ",", "3", ",", "5", ",", "6", ",", "7", 
           ",", "8", ",", "9", ",", "10", ",", "11", ",", "12"}], "}"}], 
         "]"}]}], ",", 
       RowBox[{"-", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{
          "1", ",", "2", ",", "3", ",", "4", ",", "6", ",", "5", ",", "7", 
           ",", "8", ",", "9", ",", "10", ",", "11", ",", "12"}], "}"}], 
         "]"}]}], ",", 
       RowBox[{"-", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{
          "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "8", 
           ",", "7", ",", "9", ",", "10", ",", "11", ",", "12"}], "}"}], 
         "]"}]}], ",", 
       RowBox[{"-", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{
          "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", 
           ",", "8", ",", "10", ",", "9", ",", "11", ",", "12"}], "}"}], 
         "]"}]}], ",", 
       RowBox[{"-", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{
          "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", 
           ",", "8", ",", "9", ",", "10", ",", "12", ",", "11"}], "}"}], 
         "]"}]}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "3", ",", "4", ",", "1", ",", "2", ",", "5", ",", "6", ",", "7", ",",
           "8", ",", "9", ",", "10", ",", "11", ",", "12"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "3", ",", "4", ",", "7", ",", "8", ",", "5", ",",
           "6", ",", "9", ",", "10", ",", "11", ",", "12"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",",
           "8", ",", "11", ",", "12", ",", "9", ",", "10"}], "}"}], "]"}], 
       ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "3", ",", "4", ",", "9", ",", "10", ",", "11", 
          ",", "12", ",", "5", ",", "6", ",", "7", ",", "8"}], "}"}], "]"}]}],
       "]"}], ",", "Images"}], "]"}]}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{"Images", "[", 
  RowBox[{"{", 
   RowBox[{
   "12", ",", "2", ",", "1", ",", "5", ",", "6", ",", "8", ",", "3", ",", "9",
     ",", "10", ",", "7", ",", "4", ",", "11"}], "}"}], "]"}]], "Output"]
}, Open  ]],

Cell["Here all indices are free:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"test", "[", 
   RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
    RowBox[{"CanonicalPerm", "[", 
     RowBox[{"sperm", ",", "12", ",", "GS", ",", 
      RowBox[{"Range", "[", 
       RowBox[{"1", ",", "12"}], "]"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"TimeVerbose", "\[Rule]", "True"}], ",", 
      RowBox[{"MathLink", "\[Rule]", "False"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "5", ",", "2", ",", "12", ",", "3", ",", "9", ",", "6", ",", 
       "8", ",", "4", ",", "11", ",", "7", ",", "10"}], "}"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], "//", "AbsoluteTiming"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"SGS for group of order \"\>", "\[InvisibleSpace]", "1024", 
   "\[InvisibleSpace]", "\<\" computed in \"\>", "\[InvisibleSpace]", 
   "0.6727020000000152`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm[
  "SGS for group of order ", 1024, " computed in ", 0.6727020000000152, 
   " secs."],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.013383000000004586`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Free algorithm applied in ", 0.013383000000004586`, " secs."],
  
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.69390600000000002278710553582641296089`5.861900556002109", ",", 
   RowBox[{"{", 
    RowBox[{"CanonicalPerm", ",", "18", ",", "True"}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"test", "[", 
   RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
    RowBox[{"CanonicalPerm", "[", 
     RowBox[{"sperm", ",", "12", ",", "GS", ",", 
      RowBox[{"Range", "[", 
       RowBox[{"1", ",", "12"}], "]"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"MathLink", "\[Rule]", "True"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "5", ",", "2", ",", "12", ",", "3", ",", "9", ",", "6", ",", 
       "8", ",", "4", ",", "11", ",", "7", ",", "10"}], "}"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], "//", "AbsoluteTiming"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0061640000000000002081113059659855935`3.810462543326006", ",", 
   RowBox[{"{", 
    RowBox[{"CanonicalPerm", ",", "19", ",", "True"}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["Here we do not order the base:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"test", "[", 
   RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
    RowBox[{"CanonicalPerm", "[", 
     RowBox[{"sperm", ",", "12", ",", "GS", ",", 
      RowBox[{"Range", "[", 
       RowBox[{"1", ",", "12"}], "]"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"TimeVerbose", "\[Rule]", "True"}], ",", 
      RowBox[{"OrderedBase", "\[Rule]", "False"}], ",", 
      RowBox[{"MathLink", "\[Rule]", "False"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"-", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "5", ",", "2", ",", "12", ",", "3", ",", "9", ",", "6", ",", 
        "8", ",", "7", ",", "10", ",", "11", ",", "4"}], "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], "//", "AbsoluteTiming"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"SGS for group of order \"\>", "\[InvisibleSpace]", "1024", 
   "\[InvisibleSpace]", "\<\" computed in \"\>", "\[InvisibleSpace]", 
   "0.3982900000000029`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm[
  "SGS for group of order ", 1024, " computed in ", 0.3982900000000029, 
   " secs."],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.009737999999998692`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Free algorithm applied in ", 0.009737999999998692, " secs."],
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.41581499999999999017674667811661493033`5.639500065181586", ",", 
   RowBox[{"{", 
    RowBox[{"CanonicalPerm", ",", "20", ",", "True"}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"test", "[", 
   RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
    RowBox[{"CanonicalPerm", "[", 
     RowBox[{"sperm", ",", "12", ",", "GS", ",", 
      RowBox[{"Range", "[", 
       RowBox[{"1", ",", "12"}], "]"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"OrderedBase", "\[Rule]", "False"}], ",", 
      RowBox[{"MathLink", "\[Rule]", "True"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"-", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "5", ",", "2", ",", "12", ",", "3", ",", "9", ",", "6", ",", 
        "8", ",", "7", ",", "10", ",", "11", ",", "4"}], "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], "//", "AbsoluteTiming"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.00274900000000000014135914661039805651`3.4597746531230924", ",", 
   RowBox[{"{", 
    RowBox[{"CanonicalPerm", ",", "21", ",", "True"}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["Here we include the dummy indices.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{"sperm", ",", "12", ",", "GS", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "6"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"7", ",", "8"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"9", ",", "10"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"11", ",", "12"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
      "}"}], ",", 
     RowBox[{"TimeVerbose", "\[Rule]", "True"}], ",", 
     RowBox[{"MathLink", "\[Rule]", "False"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "3", ",", "2", ",", "5", ",", "4", ",", "7", ",", "9", ",", 
       "11", ",", "6", ",", "10", ",", "8", ",", "12"}], "}"}], "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"SGS for group of order \"\>", "\[InvisibleSpace]", "1024", 
   "\[InvisibleSpace]", "\<\" computed in \"\>", "\[InvisibleSpace]", 
   "0.6743420000000242`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm[
  "SGS for group of order ", 1024, " computed in ", 0.6743420000000242, 
   " secs."],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.006786000000005288`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Free algorithm applied in ", 0.006786000000005288, " secs."],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Dummy algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.09530300000000125`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Dummy algorithm applied in ", 0.09530300000000125, " secs."],
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "22", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"test", "[", 
   RowBox[{"CanonicalPerm", ",", 
    RowBox[{"CanonicalPerm", "[", 
     RowBox[{"sperm", ",", "12", ",", "GS", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"DummySet", "[", 
        RowBox[{"M", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"3", ",", "4"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"5", ",", "6"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"7", ",", "8"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"9", ",", "10"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"11", ",", "12"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
       "}"}], ",", 
      RowBox[{"MathLink", "\[Rule]", "True"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"-", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "3", ",", "2", ",", "5", ",", "4", ",", "7", ",", "9", ",", 
        "11", ",", "6", ",", "10", ",", "8", ",", "12"}], "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], "//", "AbsoluteTiming"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.00446500000000000021871393585115583846`3.6704213765041898", ",", 
   RowBox[{"{", 
    RowBox[{"CanonicalPerm", ",", "23", ",", "True"}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["Here we do not order the base:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{"sperm", ",", "12", ",", "GS", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "6"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"7", ",", "8"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"9", ",", "10"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"11", ",", "12"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
      "}"}], ",", 
     RowBox[{"OrderedBase", "\[Rule]", "False"}], ",", 
     RowBox[{"TimeVerbose", "\[Rule]", "True"}], ",", 
     RowBox[{"MathLink", "\[Rule]", "False"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"-", 
    RowBox[{"Images", "[", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "3", ",", "2", ",", "6", ",", "5", ",", "10", ",", "7", ",", 
       "12", ",", "9", ",", "8", ",", "11", ",", "4"}], "}"}], "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"SGS for group of order \"\>", "\[InvisibleSpace]", "1024", 
   "\[InvisibleSpace]", "\<\" computed in \"\>", "\[InvisibleSpace]", 
   "0.39886699999999564`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm[
  "SGS for group of order ", 1024, " computed in ", 0.39886699999999564`, 
   " secs."],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Free algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.003490999999996802`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Free algorithm applied in ", 0.003490999999996802, " secs."],
  Editable->False]], "Print"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Dummy algorithm applied in \"\>", "\[InvisibleSpace]", 
   "0.22764699999996196`", "\[InvisibleSpace]", "\<\" secs.\"\>"}],
  SequenceForm["Dummy algorithm applied in ", 0.22764699999996196`, " secs."],
  
  Editable->False]], "Print"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "24", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"test", "[", 
   RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
    RowBox[{"CanonicalPerm", "[", 
     RowBox[{"sperm", ",", "12", ",", "GS", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"DummySet", "[", 
        RowBox[{"M", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"3", ",", "4"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"5", ",", "6"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"7", ",", "8"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"9", ",", "10"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"11", ",", "12"}], "}"}]}], "}"}], ",", "1"}], "]"}], 
       "}"}], ",", 
      RowBox[{"OrderedBase", "\[Rule]", "False"}], ",", 
      RowBox[{"MathLink", "\[Rule]", "True"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"-", 
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "3", ",", "2", ",", "6", ",", "5", ",", "10", ",", "7", ",", 
        "12", ",", "9", ",", "8", ",", "11", ",", "4"}], "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], "//", "AbsoluteTiming"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.01055500000000000014599432773820808507`4.044058150923299", ",", 
   RowBox[{"{", 
    RowBox[{"CanonicalPerm", ",", "25", ",", "True"}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\"Difficult example\":", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1"}], "}"}], "]"}], ",", "2", ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{"-", 
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "]"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M2", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1"}], "}"}], "}"}], ",", "1"}], "]"}], "}"}], 
     ",", 
     RowBox[{"MathLink", "\[Rule]", "False"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "0"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "26", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{
     RowBox[{"Images", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1"}], "}"}], "]"}], ",", "2", ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{"-", 
       RowBox[{"Cycles", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "]"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"M2", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1"}], "}"}], "}"}], ",", "1"}], "]"}], "}"}], 
     ",", 
     RowBox[{"MathLink", "\[Rule]", "True"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "0"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "27", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Now with repeated indices. Suppose we work with a Riemann tensor:\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SGS", "=", 
   RowBox[{"StrongGenSet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"GenSet", "[", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], "]"}]}], ",", 
       RowBox[{"-", 
        RowBox[{"Perm", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "]"}]}], ",", 
       RowBox[{"Perm", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}]}], "]"}]}],
     "]"}]}], ";"}]], "Input"],

Cell["\<\
Here the canonical list is {a,b,1,1} for instance. Then the permutation gives \
R^{1,1,a,b}.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", "4", 
     ",", "SGS", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"RepeatedSet", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], "]"}], "}"}], ",", 
     RowBox[{"MathLink", "\[Rule]", "False"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "0"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "28", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", "4", 
     ",", "SGS", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"DummySet", "[", 
       RowBox[{"TM", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"3", ",", "4"}], "}"}], "}"}], ",", "1"}], "]"}], "}"}], 
     ",", 
     RowBox[{"xPermVerbose", "\[Rule]", "True"}], ",", 
     RowBox[{"MathLink", "\[Rule]", "True"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "0"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"MathLinkCanonicalPerm:: \"\>", "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"MLCanonicalPerm", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2", ",", "5", ",", "6"}], "}"}],
       ",", "6", ",", "1", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "2", ",", "1", ",", "3", ",", "4", ",", "6", ",", "5", ",", "1", ",", 
        "2", ",", "4", ",", "3", ",", "6", ",", "5", ",", "3", ",", "4", ",", 
        "1", ",", "2", ",", "5", ",", "6"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", "2", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", "1", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}]}], "]"}],
    HoldForm]}],
  SequenceForm["MathLinkCanonicalPerm:: ", 
   HoldForm[
    xAct`xPerm`Private`MLCanonicalPerm[{3, 4, 1, 2, 5, 6}, 6, 1, {1, 2, 3, 
     4}, {2, 1, 3, 4, 6, 5, 1, 2, 4, 3, 6, 5, 3, 4, 1, 2, 5, 6}, {1, 2}, {
     2}, {3, 4}, {1}, {}, {}]]],
  Editable->False]], "Print"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "29", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", "[", 
  RowBox[{"CanonicalPerm", ",", "\[IndentingNewLine]", 
   RowBox[{"CanonicalPerm", "[", 
    RowBox[{
     RowBox[{"Perm", "[", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], "]"}], ",", "4", 
     ",", "SGS", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"RepeatedSet", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], "]"}], "}"}], ",", 
     RowBox[{"xPermVerbose", "\[Rule]", "True"}], ",", 
     RowBox[{"OrderedBase", "\[Rule]", "False"}], ",", 
     RowBox[{"MathLink", "\[Rule]", "True"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "0"}], "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"MathLinkCanonicalPerm:: \"\>", "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"MLCanonicalPerm", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "1", ",", "2", ",", "5", ",", "6"}], "}"}],
       ",", "6", ",", "1", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "2", ",", "1", ",", "3", ",", "4", ",", "6", ",", "5", ",", "1", ",", 
        "2", ",", "4", ",", "3", ",", "6", ",", "5", ",", "3", ",", "4", ",", 
        "1", ",", "2", ",", "5", ",", "6"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "2", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}]}], "]"}],
    HoldForm]}],
  SequenceForm["MathLinkCanonicalPerm:: ", 
   HoldForm[
    xAct`xPerm`Private`MLCanonicalPerm[{3, 4, 1, 2, 5, 6}, 6, 1, {1, 3, 5}, {
     2, 1, 3, 4, 6, 5, 1, 2, 4, 3, 6, 5, 3, 4, 1, 2, 5, 6}, {1, 
     2}, {}, {}, {}, {2}, {3, 4}]]],
  Editable->False]], "Print"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"CanonicalPerm", ",", "30", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TranslateSet", "[", 
  RowBox[{"{", 
   RowBox[{"RepeatedSet", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}], "]"}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Sequence", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}]}], "]"}]], "Output"]
}, Open  ]],

Cell["\<\
Simple example with SchreierSims, including negative permutations:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SchreierSims", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}], "]"}], ",", "4", ",", 
   RowBox[{"MathLink", "\[Rule]", "False"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], "]"}]}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrderOfGroup", "[", 
  RowBox[{"%", ",", 
   RowBox[{"MathLink", "\[Rule]", "True"}]}], "]"}]], "Input"],

Cell[BoxData["8"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SchreierSims", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}], "]"}], ",", "4", ",", 
   RowBox[{"MathLink", "\[Rule]", "True"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"StrongGenSet", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"GenSet", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ",", 
     RowBox[{"Cycles", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], "]"}]}]}], "]"}]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrderOfGroup", "[", 
  RowBox[{"%", ",", 
   RowBox[{"MathLink", "\[Rule]", "True"}]}], "]"}]], "Input"],

Cell[BoxData["8"], "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["7. End",
 FontColor->RGBColor[0, 0, 1]]], "Section",
 FontSize->24],

Cell[CellGroupData[{

Cell["7.1. End private and package", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"End", "[", "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"xAct`xPerm`Private`\"\>"], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"EndPackage", "[", "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"On", "[", 
   RowBox[{"System`Cycles", "::", "shdw"}], "]"}], ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "xAct`xPerm`*"}]], "Input"],

Cell[BoxData[
 DynamicModuleBox[{Typeset`open$$ = True}, 
  PaneSelectorBox[{False->
   RowBox[{
    OpenerBox[Dynamic[Typeset`open$$],
     ImageSize->Small], 
    StyleBox["xAct`xPerm`", "InfoHeading"]}], True->GridBox[{
     {
      RowBox[{
       OpenerBox[Dynamic[Typeset`open$$],
        ImageSize->Small], 
       StyleBox["xAct`xPerm`", "InfoHeading"]}]},
     {GridBox[{
        {
         ButtonBox["AllBaseImages",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"AllBaseImages", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["LeftTransversal",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"LeftTransversal", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermMemberQ",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"PermMemberQ", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["SchreierOrbits",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SchreierOrbits", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["BaseChange",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"BaseChange", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["MathLink",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"MathLink", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermOrderedQ",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"PermOrderedQ", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["SchreierSims",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SchreierSims", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["BaseChangeCheck",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"BaseChangeCheck", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["MinB",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"MinB", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermPower",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"PermPower", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["Search",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"Search", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["CanonicalPerm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"CanonicalPerm", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["NonStablePoints",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"NonStablePoints", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermProduct",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"PermProduct", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["SetStabilizer",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SetStabilizer", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["Coset",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"Coset", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["NotationOfPerm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"NotationOfPerm", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermQ",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"PermQ", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["SGSOfDummySet",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SGSOfDummySet", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["Cycles",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"Cycles", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["OnPoints",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"OnPoints", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermSignature",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"PermSignature", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["SortB",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"SortB", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["DeleteRedundantGenerators",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "DeleteRedundantGenerators", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["Orbit",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"Orbit", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermSort",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"PermSort", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["Stabilizer",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Stabilizer", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["Dimino",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"Dimino", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["Orbits",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"Orbits", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermutationFromTo",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"PermutationFromTo", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["StabilizerChain",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"StabilizerChain", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["Disclaimer",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Disclaimer", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["OrderedBase",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"OrderedBase", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermuteList",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"PermuteList", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["StablePoints",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"StablePoints", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["DoubleCosetRepresentative",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "DoubleCosetRepresentative", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["OrderOfGroup",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"OrderOfGroup", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermWord",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"PermWord", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["StrongGenSet",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"StrongGenSet", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["DoubleTransversal",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"DoubleTransversal", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PairSymmetric",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"PairSymmetric", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["RandomPerm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"RandomPerm", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["TimeVerbose",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"TimeVerbose", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["DummySet",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"DummySet", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["Perm",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"Perm", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["RepeatedSet",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"RepeatedSet", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["TraceSchreier",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"TraceSchreier", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["FromBaseImage",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"FromBaseImage", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermDeg",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"PermDeg", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["RiemannSymmetric",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"RiemannSymmetric", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["TranslatePerm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"TranslatePerm", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["GenSet",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"GenSet", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermEqual",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"PermEqual", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["RiemannSymmetry",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"RiemannSymmetry", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["UseRules",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"UseRules", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["Group",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"Group", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermGreater",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"PermGreater", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["RightCosetRepresentative",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "RightCosetRepresentative", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["xPermVerbose",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"xPermVerbose", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["ID",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"ID", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermGreaterEqual",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"PermGreaterEqual", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["RightTransversal",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"RightTransversal", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["$Version",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"$Version", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["Images",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"Images", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermLength",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"PermLength", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["Rules",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"Rules", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["$xpermExecutable",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"$xpermExecutable", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["InversePerm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"InversePerm", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermLess",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"PermLess", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["Schreier",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"Schreier", "xAct`xPerm`"}},
          
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["$xpermLink",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"$xpermLink", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]},
        {
         ButtonBox["JoinSGS",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"JoinSGS", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["PermLessEqual",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"PermLessEqual", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["SchreierOrbit",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SchreierOrbit", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"], 
         ButtonBox["$xpermQ",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"$xpermQ", "xAct`xPerm`"}},
          ButtonNote->"xAct`xPerm`"]}
       },
       DefaultBaseStyle->"InfoGrid",
       GridBoxItemSize->{"Columns" -> {{
            Scaled[0.2375]}}}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}]}, 
   Dynamic[Typeset`open$$],
   ImageSize->Automatic]]], "Print", "InfoCell"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "xAct`xPerm`Private`*"}]], "Input"],

Cell[BoxData[
 DynamicModuleBox[{Typeset`open$$ = True}, 
  PaneSelectorBox[{False->
   RowBox[{
    OpenerBox[Dynamic[Typeset`open$$],
     ImageSize->Small], 
    StyleBox["xAct`xPerm`Private`", "InfoHeading"]}], True->GridBox[{
     {
      RowBox[{
       OpenerBox[Dynamic[Typeset`open$$],
        ImageSize->Small], 
       StyleBox["xAct`xPerm`Private`", "InfoHeading"]}]},
     {GridBox[{
        {
         ButtonBox["a",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"a", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["d$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"d$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["l",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"l", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["n$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"n$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["sets",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"sets", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["A",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"A", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["e",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"e", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["L",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"L", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["ob",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"ob", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["setstabilizer",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"setstabilizer", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["a1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"a1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["elts",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"elts", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["L1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"L1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["ob$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"ob$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SetStabilizerProperty",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "SetStabilizerProperty", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["a2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"a2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["elts$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"elts$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["L1$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"L1$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["oldDeltai",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"oldDeltai", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["sgd",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"sgd", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["addperm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"addperm", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["emptySGS",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"emptySGS", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["large",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"large", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["oldDeltai$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"oldDeltai$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["sgd$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"sgd$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["addrand",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"addrand", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["expr",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"expr", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["large$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"large$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["oldSi",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"oldSi", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["Sgroup",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Sgroup", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["addsingletons",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"addsingletons", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["expr7",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"expr7", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["lastFalse",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"lastFalse", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["oldSi$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"oldSi$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["sgs",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"sgs", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["after",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"after", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["expr8",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"expr8", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["lcount",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"lcount", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["om",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"om", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SGS",
          BaseStyle->"InformationLink",
          ButtonData:>{
           "Info3567978242-5455693", {"SGS", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["allcases",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"allcases", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["expr9",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"expr9", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["lcount$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"lcount$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["om$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"om$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SGSD",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SGSD", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["alltests",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"alltests", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["ExtendBase",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"ExtendBase", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["LDeltaBarjp1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"LDeltaBarjp1", "xAct`xPerm`Private`"}},
          
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["options",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"options", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SGSD$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SGSD$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["ALPHA",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"ALPHA", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["f",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"f", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["LDeltaBarjp1$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"LDeltaBarjp1$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["orbit",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"orbit", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SGSK",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SGSK", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["alphaindices",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"alphaindices", "xAct`xPerm`Private`"}},
          
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["F",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"F", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["leftlist",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"leftlist", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["orbitof",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"orbitof", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SGSOfDummy",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SGSOfDummy", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["alphaindices$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"alphaindices$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["F1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"F1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["len",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"len", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["orbits",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"orbits", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SGSQ",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SGSQ", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["ALPHA$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"ALPHA$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["F1$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"F1$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["length",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"length", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["orbit$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"orbit$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SGSs",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SGSs", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["b",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"b", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["F2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"F2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["length$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"length$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["ordH",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"ordH", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SGSS",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SGSS", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["B",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"B", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["F2$",
          BaseStyle->"InformationLink",
          ButtonData:>{
           "Info3567978242-5455693", {"F2$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["len$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"len$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["ordH$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"ordH$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SGSs3",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SGSs3", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["b1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"b1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["first",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"first", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["LessB",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"LessB", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["os",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"os", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SGSs4",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SGSs4", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["b2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"b2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["first$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"first$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["level",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"level", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["oS",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"oS", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SGSS$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SGSS$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["base",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"base", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["found",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"found", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["level$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"level$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["other",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"other", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SGS$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SGS$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["base2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"base2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["free",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"free", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["list",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"list", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["otherdummyslots",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "otherdummyslots", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["Si",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Si", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["base2$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"base2$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["freeps",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"freeps", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["list1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"list1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["otherdummyslots$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "otherdummyslots$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["sign",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"sign", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["BaseImage",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"BaseImage", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["freeps$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"freeps$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["list2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"list2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["otherSGSK",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"otherSGSK", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["signofcycle",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"signofcycle", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["baseimages0",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"baseimages0", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["frees",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"frees", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["list$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"list$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["otherSGSK$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"otherSGSK$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["Sip1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Sip1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["baseimages1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"baseimages1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["frees$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"frees$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["L$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"L$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["p",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"p", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["Sip1$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Sip1$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["baseimages2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"baseimages2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["FromSign",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"FromSign", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["m",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"m", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["p1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"p1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["Si$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Si$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["base$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"base$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["g",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"g", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["M",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"M", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["p1a",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"p1a", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["slotdummysets",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"slotdummysets", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["BasicOrbit",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"BasicOrbit", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["g1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"g1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["m1c",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"m1c", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["p1b",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"p1b", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["slotdummysets$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "slotdummysets$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["bcc",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"bcc", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["g1$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"g1$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["M2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"M2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["p1$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"p1$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["small",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"small", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["bcc$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"bcc$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["g2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"g2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["M4",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"M4", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["p2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"p2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["small$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"small$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["bi",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"bi", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["g2$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"g2$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["MakeGroup",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"MakeGroup", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["p2a",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"p2a", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["sn",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"sn", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["bi$",
          BaseStyle->"InformationLink",
          ButtonData:>{
           "Info3567978242-5455693", {"bi$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["g3",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"g3", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["MathCanonicalPerm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "MathCanonicalPerm", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["p2b",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"p2b", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["sn$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"sn$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["bS",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"bS", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["gamma",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"gamma", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["MathLinkCanonicalPerm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "MathLinkCanonicalPerm", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["p2$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"p2$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["Sorbit",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Sorbit", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["bSsort",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"bSsort", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["gammai",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"gammai", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["MathLinkOrbit",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"MathLinkOrbit", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["pair",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"pair", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["Sorbit$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Sorbit$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["bSsort$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"bSsort$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["gammai$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"gammai$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["MathLinkSchreierSims",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "MathLinkSchreierSims", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["pairs",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"pairs", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SortCycle",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SortCycle", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["bS$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"bS$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["gammas",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"gammas", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["MathLinkSetStabilizer",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "MathLinkSetStabilizer", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["pairs$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"pairs$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SortCycles",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SortCycles", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["b$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"b$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["gammas$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"gammas$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["MathOrbit",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"MathOrbit", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["PBQ",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"PBQ", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["sperm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"sperm", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["B$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"B$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["gamma$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"gamma$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["MathSchreierSims",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "MathSchreierSims", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["PBQ$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"PBQ$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["stableGS",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"stableGS", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["c",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"c", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["gbar",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"gbar", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["MathToxPermGen",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "MathToxPermGen", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["perm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"perm", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["stablepoints",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"stablepoints", "xAct`xPerm`Private`"}},
          
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["candidates",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"candidates", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["gbar$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"gbar$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["MathToxPermSym",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "MathToxPermSym", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["perm0",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"perm0", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["stablepoints$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"stablepoints$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["candidates$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"candidates$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["gen",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"gen", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["mcs",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"mcs", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["perm1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"perm1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["stperms",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"stperms", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["canon",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"canon", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["Generate",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Generate", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["message",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"message", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["perm2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"perm2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["subgroup",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"subgroup", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["canon$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"canon$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["gens",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"gens", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["messageQ",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"messageQ", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["perm3",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"perm3", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["sublist",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"sublist", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["chain",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"chain", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["genset",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"genset", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["method",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"method", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["PermCycles",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"PermCycles", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["sublist$",
          BaseStyle->"InformationLink",
          ButtonData:>{
           "Info3567978242-5455693", {"sublist$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["check",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"check", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["genset$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"genset$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["method$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"method$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["PermList",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"PermList", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SubsetQ",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SubsetQ", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["CheckDeadLink",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"CheckDeadLink", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["gens$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"gens$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["metricQ",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"metricQ", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["perms",
          BaseStyle->"InformationLink",
          ButtonData:>{
           "Info3567978242-5455693", {"perms", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SubsetQ$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"SubsetQ$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["check$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"check$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["gen$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"gen$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["MLCanonicalPerm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "MLCanonicalPerm", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["permsAllBases",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"permsAllBases", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["sym",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"sym", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["check$39116",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"check$39116", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["gn",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"gn", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["MLOrbit",
          BaseStyle->"InformationLink",
          ButtonData:>{
           "Info3567978242-5455693", {"MLOrbit", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["permsDimino",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"permsDimino", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["sym1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"sym1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["comp",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"comp", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["gn$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"gn$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["MLSchreierSims",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "MLSchreierSims", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["permsMathematica",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "permsMathematica", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["sym2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"sym2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["compB",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"compB", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["GoodBye",
          BaseStyle->"InformationLink",
          ButtonData:>{
           "Info3567978242-5455693", {"GoodBye", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["MLSetStabilizer",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "MLSetStabilizer", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["permutation",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"permutation", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["symbol",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"symbol", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["configurations",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "configurations", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["group",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"group", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["more",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"more", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["PermutationFromCycles",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "PermutationFromCycles", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["s$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"s$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["coset",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"coset", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["gs",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"gs", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["more$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"more$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["perm$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"perm$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["t",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"t", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["coset1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"coset1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["GS",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"GS", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["MovePairOf",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"MovePairOf", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["pgens",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"pgens", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["T",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"T", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["coset2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"coset2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["GSPerm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"GSPerm", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["mQ",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"mQ", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["pgens$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"pgens$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["TAB",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"TAB", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["coset3",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"coset3", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["GSPerm$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"GSPerm$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["mQ$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"mQ$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["pi",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"pi", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["TAB$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"TAB$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["coset4",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"coset4", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["gs$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"gs$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["m$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"m$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["pi$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"pi$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["takenext",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"takenext", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["coset5",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"coset5", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["g$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"g$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["n",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"n", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["pk",
          BaseStyle->"InformationLink",
          ButtonData:>{
           "Info3567978242-5455693", {"pk", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["test",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"test", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["cosets",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"cosets", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["h",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"h", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["ncoset",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"ncoset", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["pk$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"pk$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["testcounter",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"testcounter", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["cosetsR",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"cosetsR", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["H",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"H", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["ncosets",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"ncosets", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["point",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"point", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["testresult",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"testresult", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["cyc",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"cyc", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["head",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"head", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["ncoset$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"ncoset$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["points",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"points", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["time",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"time", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["cyclicGroup",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"cyclicGroup", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["Hello",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Hello", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newB",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newB", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["point$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"point$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["timeverb",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"timeverb", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["cyclist",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"cyclist", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["hello1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"hello1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newbase",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newbase", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["pos",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"pos", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["timeverb$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"timeverb$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["cycs",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"cycs", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["hello2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"hello2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newbase2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newbase2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["pos$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"pos$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["time$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"time$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["cycs1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"cycs1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["hello3",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"hello3", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newbase2$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newbase2$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["pp",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"pp", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["TM",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"TM", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["cycs2",
          BaseStyle->"InformationLink",
          ButtonData:>{
           "Info3567978242-5455693", {"cycs2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["i",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"i", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newbase$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newbase$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["pp$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"pp$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["tmp",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"tmp", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["cycslist",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"cycslist", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["i1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"i1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newB$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newB$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["prev",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"prev", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["TMPHead",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"TMPHead", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["cycslist1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"cycslist1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["i2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"i2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newdummysets",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newdummysets", "xAct`xPerm`Private`"}},
          
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["product",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"product", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["tmp$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"tmp$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["cycslist2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"cycslist2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["i3",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"i3", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newdummysets$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newdummysets$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["product$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"product$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["toadd",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"toadd", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["cyc$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"cyc$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["i4",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"i4", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newfree",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newfree", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["property",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"property", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["toadd$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"toadd$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["d",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"d", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["id",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"id", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newfreeps",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newfreeps", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["Protection",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Protection", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["ToCycles",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"ToCycles", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["d1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"d1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["id$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"id$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newfreeps$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newfreeps$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["ps",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"ps", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["toimagelist",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"toimagelist", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["d1$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"d1$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["IfMathematica789",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "IfMathematica789", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newfree$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newfree$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["p$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"p$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["tosgslist",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"tosgslist", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["deg",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"deg", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["ig",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"ig", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newgamma",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newgamma", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["q",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"q", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["ToSign",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"ToSign", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Delta",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Delta", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["ig$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"ig$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newgamma$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newgamma$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["r1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"r1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["TranslateSet",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"TranslateSet", "xAct`xPerm`Private`"}},
          
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Delta1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Delta1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["ii",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"ii", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newGS",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newGS", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["r2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"r2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["TranslateSetStructure",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "TranslateSetStructure", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Delta1$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Delta1$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["images",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"images", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newGS2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newGS2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["rand",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"rand", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["transpose",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"transpose", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Deltab",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Deltab", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["IMAGES",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"IMAGES", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newGS2$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newGS2$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["rcount",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"rcount", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["transversal",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"transversal", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Deltab$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Deltab$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["images0",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"images0", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newGS$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newGS$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["rcount$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"rcount$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["transversal$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"transversal$", "xAct`xPerm`Private`"}},
          
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["DeltaD",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"DeltaD", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["images1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"images1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newperm",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newperm", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["reducedSGS",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"reducedSGS", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["TT",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"TT", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["DeltaD$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"DeltaD$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["images2",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"images2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newperm$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newperm$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["RemovePairOf",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"RemovePairOf", "xAct`xPerm`Private`"}},
          
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["TT$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"TT$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Deltag",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Deltag", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["IMAGES$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"IMAGES$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newS",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newS", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["repe",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"repe", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["t$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"t$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Deltag$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Deltag$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["imgs",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"imgs", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newSGS",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newSGS", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["repeatedsets",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"repeatedsets", "xAct`xPerm`Private`"}},
          
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["T$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"T$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Deltai",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Deltai", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["imgs$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"imgs$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newSGSK",
          BaseStyle->"InformationLink",
          ButtonData:>{
           "Info3567978242-5455693", {"newSGSK", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["repes",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"repes", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["u",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"u", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Deltai$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Deltai$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["inds",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"inds", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newSGSK$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newSGSK$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["reps",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"reps", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["u$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"u$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Deltaj",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Deltaj", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["initB",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"initB", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newSGS$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newSGS$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["rest",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"rest", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["vds",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"vds", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Deltajp1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Deltajp1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["initbase",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"initbase", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["newS$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"newS$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["result",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"result", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["verb",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"verb", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Deltajp1$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Deltajp1$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["initpoints",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"initpoints", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["NEXT",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"NEXT", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["result$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"result$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["verb$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"verb$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Deltaj$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Deltaj$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["Interchange",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Interchange", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["NEXT$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"NEXT$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["RightCoset",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"RightCoset", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["version",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"version", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Deltap",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Deltap", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["invert",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"invert", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["nondummybase",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"nondummybase", "xAct`xPerm`Private`"}},
          
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["rightlist",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"rightlist", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["vrs",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"vrs", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Deltap$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Deltap$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["invproduct",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"invproduct", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["nondummybase$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"nondummybase$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["rules",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"rules", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["w",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"w", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Deltas",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Deltas", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["invproduct$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"invproduct$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["nosign",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"nosign", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["rules1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"rules1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["word",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"word", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Deltas$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Deltas$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["IP",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"IP", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["not",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"not", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["rules2",
          BaseStyle->"InformationLink",
          ButtonData:>{
           "Info3567978242-5455693", {"rules2", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["word$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"word$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Delta$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Delta$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["i$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"i$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["notation",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"notation", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["rules$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"rules$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["w$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"w$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Dgroup",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Dgroup", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["j",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"j", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["notation$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"notation$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["s",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"s", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["x",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"x", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["dir",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"dir", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["jj",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"jj", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["not$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"not$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["S",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"S", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["xpermConnect",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"xpermConnect", "xAct`xPerm`Private`"}},
          
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["DS",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"DS", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["jj$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"jj$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["np",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"np", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["s1",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"s1", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["xPermToMathGen",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "xPermToMathGen", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["dummies",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"dummies", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["junk",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"junk", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["np$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"np$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["s1$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"s1$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["xPermToMathSym",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "xPermToMathSym", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["dummyindices",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"dummyindices", "xAct`xPerm`Private`"}},
          
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["junk$",
          BaseStyle->"InformationLink",
          ButtonData:>{
           "Info3567978242-5455693", {"junk$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["nu",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"nu", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["s3",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"s3", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["x$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"x$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["dummyindices$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"dummyindices$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["j$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"j$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["nuD",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"nuD", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["s4",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"s4", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["y",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"y", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["Dummyset",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Dummyset", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["k",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"k", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["nuD$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"nuD$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["s5",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"s5", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["z",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3567978242-5455693", {"z", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["dummysets",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"dummysets", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["Korbit",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Korbit", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["num",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"num", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["s6",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"s6", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["$ReadingVerbose",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "$ReadingVerbose", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["dummyslots",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"dummyslots", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["Korbit$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"Korbit$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["number",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"number", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["SchreierSimsStep",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {
            "SchreierSimsStep", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["$xPermRules",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"$xPermRules", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"]},
        {
         ButtonBox["dummyslots$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"dummyslots$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["KS",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"KS", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["nuS",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"nuS", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["schvecs",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"schvecs", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], ""},
        {
         ButtonBox["dums",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"dums", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["KS$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"KS$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["nuS$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"nuS$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["schvecs$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"schvecs$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], ""},
        {
         ButtonBox["dums$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"dums$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["k$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"k$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["nu$",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"nu$", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], 
         ButtonBox["set",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3567978242-5455693", {"set", "xAct`xPerm`Private`"}},
          ButtonNote->"xAct`xPerm`Private`"], ""}
       },
       DefaultBaseStyle->"InfoGrid",
       GridBoxItemSize->{"Columns" -> {{
            Scaled[0.19]}}}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}]}, 
   Dynamic[Typeset`open$$],
   ImageSize->Automatic]]], "Print", "InfoCell"]
}, Open  ]],

Cell["Time spent in executing the notebook:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SessionTime", "[", "]"}]], "Input"],

Cell[BoxData["297.010519`8.924316824169274"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TimeUsed", "[", "]"}]], "Input"],

Cell[BoxData["233.725593`"], "Output"]
}, Open  ]],

Cell["Checks:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xAct`xPerm`Private`alltests", "[", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Length", "@", "%"}], ",", 
   RowBox[{"And", "@@", "%"}]}], "}"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"262", ",", "True"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "@", 
  RowBox[{"Position", "[", 
   RowBox[{"%%", ",", "False"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"DownValues", "[", "xAct`xPerm`Private`testresult", "]"}], "[", 
  RowBox[{"[", "%", "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->Automatic,
WindowSize->{1016, 720},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
PrivateNotebookOptions->{"FileOutlineCache"->False},
ShowSelection->True,
Magnification->1,
FrontEndVersion->"10.2 for Mac OS X x86 (32-bit, 64-bit Kernel) (July 6, \
2015)",
StyleDefinitions->"Default.nb",
TrackedCellChanges -> False
]

